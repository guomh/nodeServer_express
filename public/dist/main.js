webpackJsonp([0],[
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// Last time updated: 2017-07-23 5:31:53 AM UTC\n\n// ________________\n// RecordRTC v5.4.3\n\n// Open-Sourced: https://github.com/muaz-khan/RecordRTC\n\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n\n// ____________\n// RecordRTC.js\n\n/**\n * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. \n * @summary Record audio, video or screen inside the browser.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef RecordRTC\n * @class\n * @example\n * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {\n *     type: 'video', // audio or video or gif or canvas\n *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc\n * });\n * recorder.startRecording();\n * @see For further information:\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}\n */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction RecordRTC(mediaStream, config) {\n    if (!mediaStream) {\n        throw 'First parameter is required.';\n    }\n\n    config = config || {\n        type: 'video'\n    };\n\n    config = new RecordRTCConfiguration(mediaStream, config);\n\n    // a reference to user's recordRTC object\n    var self = this;\n\n    function startRecording() {\n        if (!config.disableLogs) {\n            console.log('started recording ' + config.type + ' stream.');\n        }\n\n        if (mediaRecorder) {\n            mediaRecorder.clearRecordedData();\n            mediaRecorder.record();\n\n            setState('recording');\n\n            if (self.recordingDuration) {\n                handleRecordingDuration();\n            }\n            return self;\n        }\n\n        initRecorder(function () {\n            if (self.recordingDuration) {\n                handleRecordingDuration();\n            }\n        });\n\n        return self;\n    }\n\n    function initRecorder(initCallback) {\n        if (initCallback) {\n            config.initCallback = function () {\n                initCallback();\n                initCallback = config.initCallback = null; // recorder.initRecorder should be call-backed once.\n            };\n        }\n\n        var Recorder = new GetRecorderType(mediaStream, config);\n\n        mediaRecorder = new Recorder(mediaStream, config);\n        mediaRecorder.record();\n\n        setState('recording');\n\n        if (!config.disableLogs) {\n            console.log('Initialized recorderType:', mediaRecorder.constructor.name, 'for output-type:', config.type);\n        }\n    }\n\n    function stopRecording(callback) {\n        if (!mediaRecorder) {\n            return console.warn(WARNING);\n        }\n\n        if (self.state === 'paused') {\n            self.resumeRecording();\n\n            setTimeout(function () {\n                stopRecording(callback);\n            }, 1);\n            return;\n        }\n\n        if (self.state !== 'recording') {\n            if (!config.disableLogs) {\n                console.warn('Unable to stop the recording. Recording state: ', self.state);\n            }\n            return;\n        }\n\n        if (!config.disableLogs) {\n            console.warn('Stopped recording ' + config.type + ' stream.');\n        }\n\n        if (config.type !== 'gif') {\n            mediaRecorder.stop(_callback);\n        } else {\n            mediaRecorder.stop();\n            _callback();\n        }\n\n        setState('stopped');\n\n        function _callback(__blob) {\n            Object.keys(mediaRecorder).forEach(function (key) {\n                if (typeof mediaRecorder[key] === 'function') {\n                    return;\n                }\n\n                self[key] = mediaRecorder[key];\n            });\n\n            var blob = mediaRecorder.blob;\n\n            if (!blob) {\n                if (__blob) {\n                    mediaRecorder.blob = blob = __blob;\n                } else {\n                    throw 'Recording failed.';\n                }\n            }\n\n            if (callback) {\n                var url = URL.createObjectURL(blob);\n\n                if (typeof callback.call === 'function') {\n                    callback.call(self, url);\n                } else {\n                    callback(url);\n                }\n            }\n\n            if (blob && !config.disableLogs) {\n                console.log(blob.type, '->', bytesToSize(blob.size));\n            }\n\n            if (!config.autoWriteToDisk) {\n                return;\n            }\n\n            getDataURL(function (dataURL) {\n                var parameter = {};\n                parameter[config.type + 'Blob'] = dataURL;\n                DiskStorage.Store(parameter);\n            });\n        }\n    }\n\n    function pauseRecording() {\n        if (!mediaRecorder) {\n            return console.warn(WARNING);\n        }\n\n        if (self.state !== 'recording') {\n            if (!config.disableLogs) {\n                console.warn('Unable to pause the recording. Recording state: ', self.state);\n            }\n            return;\n        }\n\n        setState('paused');\n\n        mediaRecorder.pause();\n\n        if (!config.disableLogs) {\n            console.log('Paused recording.');\n        }\n    }\n\n    function resumeRecording() {\n        if (!mediaRecorder) {\n            return console.warn(WARNING);\n        }\n\n        if (self.state !== 'paused') {\n            if (!config.disableLogs) {\n                console.warn('Unable to resume the recording. Recording state: ', self.state);\n            }\n            return;\n        }\n\n        setState('recording');\n\n        // not all libs have this method yet\n        mediaRecorder.resume();\n\n        if (!config.disableLogs) {\n            console.log('Resumed recording.');\n        }\n    }\n\n    function readFile(_blob) {\n        postMessage(new FileReaderSync().readAsDataURL(_blob));\n    }\n\n    function getDataURL(callback, _mediaRecorder) {\n        if (!callback) {\n            throw 'Pass a callback function over getDataURL.';\n        }\n\n        var blob = _mediaRecorder ? _mediaRecorder.blob : (mediaRecorder || {}).blob;\n\n        if (!blob) {\n            if (!config.disableLogs) {\n                console.warn('Blob encoder did not finish its job yet.');\n            }\n\n            setTimeout(function () {\n                getDataURL(callback, _mediaRecorder);\n            }, 1000);\n            return;\n        }\n\n        if (typeof Worker !== 'undefined' && !navigator.mozGetUserMedia) {\n            var webWorker = processInWebWorker(readFile);\n\n            webWorker.onmessage = function (event) {\n                callback(event.data);\n            };\n\n            webWorker.postMessage(blob);\n        } else {\n            var reader = new FileReader();\n            reader.readAsDataURL(blob);\n            reader.onload = function (event) {\n                callback(event.target.result);\n            };\n        }\n\n        function processInWebWorker(_function) {\n            var blob = URL.createObjectURL(new Blob([_function.toString(), 'this.onmessage =  function (e) {' + _function.name + '(e.data);}'], {\n                type: 'application/javascript'\n            }));\n\n            var worker = new Worker(blob);\n            URL.revokeObjectURL(blob);\n            return worker;\n        }\n    }\n\n    function handleRecordingDuration(counter) {\n        counter = counter || 0;\n\n        if (self.state === 'paused') {\n            setTimeout(function () {\n                handleRecordingDuration(counter);\n            }, 1000);\n            return;\n        }\n\n        if (self.state === 'stopped') {\n            return;\n        }\n\n        if (counter >= self.recordingDuration) {\n            stopRecording(self.onRecordingStopped);\n            return;\n        }\n\n        counter += 1000; // 1-second\n\n        setTimeout(function () {\n            handleRecordingDuration(counter);\n        }, 1000);\n    }\n\n    function setState(state) {\n        self.state = state;\n\n        if (typeof self.onStateChanged.call === 'function') {\n            self.onStateChanged.call(self, state);\n        } else {\n            self.onStateChanged(state);\n        }\n    }\n\n    var WARNING = 'It seems that \"startRecording\" is not invoked for ' + config.type + ' recorder.';\n\n    var mediaRecorder;\n\n    var returnObject = {\n        /**\n         * This method starts the recording.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * var recorder = RecordRTC(mediaStream, {\n         *     type: 'video'\n         * });\n         * recorder.startRecording();\n         */\n        startRecording: startRecording,\n\n        /**\n         * This method stops the recording. It is strongly recommended to get \"blob\" or \"URI\" inside the callback to make sure all recorders finished their job.\n         * @param {function} callback - Callback to get the recorded blob.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.stopRecording(function() {\n         *     // use either \"this\" or \"recorder\" object; both are identical\n         *     video.src = this.toURL();\n         *     var blob = this.getBlob();\n         * });\n         */\n        stopRecording: stopRecording,\n\n        /**\n         * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @todo Firefox is unable to pause the recording. Fix it.\n         * @example\n         * recorder.pauseRecording();  // pause the recording\n         * recorder.resumeRecording(); // resume again\n         */\n        pauseRecording: pauseRecording,\n\n        /**\n         * This method resumes the recording.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.pauseRecording();  // first of all, pause the recording\n         * recorder.resumeRecording(); // now resume it\n         */\n        resumeRecording: resumeRecording,\n\n        /**\n         * This method initializes the recording.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @todo This method should be deprecated.\n         * @example\n         * recorder.initRecorder();\n         */\n        initRecorder: initRecorder,\n\n        /**\n         * Ask RecordRTC to auto-stop the recording after 5 minutes.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * var fiveMinutes = 5 * 1000 * 60;\n         * recorder.setRecordingDuration(fiveMinutes, function() {\n         *    var blob = this.getBlob();\n         *    video.src = this.toURL();\n         * });\n         * \n         * // or otherwise\n         * recorder.setRecordingDuration(fiveMinutes).onRecordingStopped(function() {\n         *    var blob = this.getBlob();\n         *    video.src = this.toURL();\n         * });\n         */\n        setRecordingDuration: function setRecordingDuration(recordingDuration, callback) {\n            if (typeof recordingDuration === 'undefined') {\n                throw 'recordingDuration is required.';\n            }\n\n            if (typeof recordingDuration !== 'number') {\n                throw 'recordingDuration must be a number.';\n            }\n\n            self.recordingDuration = recordingDuration;\n            self.onRecordingStopped = callback || function () {};\n\n            return {\n                onRecordingStopped: function onRecordingStopped(callback) {\n                    self.onRecordingStopped = callback;\n                }\n            };\n        },\n\n        /**\n         * This method can be used to clear/reset all the recorded data.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @todo Figure out the difference between \"reset\" and \"clearRecordedData\" methods.\n         * @example\n         * recorder.clearRecordedData();\n         */\n        clearRecordedData: function clearRecordedData() {\n            if (!mediaRecorder) {\n                return console.warn(WARNING);\n            }\n\n            mediaRecorder.clearRecordedData();\n\n            if (!config.disableLogs) {\n                console.log('Cleared old recorded data.');\n            }\n        },\n\n        /**\n         * Get the recorded blob. Use this method inside the \"stopRecording\" callback.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.stopRecording(function() {\n         *     var blob = this.getBlob();\n         *\n         *     var file = new File([blob], 'filename.webm', {\n         *         type: 'video/webm'\n         *     });\n         *\n         *     var formData = new FormData();\n         *     formData.append('file', file); // upload \"File\" object rather than a \"Blob\"\n         *     uploadToServer(formData);\n         * });\n         * @returns {Blob} Returns recorded data as \"Blob\" object.\n         */\n        getBlob: function getBlob() {\n            if (!mediaRecorder) {\n                return console.warn(WARNING);\n            }\n\n            return mediaRecorder.blob;\n        },\n\n        /**\n         * Get data-URI instead of Blob.\n         * @param {function} callback - Callback to get the Data-URI.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.stopRecording(function() {\n         *     recorder.getDataURL(function(dataURI) {\n         *         video.src = dataURI;\n         *     });\n         * });\n         */\n        getDataURL: getDataURL,\n\n        /**\n         * Get virtual/temporary URL. Usage of this URL is limited to current tab.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.stopRecording(function() {\n         *     video.src = this.toURL();\n         * });\n         * @returns {String} Returns a virtual/temporary URL for the recorded \"Blob\".\n         */\n        toURL: function toURL() {\n            if (!mediaRecorder) {\n                return console.warn(WARNING);\n            }\n\n            return URL.createObjectURL(mediaRecorder.blob);\n        },\n\n        /**\n         * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * var internal = recorder.getInternalRecorder();\n         * if(internal instanceof MultiStreamRecorder) {\n         *     internal.addStreams([newAudioStream]);\n         *     internal.resetVideoStreams([screenStream]);\n         * }\n         * @returns {Object} Returns internal recording object.\n         */\n        getInternalRecorder: function getInternalRecorder() {\n            return mediaRecorder;\n        },\n\n        /**\n         * Invoke save-as dialog to save the recorded blob into your disk.\n         * @param {string} fileName - Set your own file name.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.stopRecording(function() {\n         *     this.save('file-name');\n         *\n         *     // or manually:\n         *     invokeSaveAsDialog(this.getBlob(), 'filename.webm');\n         * });\n         */\n        save: function save(fileName) {\n            if (!mediaRecorder) {\n                return console.warn(WARNING);\n            }\n\n            invokeSaveAsDialog(mediaRecorder.blob, fileName);\n        },\n\n        /**\n         * This method gets a blob from indexed-DB storage.\n         * @param {function} callback - Callback to get the recorded blob.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.getFromDisk(function(dataURL) {\n         *     video.src = dataURL;\n         * });\n         */\n        getFromDisk: function getFromDisk(callback) {\n            if (!mediaRecorder) {\n                return console.warn(WARNING);\n            }\n\n            RecordRTC.getFromDisk(config.type, callback);\n        },\n\n        /**\n         * This method appends an array of webp images to the recorded video-blob. It takes an \"array\" object.\n         * @type {Array.<Array>}\n         * @param {Array} arrayOfWebPImages - Array of webp images.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @todo This method should be deprecated.\n         * @example\n         * var arrayOfWebPImages = [];\n         * arrayOfWebPImages.push({\n         *     duration: index,\n         *     image: 'data:image/webp;base64,...'\n         * });\n         * recorder.setAdvertisementArray(arrayOfWebPImages);\n         */\n        setAdvertisementArray: function setAdvertisementArray(arrayOfWebPImages) {\n            config.advertisement = [];\n\n            var length = arrayOfWebPImages.length;\n            for (var i = 0; i < length; i++) {\n                config.advertisement.push({\n                    duration: i,\n                    image: arrayOfWebPImages[i]\n                });\n            }\n        },\n\n        /**\n         * It is equivalent to <code class=\"str\">\"recorder.getBlob()\"</code> method. Usage of \"getBlob\" is recommended, though.\n         * @property {Blob} blob - Recorded Blob can be accessed using this property.\n         * @memberof RecordRTC\n         * @instance\n         * @readonly\n         * @example\n         * recorder.stopRecording(function() {\n         *     var blob = this.blob;\n         *\n         *     // below one is recommended\n         *     var blob = this.getBlob();\n         * });\n         */\n        blob: null,\n\n        /**\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\n         * @property {number} bufferSize - Buffer-size used to encode the WAV container\n         * @memberof RecordRTC\n         * @instance\n         * @readonly\n         * @example\n         * recorder.stopRecording(function() {\n         *     alert('Recorder used this buffer-size: ' + this.bufferSize);\n         * });\n         */\n        bufferSize: 0,\n\n        /**\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\n         * @property {number} sampleRate - Sample-rates used to encode the WAV container\n         * @memberof RecordRTC\n         * @instance\n         * @readonly\n         * @example\n         * recorder.stopRecording(function() {\n         *     alert('Recorder used these sample-rates: ' + this.sampleRate);\n         * });\n         */\n        sampleRate: 0,\n\n        /**\n         * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.\n         * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\n         * @memberof RecordRTC\n         * @instance\n         * @readonly\n         * @example\n         * recorder.stopRecording(function() {\n         *     var arrayBuffer = this.buffer;\n         *     alert(arrayBuffer.byteLength);\n         * });\n         */\n        buffer: null,\n\n        /**\n         * This method resets the recorder. So that you can reuse single recorder instance many times.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.reset();\n         * recorder.startRecording();\n         */\n        reset: function reset() {\n            if (mediaRecorder && typeof mediaRecorder.clearRecordedData === 'function') {\n                mediaRecorder.clearRecordedData();\n            }\n            mediaRecorder = null;\n            setState('inactive');\n            self.blob = null;\n        },\n\n        /**\n         * This method is called whenever recorder's state changes. Use this as an \"event\".\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.onStateChanged = function(state) {\n         *     console.log('Recorder state: ', state);\n         * };\n         */\n        onStateChanged: function onStateChanged(state) {\n            if (!config.disableLogs) {\n                console.log('Recorder state changed:', state);\n            }\n        },\n\n        /**\n         * A recorder can have inactive, recording, paused or stopped states.\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\n         * @memberof RecordRTC\n         * @static\n         * @readonly\n         * @example\n         * // this looper function will keep you updated about the recorder's states.\n         * (function looper() {\n         *     document.querySelector('h1').innerHTML = 'Recorder's state is: ' + recorder.state;\n         *     if(recorder.state === 'stopped') return; // ignore+stop\n         *     setTimeout(looper, 1000); // update after every 3-seconds\n         * })();\n         * recorder.startRecording();\n         */\n        state: 'inactive',\n\n        /**\n         * Get recorder's readonly state.\n         * @method\n         * @memberof RecordRTC\n         * @example\n         * var state = recorder.getState();\n         * @returns {String} Returns recording state.\n         */\n        getState: function getState() {\n            return self.state;\n        }\n    };\n\n    if (!this) {\n        self = returnObject;\n        return returnObject;\n    }\n\n    // if someone wants to use RecordRTC with the \"new\" keyword.\n    for (var prop in returnObject) {\n        this[prop] = returnObject[prop];\n    }\n\n    self = this;\n\n    return returnObject;\n}\n\n/**\n * This method can be used to get all recorded blobs from IndexedDB storage.\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\n * @param {function} callback - Callback function to get all stored blobs.\n * @method\n * @memberof RecordRTC\n * @example\n * RecordRTC.getFromDisk('all', function(dataURL, type){\n *     if(type === 'audio') { }\n *     if(type === 'video') { }\n *     if(type === 'gif')   { }\n * });\n */\nRecordRTC.getFromDisk = function (type, callback) {\n    if (!callback) {\n        throw 'callback is mandatory.';\n    }\n\n    console.log('Getting recorded ' + (type === 'all' ? 'blobs' : type + ' blob ') + ' from disk!');\n    DiskStorage.Fetch(function (dataURL, _type) {\n        if (type !== 'all' && _type === type + 'Blob' && callback) {\n            callback(dataURL);\n        }\n\n        if (type === 'all' && callback) {\n            callback(dataURL, _type.replace('Blob', ''));\n        }\n    });\n};\n\n/**\n * This method can be used to store recorded blobs into IndexedDB storage.\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\n * @method\n * @memberof RecordRTC\n * @example\n * RecordRTC.writeToDisk({\n *     audio: audioBlob,\n *     video: videoBlob,\n *     gif  : gifBlob\n * });\n */\nRecordRTC.writeToDisk = function (options) {\n    console.log('Writing recorded blob(s) to disk!');\n    options = options || {};\n    if (options.audio && options.video && options.gif) {\n        options.audio.getDataURL(function (audioDataURL) {\n            options.video.getDataURL(function (videoDataURL) {\n                options.gif.getDataURL(function (gifDataURL) {\n                    DiskStorage.Store({\n                        audioBlob: audioDataURL,\n                        videoBlob: videoDataURL,\n                        gifBlob: gifDataURL\n                    });\n                });\n            });\n        });\n    } else if (options.audio && options.video) {\n        options.audio.getDataURL(function (audioDataURL) {\n            options.video.getDataURL(function (videoDataURL) {\n                DiskStorage.Store({\n                    audioBlob: audioDataURL,\n                    videoBlob: videoDataURL\n                });\n            });\n        });\n    } else if (options.audio && options.gif) {\n        options.audio.getDataURL(function (audioDataURL) {\n            options.gif.getDataURL(function (gifDataURL) {\n                DiskStorage.Store({\n                    audioBlob: audioDataURL,\n                    gifBlob: gifDataURL\n                });\n            });\n        });\n    } else if (options.video && options.gif) {\n        options.video.getDataURL(function (videoDataURL) {\n            options.gif.getDataURL(function (gifDataURL) {\n                DiskStorage.Store({\n                    videoBlob: videoDataURL,\n                    gifBlob: gifDataURL\n                });\n            });\n        });\n    } else if (options.audio) {\n        options.audio.getDataURL(function (audioDataURL) {\n            DiskStorage.Store({\n                audioBlob: audioDataURL\n            });\n        });\n    } else if (options.video) {\n        options.video.getDataURL(function (videoDataURL) {\n            DiskStorage.Store({\n                videoBlob: videoDataURL\n            });\n        });\n    } else if (options.gif) {\n        options.gif.getDataURL(function (gifDataURL) {\n            DiskStorage.Store({\n                gifBlob: gifDataURL\n            });\n        });\n    }\n};\n\nif (true /* && !!module.exports*/) {\n        module.exports = RecordRTC;\n    }\n\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n        return RecordRTC;\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n// __________________________\n// RecordRTC-Configuration.js\n\n/**\n * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.\n * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid \"config\" object.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef RecordRTCConfiguration\n * @class\n * @example\n * var options = RecordRTCConfiguration(mediaStream, options);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\n */\n\nfunction RecordRTCConfiguration(mediaStream, config) {\n    if (config.recorderType && !config.type) {\n        if (config.recorderType === WhammyRecorder || config.recorderType === CanvasRecorder) {\n            config.type = 'video';\n        } else if (config.recorderType === GifRecorder) {\n            config.type = 'gif';\n        } else if (config.recorderType === StereoAudioRecorder) {\n            config.type = 'audio';\n        } else if (config.recorderType === MediaStreamRecorder) {\n            if (mediaStream.getAudioTracks().length && mediaStream.getVideoTracks().length) {\n                config.type = 'video';\n            } else if (mediaStream.getAudioTracks().length && !mediaStream.getVideoTracks().length) {\n                config.type = 'audio';\n            } else if (!mediaStream.getAudioTracks().length && mediaStream.getVideoTracks().length) {\n                config.type = 'audio';\n            } else {\n                // config.type = 'UnKnown';\n            }\n        }\n    }\n\n    if (typeof MediaStreamRecorder !== 'undefined' && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n        if (!config.mimeType) {\n            config.mimeType = 'video/webm';\n        }\n\n        if (!config.type) {\n            config.type = config.mimeType.split('/')[0];\n        }\n\n        if (!config.bitsPerSecond) {\n            // config.bitsPerSecond = 128000;\n        }\n    }\n\n    // consider default type=audio\n    if (!config.type) {\n        if (config.mimeType) {\n            config.type = config.mimeType.split('/')[0];\n        }\n        if (!config.type) {\n            config.type = 'audio';\n        }\n    }\n\n    return config;\n}\n\n// __________________\n// GetRecorderType.js\n\n/**\n * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.\n * @summary It returns best recorder-type available for your browser.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef GetRecorderType\n * @class\n * @example\n * var RecorderType = GetRecorderType(options);\n * var recorder = new RecorderType(options);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\n */\n\nfunction GetRecorderType(mediaStream, config) {\n    var recorder;\n\n    // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\n    // todo: detect if it is Edge, then auto use: StereoAudioRecorder\n    if (isChrome || isEdge || isOpera) {\n        // Media Stream Recording API has not been implemented in chrome yet;\n        // That's why using WebAudio API to record stereo audio in WAV format\n        recorder = StereoAudioRecorder;\n    }\n\n    if (typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype && !isChrome) {\n        recorder = MediaStreamRecorder;\n    }\n\n    // video recorder (in WebM format)\n    if (config.type === 'video' && (isChrome || isOpera)) {\n        recorder = WhammyRecorder;\n    }\n\n    // video recorder (in Gif format)\n    if (config.type === 'gif') {\n        recorder = GifRecorder;\n    }\n\n    // html2canvas recording!\n    if (config.type === 'canvas') {\n        recorder = CanvasRecorder;\n    }\n\n    if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n        if (mediaStream.getVideoTracks && mediaStream.getVideoTracks().length || mediaStream.getAudioTracks && mediaStream.getAudioTracks().length) {\n            // audio-only recording\n            if (config.type === 'audio') {\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\n                    recorder = MediaStreamRecorder;\n                }\n                // else recorder = StereoAudioRecorder;\n            } else {\n                // video or screen tracks\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('video/webm')) {\n                    recorder = MediaStreamRecorder;\n                }\n            }\n        }\n    }\n\n    if (config.recorderType) {\n        recorder = config.recorderType;\n    }\n\n    if (mediaStream instanceof Array && mediaStream.length) {\n        recorder = MultiStreamRecorder;\n    }\n\n    if (!config.disableLogs && !!recorder && !!recorder.name) {\n        console.log('Using recorderType:', recorder.name || recorder.constructor.name);\n    }\n\n    return recorder;\n}\n\n// _____________\n// MRecordRTC.js\n\n/**\n * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.\n * @summary MRecordRTC stands for \"Multiple-RecordRTC\".\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef MRecordRTC\n * @class\n * @example\n * var recorder = new MRecordRTC();\n * recorder.addStream(MediaStream);\n * recorder.mediaType = {\n *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\n *     video: true, // or WhammyRecorder or MediaStreamRecorder\n *     gif: true    // or GifRecorder\n * };\n * // mimeType is optional and should be set only in advance cases.\n * recorder.mimeType = {\n *     audio: 'audio/wav',\n *     video: 'video/webm',\n *     gif:   'image/gif'\n * };\n * recorder.startRecording();\n * @see For further information:\n * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @requires {@link RecordRTC}\n */\n\nfunction MRecordRTC(mediaStream) {\n\n    /**\n     * This method attaches MediaStream object to {@link MRecordRTC}.\n     * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.addStream(MediaStream);\n     */\n    this.addStream = function (_mediaStream) {\n        if (_mediaStream) {\n            mediaStream = _mediaStream;\n        }\n    };\n\n    /**\n     * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\n     * @property {object} mediaType - {audio: true, video: true, gif: true}\n     * @memberof MRecordRTC\n     * @example\n     * var recorder = new MRecordRTC();\n     * recorder.mediaType = {\n     *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\n     *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder\n     *     gif  : true  // TRUE or GifRecorder\n     * };\n     */\n    this.mediaType = {\n        audio: true,\n        video: true\n    };\n\n    /**\n     * This method starts recording.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.startRecording();\n     */\n    this.startRecording = function () {\n        var mediaType = this.mediaType;\n        var recorderType;\n        var mimeType = this.mimeType || {\n            audio: null,\n            video: null,\n            gif: null\n        };\n\n        if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && mediaStream.getAudioTracks && !mediaStream.getAudioTracks().length) {\n            mediaType.audio = false;\n        }\n\n        if (typeof mediaType.video !== 'function' && isMediaRecorderCompatible() && mediaStream.getVideoTracks && !mediaStream.getVideoTracks().length) {\n            mediaType.video = false;\n        }\n\n        if (typeof mediaType.gif !== 'function' && isMediaRecorderCompatible() && mediaStream.getVideoTracks && !mediaStream.getVideoTracks().length) {\n            mediaType.gif = false;\n        }\n\n        if (!mediaType.audio && !mediaType.video && !mediaType.gif) {\n            throw 'MediaStream must have either audio or video tracks.';\n        }\n\n        if (!!mediaType.audio) {\n            recorderType = null;\n            if (typeof mediaType.audio === 'function') {\n                recorderType = mediaType.audio;\n            }\n\n            this.audioRecorder = new RecordRTC(mediaStream, {\n                type: 'audio',\n                bufferSize: this.bufferSize,\n                sampleRate: this.sampleRate,\n                numberOfAudioChannels: this.numberOfAudioChannels || 2,\n                disableLogs: this.disableLogs,\n                recorderType: recorderType,\n                mimeType: mimeType.audio,\n                timeSlice: this.timeSlice,\n                onTimeStamp: this.onTimeStamp\n            });\n\n            if (!mediaType.video) {\n                this.audioRecorder.startRecording();\n            }\n        }\n\n        if (!!mediaType.video) {\n            recorderType = null;\n            if (typeof mediaType.video === 'function') {\n                recorderType = mediaType.video;\n            }\n\n            var newStream = mediaStream;\n\n            if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\n                var videoTrack = mediaStream.getVideoTracks()[0];\n\n                if (!!navigator.mozGetUserMedia) {\n                    newStream = new MediaStream();\n                    newStream.addTrack(videoTrack);\n\n                    if (recorderType && recorderType === WhammyRecorder) {\n                        // Firefox does NOT support webp-encoding yet\n                        recorderType = MediaStreamRecorder;\n                    }\n                } else {\n                    newStream = new MediaStream([videoTrack]);\n                }\n            }\n\n            this.videoRecorder = new RecordRTC(newStream, {\n                type: 'video',\n                video: this.video,\n                canvas: this.canvas,\n                frameInterval: this.frameInterval || 10,\n                disableLogs: this.disableLogs,\n                recorderType: recorderType,\n                mimeType: mimeType.video,\n                timeSlice: this.timeSlice,\n                onTimeStamp: this.onTimeStamp\n            });\n\n            if (!mediaType.audio) {\n                this.videoRecorder.startRecording();\n            }\n        }\n\n        if (!!mediaType.audio && !!mediaType.video) {\n            var self = this;\n\n            // this line prevents StereoAudioRecorder\n            // todo: fix it\n            if (isMediaRecorderCompatible() /* && !this.audioRecorder */) {\n                    self.audioRecorder = null;\n                    self.videoRecorder.startRecording();\n                } else {\n                self.videoRecorder.initRecorder(function () {\n                    self.audioRecorder.initRecorder(function () {\n                        // Both recorders are ready to record things accurately\n                        self.videoRecorder.startRecording();\n                        self.audioRecorder.startRecording();\n                    });\n                });\n            }\n        }\n\n        if (!!mediaType.gif) {\n            recorderType = null;\n            if (typeof mediaType.gif === 'function') {\n                recorderType = mediaType.gif;\n            }\n            this.gifRecorder = new RecordRTC(mediaStream, {\n                type: 'gif',\n                frameRate: this.frameRate || 200,\n                quality: this.quality || 10,\n                disableLogs: this.disableLogs,\n                recorderType: recorderType,\n                mimeType: mimeType.gif\n            });\n            this.gifRecorder.startRecording();\n        }\n    };\n\n    /**\n     * This method stops recording.\n     * @param {function} callback - Callback function is invoked when all encoders finished their jobs.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.stopRecording(function(recording){\n     *     var audioBlob = recording.audio;\n     *     var videoBlob = recording.video;\n     *     var gifBlob   = recording.gif;\n     * });\n     */\n    this.stopRecording = function (callback) {\n        callback = callback || function () {};\n\n        if (this.audioRecorder) {\n            this.audioRecorder.stopRecording(function (blobURL) {\n                callback(blobURL, 'audio');\n            });\n        }\n\n        if (this.videoRecorder) {\n            this.videoRecorder.stopRecording(function (blobURL) {\n                callback(blobURL, 'video');\n            });\n        }\n\n        if (this.gifRecorder) {\n            this.gifRecorder.stopRecording(function (blobURL) {\n                callback(blobURL, 'gif');\n            });\n        }\n    };\n\n    /**\n     * This method pauses recording.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.pauseRecording();\n     */\n    this.pauseRecording = function () {\n        if (this.audioRecorder) {\n            this.audioRecorder.pauseRecording();\n        }\n\n        if (this.videoRecorder) {\n            this.videoRecorder.pauseRecording();\n        }\n\n        if (this.gifRecorder) {\n            this.gifRecorder.pauseRecording();\n        }\n    };\n\n    /**\n     * This method resumes recording.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.resumeRecording();\n     */\n    this.resumeRecording = function () {\n        if (this.audioRecorder) {\n            this.audioRecorder.resumeRecording();\n        }\n\n        if (this.videoRecorder) {\n            this.videoRecorder.resumeRecording();\n        }\n\n        if (this.gifRecorder) {\n            this.gifRecorder.resumeRecording();\n        }\n    };\n\n    /**\n     * This method can be used to manually get all recorded blobs.\n     * @param {function} callback - All recorded blobs are passed back to the \"callback\" function.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.getBlob(function(recording){\n     *     var audioBlob = recording.audio;\n     *     var videoBlob = recording.video;\n     *     var gifBlob   = recording.gif;\n     * });\n     * // or\n     * var audioBlob = recorder.getBlob().audio;\n     * var videoBlob = recorder.getBlob().video;\n     */\n    this.getBlob = function (callback) {\n        var output = {};\n\n        if (this.audioRecorder) {\n            output.audio = this.audioRecorder.getBlob();\n        }\n\n        if (this.videoRecorder) {\n            output.video = this.videoRecorder.getBlob();\n        }\n\n        if (this.gifRecorder) {\n            output.gif = this.gifRecorder.getBlob();\n        }\n\n        if (callback) {\n            callback(output);\n        }\n\n        return output;\n    };\n\n    /**\n     * This method can be used to manually get all recorded blobs' DataURLs.\n     * @param {function} callback - All recorded blobs' DataURLs are passed back to the \"callback\" function.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.getDataURL(function(recording){\n     *     var audioDataURL = recording.audio;\n     *     var videoDataURL = recording.video;\n     *     var gifDataURL   = recording.gif;\n     * });\n     */\n    this.getDataURL = function (callback) {\n        this.getBlob(function (blob) {\n            if (blob.audio && blob.video) {\n                getDataURL(blob.audio, function (_audioDataURL) {\n                    getDataURL(blob.video, function (_videoDataURL) {\n                        callback({\n                            audio: _audioDataURL,\n                            video: _videoDataURL\n                        });\n                    });\n                });\n            } else if (blob.audio) {\n                getDataURL(blob.audio, function (_audioDataURL) {\n                    callback({\n                        audio: _audioDataURL\n                    });\n                });\n            } else if (blob.video) {\n                getDataURL(blob.video, function (_videoDataURL) {\n                    callback({\n                        video: _videoDataURL\n                    });\n                });\n            }\n        });\n\n        function getDataURL(blob, callback00) {\n            if (typeof Worker !== 'undefined') {\n                var webWorker = processInWebWorker(function readFile(_blob) {\n                    postMessage(new FileReaderSync().readAsDataURL(_blob));\n                });\n\n                webWorker.onmessage = function (event) {\n                    callback00(event.data);\n                };\n\n                webWorker.postMessage(blob);\n            } else {\n                var reader = new FileReader();\n                reader.readAsDataURL(blob);\n                reader.onload = function (event) {\n                    callback00(event.target.result);\n                };\n            }\n        }\n\n        function processInWebWorker(_function) {\n            var blob = URL.createObjectURL(new Blob([_function.toString(), 'this.onmessage =  function (e) {' + _function.name + '(e.data);}'], {\n                type: 'application/javascript'\n            }));\n\n            var worker = new Worker(blob);\n            var url;\n            if (typeof URL !== 'undefined') {\n                url = URL;\n            } else if (typeof webkitURL !== 'undefined') {\n                url = webkitURL;\n            } else {\n                throw 'Neither URL nor webkitURL detected.';\n            }\n            url.revokeObjectURL(blob);\n            return worker;\n        }\n    };\n\n    /**\n     * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.writeToDisk();\n     */\n    this.writeToDisk = function () {\n        RecordRTC.writeToDisk({\n            audio: this.audioRecorder,\n            video: this.videoRecorder,\n            gif: this.gifRecorder\n        });\n    };\n\n    /**\n     * This method can be used to invoke a save-as dialog for all recorded blobs.\n     * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.save({\n     *     audio: 'audio-file-name',\n     *     video: 'video-file-name',\n     *     gif  : 'gif-file-name'\n     * });\n     */\n    this.save = function (args) {\n        args = args || {\n            audio: true,\n            video: true,\n            gif: true\n        };\n\n        if (!!args.audio && this.audioRecorder) {\n            this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\n        }\n\n        if (!!args.video && this.videoRecorder) {\n            this.videoRecorder.save(typeof args.video === 'string' ? args.video : '');\n        }\n        if (!!args.gif && this.gifRecorder) {\n            this.gifRecorder.save(typeof args.gif === 'string' ? args.gif : '');\n        }\n    };\n}\n\n/**\n * This method can be used to get all recorded blobs from IndexedDB storage.\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\n * @param {function} callback - Callback function to get all stored blobs.\n * @method\n * @memberof MRecordRTC\n * @example\n * MRecordRTC.getFromDisk('all', function(dataURL, type){\n *     if(type === 'audio') { }\n *     if(type === 'video') { }\n *     if(type === 'gif')   { }\n * });\n */\nMRecordRTC.getFromDisk = RecordRTC.getFromDisk;\n\n/**\n * This method can be used to store recorded blobs into IndexedDB storage.\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\n * @method\n * @memberof MRecordRTC\n * @example\n * MRecordRTC.writeToDisk({\n *     audio: audioBlob,\n *     video: videoBlob,\n *     gif  : gifBlob\n * });\n */\nMRecordRTC.writeToDisk = RecordRTC.writeToDisk;\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.MRecordRTC = MRecordRTC;\n}\n\nvar browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\n\n(function (that) {\n    if (!that) {\n        return;\n    }\n\n    if (typeof window !== 'undefined') {\n        return;\n    }\n\n    if (typeof global === 'undefined') {\n        return;\n    }\n\n    global.navigator = {\n        userAgent: browserFakeUserAgent,\n        getUserMedia: function getUserMedia() {}\n    };\n\n    if (!global.console) {\n        global.console = {};\n    }\n\n    if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\n        global.console.error = global.console.log = global.console.log || function () {\n            console.log(arguments);\n        };\n    }\n\n    if (typeof document === 'undefined') {\n        /*global document:true */\n        that.document = {};\n\n        document.createElement = document.captureStream = document.mozCaptureStream = function () {\n            var obj = {\n                getContext: function getContext() {\n                    return obj;\n                },\n                play: function play() {},\n                pause: function pause() {},\n                drawImage: function drawImage() {},\n                toDataURL: function toDataURL() {\n                    return '';\n                }\n            };\n            return obj;\n        };\n\n        that.HTMLVideoElement = function () {};\n    }\n\n    if (typeof location === 'undefined') {\n        /*global location:true */\n        that.location = {\n            protocol: 'file:',\n            href: '',\n            hash: ''\n        };\n    }\n\n    if (typeof screen === 'undefined') {\n        /*global screen:true */\n        that.screen = {\n            width: 0,\n            height: 0\n        };\n    }\n\n    if (typeof URL === 'undefined') {\n        /*global screen:true */\n        that.URL = {\n            createObjectURL: function createObjectURL() {\n                return '';\n            },\n            revokeObjectURL: function revokeObjectURL() {\n                return '';\n            }\n        };\n    }\n\n    /*global window:true */\n    that.window = global;\n})(typeof global !== 'undefined' ? global : null);\n\n// _____________________________\n// Cross-Browser-Declarations.js\n\n// animation-frame used in WebM recording\n\n/*jshint -W079 */\nvar requestAnimationFrame = window.requestAnimationFrame;\nif (typeof requestAnimationFrame === 'undefined') {\n    if (typeof webkitRequestAnimationFrame !== 'undefined') {\n        /*global requestAnimationFrame:true */\n        requestAnimationFrame = webkitRequestAnimationFrame;\n    } else if (typeof mozRequestAnimationFrame !== 'undefined') {\n        /*global requestAnimationFrame:true */\n        requestAnimationFrame = mozRequestAnimationFrame;\n    } else if (typeof msRequestAnimationFrame !== 'undefined') {\n        /*global requestAnimationFrame:true */\n        requestAnimationFrame = msRequestAnimationFrame;\n    } else if (typeof requestAnimationFrame === 'undefined') {\n        // via: https://gist.github.com/paulirish/1579671\n        var lastTime = 0;\n\n        /*global requestAnimationFrame:true */\n        requestAnimationFrame = function requestAnimationFrame(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = setTimeout(function () {\n                callback(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n}\n\n/*jshint -W079 */\nvar cancelAnimationFrame = window.cancelAnimationFrame;\nif (typeof cancelAnimationFrame === 'undefined') {\n    if (typeof webkitCancelAnimationFrame !== 'undefined') {\n        /*global cancelAnimationFrame:true */\n        cancelAnimationFrame = webkitCancelAnimationFrame;\n    } else if (typeof mozCancelAnimationFrame !== 'undefined') {\n        /*global cancelAnimationFrame:true */\n        cancelAnimationFrame = mozCancelAnimationFrame;\n    } else if (typeof msCancelAnimationFrame !== 'undefined') {\n        /*global cancelAnimationFrame:true */\n        cancelAnimationFrame = msCancelAnimationFrame;\n    } else if (typeof cancelAnimationFrame === 'undefined') {\n        /*global cancelAnimationFrame:true */\n        cancelAnimationFrame = function cancelAnimationFrame(id) {\n            clearTimeout(id);\n        };\n    }\n}\n\n// WebAudio API representer\nvar AudioContext = window.AudioContext;\n\nif (typeof AudioContext === 'undefined') {\n    if (typeof webkitAudioContext !== 'undefined') {\n        /*global AudioContext:true */\n        AudioContext = webkitAudioContext;\n    }\n\n    if (typeof mozAudioContext !== 'undefined') {\n        /*global AudioContext:true */\n        AudioContext = mozAudioContext;\n    }\n}\n\n/*jshint -W079 */\nvar URL = window.URL;\n\nif (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\n    /*global URL:true */\n    URL = webkitURL;\n}\n\nif (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') {\n    // maybe window.navigator?\n    if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n        navigator.getUserMedia = navigator.webkitGetUserMedia;\n    }\n\n    if (typeof navigator.mozGetUserMedia !== 'undefined') {\n        navigator.getUserMedia = navigator.mozGetUserMedia;\n    }\n}\n\nvar isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveBlob || !!navigator.msSaveOrOpenBlob);\nvar isOpera = !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\nvar isChrome = !isOpera && !isEdge && !!navigator.webkitGetUserMedia;\n\nvar MediaStream = window.MediaStream;\n\nif (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n    MediaStream = webkitMediaStream;\n}\n\n/*global MediaStream:true */\nif (typeof MediaStream !== 'undefined') {\n    if (!('getVideoTracks' in MediaStream.prototype)) {\n        MediaStream.prototype.getVideoTracks = function () {\n            if (!this.getTracks) {\n                return [];\n            }\n\n            var tracks = [];\n            this.getTracks.forEach(function (track) {\n                if (track.kind.toString().indexOf('video') !== -1) {\n                    tracks.push(track);\n                }\n            });\n            return tracks;\n        };\n\n        MediaStream.prototype.getAudioTracks = function () {\n            if (!this.getTracks) {\n                return [];\n            }\n\n            var tracks = [];\n            this.getTracks.forEach(function (track) {\n                if (track.kind.toString().indexOf('audio') !== -1) {\n                    tracks.push(track);\n                }\n            });\n            return tracks;\n        };\n    }\n\n    // override \"stop\" method for all browsers\n    MediaStream.prototype.__stop = MediaStream.prototype.stop;\n    MediaStream.prototype.stop = function () {\n        this.getAudioTracks().forEach(function (track) {\n            if (!!track.stop) {\n                track.stop();\n            }\n        });\n\n        this.getVideoTracks().forEach(function (track) {\n            if (!!track.stop) {\n                track.stop();\n            }\n        });\n\n        if (typeof this.__stop === 'function') {\n            this.__stop();\n        }\n    };\n}\n\n// below function via: http://goo.gl/B3ae8c\n/**\n * @param {number} bytes - Pass bytes and get formafted string.\n * @returns {string} - formafted string\n * @example\n * bytesToSize(1024*1024*5) === '5 GB'\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\nfunction bytesToSize(bytes) {\n    var k = 1000;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    if (bytes === 0) {\n        return '0 Bytes';\n    }\n    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\n    return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\n}\n\n/**\n * @param {Blob} file - File or Blob object. This parameter is required.\n * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\n * @example\n * invokeSaveAsDialog(blob or file, [optional] fileName);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\nfunction invokeSaveAsDialog(file, fileName) {\n    if (!file) {\n        throw 'Blob object is required.';\n    }\n\n    if (!file.type) {\n        try {\n            file.type = 'video/webm';\n        } catch (e) {}\n    }\n\n    var fileExtension = (file.type || 'video/webm').split('/')[1];\n\n    if (fileName && fileName.indexOf('.') !== -1) {\n        var splitted = fileName.split('.');\n        fileName = splitted[0];\n        fileExtension = splitted[1];\n    }\n\n    var fileFullName = (fileName || Math.round(Math.random() * 9999999999) + 888888888) + '.' + fileExtension;\n\n    if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\n        return navigator.msSaveOrOpenBlob(file, fileFullName);\n    } else if (typeof navigator.msSaveBlob !== 'undefined') {\n        return navigator.msSaveBlob(file, fileFullName);\n    }\n\n    var hyperlink = document.createElement('a');\n    hyperlink.href = URL.createObjectURL(file);\n    hyperlink.download = fileFullName;\n\n    hyperlink.style = 'display:none;opacity:0;color:transparent;';\n    (document.body || document.documentElement).appendChild(hyperlink);\n\n    if (typeof hyperlink.click === 'function') {\n        hyperlink.click();\n    } else {\n        hyperlink.target = '_blank';\n        hyperlink.dispatchEvent(new MouseEvent('click', {\n            view: window,\n            bubbles: true,\n            cancelable: true\n        }));\n    }\n\n    URL.revokeObjectURL(hyperlink.href);\n}\n\n// __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129\n// Storage.js\n\n/**\n * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @example\n * Storage.AudioContext === webkitAudioContext\n * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\nvar Storage = {};\n\nif (typeof AudioContext !== 'undefined') {\n    Storage.AudioContext = AudioContext;\n} else if (typeof webkitAudioContext !== 'undefined') {\n    Storage.AudioContext = webkitAudioContext;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.Storage = Storage;\n}\n\nfunction isMediaRecorderCompatible() {\n    var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n    var isChrome = !!window.chrome && !isOpera;\n    var isFirefox = typeof window.InstallTrigger !== 'undefined';\n\n    if (isFirefox) {\n        return true;\n    }\n\n    var nVer = navigator.appVersion;\n    var nAgt = navigator.userAgent;\n    var fullVersion = '' + parseFloat(navigator.appVersion);\n    var majorVersion = parseInt(navigator.appVersion, 10);\n    var nameOffset, verOffset, ix;\n\n    if (isChrome || isOpera) {\n        verOffset = nAgt.indexOf('Chrome');\n        fullVersion = nAgt.substring(verOffset + 7);\n    }\n\n    // trim the fullVersion string at semicolon/space if present\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\n        fullVersion = fullVersion.substring(0, ix);\n    }\n\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\n        fullVersion = fullVersion.substring(0, ix);\n    }\n\n    majorVersion = parseInt('' + fullVersion, 10);\n\n    if (isNaN(majorVersion)) {\n        fullVersion = '' + parseFloat(navigator.appVersion);\n        majorVersion = parseInt(navigator.appVersion, 10);\n    }\n\n    return majorVersion >= 49;\n}\n\n// ______________________\n// MediaStreamRecorder.js\n\n/**\n * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.\n * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link https://github.com/muaz-khan|Muaz Khan}\n * @typedef MediaStreamRecorder\n * @class\n * @example\n * var config = {\n *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis\n *     audioBitsPerSecond : 256 * 8 * 1024,\n *     videoBitsPerSecond : 256 * 8 * 1024,\n *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\n *     checkForInactiveTracks: true,\n *     timeSlice: 1000, // concatenate intervals based blobs\n *     ignoreMutedMedia: true\n * }\n * var recorder = new MediaStreamRecorder(mediaStream, config);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n *\n *     // or\n *     var blob = recorder.blob;\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", timeSlice: 1000}\n * @throws Will throw an error if first argument \"MediaStream\" is missing. Also throws error if \"MediaRecorder API\" are not supported by the browser.\n */\n\nfunction MediaStreamRecorder(mediaStream, config) {\n    var self = this;\n\n    if (typeof mediaStream === 'undefined') {\n        throw 'First argument \"MediaStream\" is required.';\n    }\n\n    if (typeof MediaRecorder === 'undefined') {\n        throw 'Your browser does not supports Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.';\n    }\n\n    config = config || {\n        // bitsPerSecond: 256 * 8 * 1024,\n        mimeType: 'video/webm'\n    };\n\n    if (config.type === 'audio') {\n        if (mediaStream.getVideoTracks().length && mediaStream.getAudioTracks().length) {\n            var stream;\n            if (!!navigator.mozGetUserMedia) {\n                stream = new MediaStream();\n                stream.addTrack(mediaStream.getAudioTracks()[0]);\n            } else {\n                // webkitMediaStream\n                stream = new MediaStream(mediaStream.getAudioTracks());\n            }\n            mediaStream = stream;\n        }\n\n        if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\n            config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\n        }\n\n        if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\n            // forcing better codecs on Firefox (via #166)\n            config.mimeType = 'audio/ogg';\n        }\n    }\n\n    var arrayOfBlobs = [];\n\n    /**\n     * This method returns array of blobs. Use only with \"timeSlice\". Its useful to preview recording anytime, without using the \"stop\" method.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * var arrayOfBlobs = recorder.getArrayOfBlobs();\n     * @returns {Array} Returns array of recorded blobs.\n     */\n    this.getArrayOfBlobs = function () {\n        return arrayOfBlobs;\n    };\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function () {\n        // set defaults\n        self.blob = null;\n        self.clearRecordedData();\n        self.timestamps = [];\n        allStates = [];\n        arrayOfBlobs = [];\n\n        var recorderHints = config;\n\n        if (!config.disableLogs) {\n            console.log('Passing following config over MediaRecorder API.', recorderHints);\n        }\n\n        if (mediaRecorder) {\n            // mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.\n            mediaRecorder = null;\n        }\n\n        if (isChrome && !isMediaRecorderCompatible()) {\n            // to support video-only recording on stable\n            recorderHints = 'video/vp8';\n        }\n\n        if (typeof MediaRecorder.isTypeSupported === 'function' && recorderHints.mimeType) {\n            if (!MediaRecorder.isTypeSupported(recorderHints.mimeType)) {\n                if (!config.disableLogs) {\n                    console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n                }\n\n                recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\n            }\n        }\n\n        // using MediaRecorder API here\n        try {\n            mediaRecorder = new MediaRecorder(mediaStream, recorderHints);\n\n            // reset\n            config.mimeType = recorderHints.mimeType;\n        } catch (e) {\n            // chrome-based fallback\n            mediaRecorder = new MediaRecorder(mediaStream);\n        }\n\n        // old hack?\n        if (recorderHints.mimeType && !MediaRecorder.isTypeSupported && 'canRecordMimeType' in mediaRecorder && mediaRecorder.canRecordMimeType(recorderHints.mimeType) === false) {\n            if (!config.disableLogs) {\n                console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n            }\n        }\n\n        // ignore muted/disabled/inactive tracks\n        mediaRecorder.ignoreMutedMedia = config.ignoreMutedMedia === true;\n\n        // Dispatching OnDataAvailable Handler\n        mediaRecorder.ondataavailable = function (e) {\n            if (e.data) {\n                allStates.push('ondataavailable: ' + bytesToSize(e.data.size));\n            }\n\n            if (typeof config.timeSlice === 'number') {\n                if (e.data && e.data.size && e.data.size > 100) {\n                    arrayOfBlobs.push(e.data);\n                    updateTimeStamp();\n                }\n                return;\n            }\n\n            if (!e.data || !e.data.size || e.data.size < 100 || self.blob) {\n                // make sure that stopRecording always getting fired\n                // even if there is invalid data\n                if (self.recordingCallback) {\n                    self.recordingCallback(new Blob([], {\n                        type: mediaRecorder.mimeType || recorderHints.mimeType || 'video/webm'\n                    }));\n                    self.recordingCallback = null;\n                }\n                return;\n            }\n\n            self.blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n                type: mediaRecorder.mimeType || recorderHints.mimeType || 'video/webm'\n            });\n\n            if (self.recordingCallback) {\n                self.recordingCallback(self.blob);\n                self.recordingCallback = null;\n            }\n        };\n\n        mediaRecorder.onstart = function () {\n            allStates.push('started');\n        };\n\n        mediaRecorder.onpause = function () {\n            allStates.push('paused');\n        };\n\n        mediaRecorder.onresume = function () {\n            allStates.push('resumed');\n        };\n\n        mediaRecorder.onstop = function () {\n            allStates.push('stopped');\n        };\n\n        mediaRecorder.onerror = function (error) {\n            allStates.push('error: ' + error);\n\n            if (!config.disableLogs) {\n                // via: https://w3c.github.io/mediacapture-record/MediaRecorder.html#exception-summary\n                if (error.name.toString().toLowerCase().indexOf('invalidstate') !== -1) {\n                    console.error('The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.', error);\n                } else if (error.name.toString().toLowerCase().indexOf('notsupported') !== -1) {\n                    console.error('MIME type (', recorderHints.mimeType, ') is not supported.', error);\n                } else if (error.name.toString().toLowerCase().indexOf('security') !== -1) {\n                    console.error('MediaRecorder security error', error);\n                }\n\n                // older code below\n                else if (error.name === 'OutOfMemory') {\n                        console.error('The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                    } else if (error.name === 'IllegalStreamModification') {\n                        console.error('A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                    } else if (error.name === 'OtherRecordingError') {\n                        console.error('Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                    } else if (error.name === 'GenericError') {\n                        console.error('The UA cannot provide the codec or recording option that has been requested.', error);\n                    } else {\n                        console.error('MediaRecorder Error', error);\n                    }\n            }\n\n            (function (looper) {\n                if (!self.manuallyStopped && mediaRecorder && mediaRecorder.state === 'inactive') {\n                    delete config.timeslice;\n\n                    // 10 minutes, enough?\n                    mediaRecorder.start(10 * 60 * 1000);\n                    return;\n                }\n\n                setTimeout(looper, 1000);\n            })();\n\n            if (mediaRecorder.state !== 'inactive' && mediaRecorder.state !== 'stopped') {\n                mediaRecorder.stop();\n            }\n        };\n\n        if (typeof config.timeSlice === 'number') {\n            updateTimeStamp();\n            mediaRecorder.start(config.timeSlice);\n        } else {\n            // default is 60 minutes; enough?\n            // use config => {timeSlice: 1000} otherwise\n\n            mediaRecorder.start(3.6e+6);\n        }\n\n        if (config.initCallback) {\n            config.initCallback(); // old code\n        }\n    };\n\n    /**\n     * @property {Array} timestamps - Array of time stamps\n     * @memberof MediaStreamRecorder\n     * @example\n     * console.log(recorder.timestamps);\n     */\n    this.timestamps = [];\n\n    function updateTimeStamp() {\n        self.timestamps.push(new Date().getTime());\n\n        if (typeof config.onTimeStamp === 'function') {\n            config.onTimeStamp(self.timestamps[self.timestamps.length - 1], self.timestamps);\n        }\n    }\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function (callback) {\n        self.manuallyStopped = true; // used inside the mediaRecorder.onerror\n\n        if (!mediaRecorder) {\n            return;\n        }\n\n        this.recordingCallback = function (blob) {\n            if (callback) {\n                callback(blob);\n            }\n        };\n\n        if (mediaRecorder.state === 'recording') {\n            mediaRecorder.stop();\n        }\n\n        if (typeof config.timeSlice === 'number') {\n            setTimeout(function () {\n                self.blob = new Blob(arrayOfBlobs, {\n                    type: mediaRecorder.mimeType || config.mimeType || 'video/webm'\n                });\n\n                self.recordingCallback(self.blob);\n            }, 100);\n        }\n    };\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function () {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        if (mediaRecorder.state === 'recording') {\n            mediaRecorder.pause();\n        }\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function () {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        if (mediaRecorder.state === 'paused') {\n            mediaRecorder.resume();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function () {\n        arrayOfBlobs = [];\n        mediaRecorder = null;\n        self.timestamps = [];\n    };\n\n    // Reference to \"MediaRecorder\" object\n    var mediaRecorder;\n\n    /**\n     * Access to native MediaRecorder API\n     * @method\n     * @memberof MediaStreamRecorder\n     * @instance\n     * @example\n     * var internal = recorder.getInternalRecorder();\n     * internal.ondataavailable = function() {}; // override\n     * internal.stream, internal.onpause, internal.onstop, etc.\n     * @returns {Object} Returns internal recording object.\n     */\n    this.getInternalRecorder = function () {\n        return mediaRecorder;\n    };\n\n    function isMediaStreamActive() {\n        if ('active' in mediaStream) {\n            if (!mediaStream.active) {\n                return false;\n            }\n        } else if ('ended' in mediaStream) {\n            // old hack\n            if (mediaStream.ended) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.stop(function() {\n     *     var blob = recorder.blob;\n     * });\n     */\n    this.blob = null;\n\n    /**\n     * Get MediaRecorder readonly state.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * var state = recorder.getState();\n     * @returns {String} Returns recording state.\n     */\n    this.getState = function () {\n        if (!mediaRecorder) {\n            return 'inactive';\n        }\n\n        return mediaRecorder.state || 'inactive';\n    };\n\n    // list of all recording states\n    var allStates = [];\n\n    /**\n     * Get MediaRecorder all recording states.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * var state = recorder.getAllStates();\n     * @returns {Array} Returns all recording states\n     */\n    this.getAllStates = function () {\n        return allStates;\n    };\n\n    // if any Track within the MediaStream is muted or not enabled at any time, \n    // the browser will only record black frames \n    // or silence since that is the content produced by the Track\n    // so we need to stopRecording as soon as any single track ends.\n    if (typeof config.checkForInactiveTracks === 'undefined') {\n        config.checkForInactiveTracks = false; // disable to minimize CPU usage\n    }\n\n    var self = this;\n\n    // this method checks if media stream is stopped\n    // or if any track is ended.\n    (function looper() {\n        if (!mediaRecorder || config.checkForInactiveTracks === false) {\n            return;\n        }\n\n        if (isMediaStreamActive() === false) {\n            if (!config.disableLogs) {\n                console.log('MediaStream seems stopped.');\n            }\n            self.stop();\n            return;\n        }\n\n        setTimeout(looper, 1000); // check every second\n    })();\n\n    // for debugging\n    this.name = 'MediaStreamRecorder';\n    this.toString = function () {\n        return this.name;\n    };\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.MediaStreamRecorder = MediaStreamRecorder;\n}\n\n// source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\n// https://github.com/mattdiamond/Recorderjs#license-mit\n// ______________________\n// StereoAudioRecorder.js\n\n/**\n * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\n * @summary JavaScript standalone object for stereo audio recording.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef StereoAudioRecorder\n * @class\n * @example\n * var recorder = new StereoAudioRecorder(MediaStream, {\n *     sampleRate: 44100,\n *     bufferSize: 4096\n * });\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\n */\n\nfunction StereoAudioRecorder(mediaStream, config) {\n    if (!mediaStream.getAudioTracks().length) {\n        throw 'Your stream has no audio tracks.';\n    }\n\n    config = config || {};\n\n    var self = this;\n\n    // variables\n    var leftchannel = [];\n    var rightchannel = [];\n    var recording = false;\n    var recordingLength = 0;\n    var jsAudioNode;\n\n    var numberOfAudioChannels = 2;\n\n    /**\n     * Set sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\n     * @property {number} desiredSampRate - Desired Bits per sample * 1000\n     * @memberof StereoAudioRecorder\n     * @instance\n     * @example\n     * var recorder = StereoAudioRecorder(mediaStream, {\n     *   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\n     * });\n     */\n    var desiredSampRate = config.desiredSampRate;\n\n    // backward compatibility\n    if (config.leftChannel === true) {\n        numberOfAudioChannels = 1;\n    }\n\n    if (config.numberOfAudioChannels === 1) {\n        numberOfAudioChannels = 1;\n    }\n\n    if (!config.disableLogs) {\n        console.log('StereoAudioRecorder is set to record number of channels: ', numberOfAudioChannels);\n    }\n\n    // if any Track within the MediaStream is muted or not enabled at any time, \n    // the browser will only record black frames \n    // or silence since that is the content produced by the Track\n    // so we need to stopRecording as soon as any single track ends.\n    if (typeof config.checkForInactiveTracks === 'undefined') {\n        config.checkForInactiveTracks = true;\n    }\n\n    function isMediaStreamActive() {\n        if (config.checkForInactiveTracks === false) {\n            // always return \"true\"\n            return true;\n        }\n\n        if ('active' in mediaStream) {\n            if (!mediaStream.active) {\n                return false;\n            }\n        } else if ('ended' in mediaStream) {\n            // old hack\n            if (mediaStream.ended) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function () {\n        if (isMediaStreamActive() === false) {\n            throw 'Please make sure MediaStream is active.';\n        }\n\n        // reset the buffers for the new recording\n        leftchannel.length = rightchannel.length = 0;\n        recordingLength = 0;\n\n        if (audioInput) {\n            audioInput.connect(jsAudioNode);\n        }\n\n        // to prevent self audio to be connected with speakers\n        // jsAudioNode.connect(context.destination);\n\n        isAudioProcessStarted = isPaused = false;\n        recording = true;\n    };\n\n    function mergeLeftRightBuffers(config, callback) {\n        function mergeAudioBuffers(config, cb) {\n            var numberOfAudioChannels = config.numberOfAudioChannels;\n\n            // todo: \"slice(0)\" --- is it causes loop? Should be removed?\n            var leftBuffers = config.leftBuffers.slice(0);\n            var rightBuffers = config.rightBuffers.slice(0);\n            var sampleRate = config.sampleRate;\n            var internalInterleavedLength = config.internalInterleavedLength;\n            var desiredSampRate = config.desiredSampRate;\n\n            if (numberOfAudioChannels === 2) {\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n                rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\n                if (desiredSampRate) {\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\n                    rightBuffers = interpolateArray(rightBuffers, desiredSampRate, sampleRate);\n                }\n            }\n\n            if (numberOfAudioChannels === 1) {\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n                if (desiredSampRate) {\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\n                }\n            }\n\n            // set sample rate as desired sample rate\n            if (desiredSampRate) {\n                sampleRate = desiredSampRate;\n            }\n\n            // for changing the sampling rate, reference:\n            // http://stackoverflow.com/a/28977136/552182\n            function interpolateArray(data, newSampleRate, oldSampleRate) {\n                var fitCount = Math.round(data.length * (newSampleRate / oldSampleRate));\n                //var newData = new Array();\n                var newData = [];\n                //var springFactor = new Number((data.length - 1) / (fitCount - 1));\n                var springFactor = Number((data.length - 1) / (fitCount - 1));\n                newData[0] = data[0]; // for new allocation\n                for (var i = 1; i < fitCount - 1; i++) {\n                    var tmp = i * springFactor;\n                    //var before = new Number(Math.floor(tmp)).toFixed();\n                    //var after = new Number(Math.ceil(tmp)).toFixed();\n                    var before = Number(Math.floor(tmp)).toFixed();\n                    var after = Number(Math.ceil(tmp)).toFixed();\n                    var atPoint = tmp - before;\n                    newData[i] = linearInterpolate(data[before], data[after], atPoint);\n                }\n                newData[fitCount - 1] = data[data.length - 1]; // for new allocation\n                return newData;\n            }\n\n            function linearInterpolate(before, after, atPoint) {\n                return before + (after - before) * atPoint;\n            }\n\n            function mergeBuffers(channelBuffer, rLength) {\n                var result = new Float64Array(rLength);\n                var offset = 0;\n                var lng = channelBuffer.length;\n\n                for (var i = 0; i < lng; i++) {\n                    var buffer = channelBuffer[i];\n                    result.set(buffer, offset);\n                    offset += buffer.length;\n                }\n\n                return result;\n            }\n\n            function interleave(leftChannel, rightChannel) {\n                var length = leftChannel.length + rightChannel.length;\n\n                var result = new Float64Array(length);\n\n                var inputIndex = 0;\n\n                for (var index = 0; index < length;) {\n                    result[index++] = leftChannel[inputIndex];\n                    result[index++] = rightChannel[inputIndex];\n                    inputIndex++;\n                }\n                return result;\n            }\n\n            function writeUTFBytes(view, offset, string) {\n                var lng = string.length;\n                for (var i = 0; i < lng; i++) {\n                    view.setUint8(offset + i, string.charCodeAt(i));\n                }\n            }\n\n            // interleave both channels together\n            var interleaved;\n\n            if (numberOfAudioChannels === 2) {\n                interleaved = interleave(leftBuffers, rightBuffers);\n            }\n\n            if (numberOfAudioChannels === 1) {\n                interleaved = leftBuffers;\n            }\n\n            var interleavedLength = interleaved.length;\n\n            // create wav file\n            var resultingBufferLength = 44 + interleavedLength * 2;\n\n            var buffer = new ArrayBuffer(resultingBufferLength);\n\n            var view = new DataView(buffer);\n\n            // RIFF chunk descriptor/identifier \n            writeUTFBytes(view, 0, 'RIFF');\n\n            // RIFF chunk length\n            view.setUint32(4, 44 + interleavedLength * 2, true);\n\n            // RIFF type \n            writeUTFBytes(view, 8, 'WAVE');\n\n            // format chunk identifier \n            // FMT sub-chunk\n            writeUTFBytes(view, 12, 'fmt ');\n\n            // format chunk length \n            view.setUint32(16, 16, true);\n\n            // sample format (raw)\n            view.setUint16(20, 1, true);\n\n            // stereo (2 channels)\n            view.setUint16(22, numberOfAudioChannels, true);\n\n            // sample rate \n            view.setUint32(24, sampleRate, true);\n\n            // byte rate (sample rate * block align)\n            view.setUint32(28, sampleRate * 2, true);\n\n            // block align (channel count * bytes per sample) \n            view.setUint16(32, numberOfAudioChannels * 2, true);\n\n            // bits per sample \n            view.setUint16(34, 16, true);\n\n            // data sub-chunk\n            // data chunk identifier \n            writeUTFBytes(view, 36, 'data');\n\n            // data chunk length \n            view.setUint32(40, interleavedLength * 2, true);\n\n            // write the PCM samples\n            var lng = interleavedLength;\n            var index = 44;\n            var volume = 1;\n            for (var i = 0; i < lng; i++) {\n                view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\n                index += 2;\n            }\n\n            if (cb) {\n                return cb({\n                    buffer: buffer,\n                    view: view\n                });\n            }\n\n            postMessage({\n                buffer: buffer,\n                view: view\n            });\n        }\n\n        if (!isChrome) {\n            // its Microsoft Edge\n            mergeAudioBuffers(config, function (data) {\n                callback(data.buffer, data.view);\n            });\n            return;\n        }\n\n        var webWorker = processInWebWorker(mergeAudioBuffers);\n\n        webWorker.onmessage = function (event) {\n            callback(event.data.buffer, event.data.view);\n\n            // release memory\n            URL.revokeObjectURL(webWorker.workerURL);\n        };\n\n        webWorker.postMessage(config);\n    }\n\n    function processInWebWorker(_function) {\n        var workerURL = URL.createObjectURL(new Blob([_function.toString(), ';this.onmessage =  function (e) {' + _function.name + '(e.data);}'], {\n            type: 'application/javascript'\n        }));\n\n        var worker = new Worker(workerURL);\n        worker.workerURL = workerURL;\n        return worker;\n    }\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function (callback) {\n        // stop recording\n        recording = false;\n\n        // to make sure onaudioprocess stops firing\n        // audioInput.disconnect();\n\n        mergeLeftRightBuffers({\n            desiredSampRate: desiredSampRate,\n            sampleRate: sampleRate,\n            numberOfAudioChannels: numberOfAudioChannels,\n            internalInterleavedLength: recordingLength,\n            leftBuffers: leftchannel,\n            rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel\n        }, function (buffer, view) {\n            /**\n             * @property {Blob} blob - The recorded blob object.\n             * @memberof StereoAudioRecorder\n             * @example\n             * recorder.stop(function(){\n             *     var blob = recorder.blob;\n             * });\n             */\n            self.blob = new Blob([view], {\n                type: 'audio/wav'\n            });\n\n            /**\n             * @property {ArrayBuffer} buffer - The recorded buffer object.\n             * @memberof StereoAudioRecorder\n             * @example\n             * recorder.stop(function(){\n             *     var buffer = recorder.buffer;\n             * });\n             */\n            self.buffer = new ArrayBuffer(view.buffer.byteLength);\n\n            /**\n             * @property {DataView} view - The recorded data-view object.\n             * @memberof StereoAudioRecorder\n             * @example\n             * recorder.stop(function(){\n             *     var view = recorder.view;\n             * });\n             */\n            self.view = view;\n\n            self.sampleRate = desiredSampRate || sampleRate;\n            self.bufferSize = bufferSize;\n\n            // recorded audio length\n            self.length = recordingLength;\n\n            if (callback) {\n                callback(self.blob);\n            }\n\n            isAudioProcessStarted = false;\n        });\n    };\n\n    if (!Storage.AudioContextConstructor) {\n        Storage.AudioContextConstructor = new Storage.AudioContext();\n    }\n\n    var context = Storage.AudioContextConstructor;\n\n    // creates an audio node from the microphone incoming stream\n    var audioInput = context.createMediaStreamSource(mediaStream);\n\n    var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\n\n    /**\n     * From the spec: This value controls how frequently the audioprocess event is\n     * dispatched and how many sample-frames need to be processed each call.\n     * Lower values for buffer size will result in a lower (better) latency.\n     * Higher values will be necessary to avoid audio breakup and glitches\n     * The size of the buffer (in sample-frames) which needs to\n     * be processed each time onprocessaudio is called.\n     * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\n     * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder = new StereoAudioRecorder(mediaStream, {\n     *     bufferSize: 4096\n     * });\n     */\n\n    // \"0\" means, let chrome decide the most accurate buffer-size for current platform.\n    var bufferSize = typeof config.bufferSize === 'undefined' ? 4096 : config.bufferSize;\n\n    if (legalBufferValues.indexOf(bufferSize) === -1) {\n        if (!config.disableLogs) {\n            console.warn('Legal values for buffer-size are ' + JSON.stringify(legalBufferValues, null, '\\t'));\n        }\n    }\n\n    if (context.createJavaScriptNode) {\n        jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n    } else if (context.createScriptProcessor) {\n        jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n    } else {\n        throw 'WebAudio API has no support on this browser.';\n    }\n\n    // connect the stream to the gain node\n    audioInput.connect(jsAudioNode);\n\n    if (!config.bufferSize) {\n        bufferSize = jsAudioNode.bufferSize; // device buffer-size\n    }\n\n    /**\n     * The sample rate (in sample-frames per second) at which the\n     * AudioContext handles audio. It is assumed that all AudioNodes\n     * in the context run at this rate. In making this assumption,\n     * sample-rate converters or \"varispeed\" processors are not supported\n     * in real-time processing.\n     * The sampleRate parameter describes the sample-rate of the\n     * linear PCM audio data in the buffer in sample-frames per second.\n     * An implementation must support sample-rates in at least\n     * the range 22050 to 96000.\n     * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder = new StereoAudioRecorder(mediaStream, {\n     *     sampleRate: 44100\n     * });\n     */\n    var sampleRate = typeof config.sampleRate !== 'undefined' ? config.sampleRate : context.sampleRate || 44100;\n\n    if (sampleRate < 22050 || sampleRate > 96000) {\n        // Ref: http://stackoverflow.com/a/26303918/552182\n        if (!config.disableLogs) {\n            console.warn('sample-rate must be under range 22050 and 96000.');\n        }\n    }\n\n    if (!config.disableLogs) {\n        console.log('sample-rate', sampleRate);\n        console.log('buffer-size', bufferSize);\n\n        if (config.desiredSampRate) {\n            console.log('Desired sample-rate', config.desiredSampRate);\n        }\n    }\n\n    var isPaused = false;\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function () {\n        isPaused = true;\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function () {\n        if (isMediaStreamActive() === false) {\n            throw 'Please make sure MediaStream is active.';\n        }\n\n        if (!recording) {\n            if (!config.disableLogs) {\n                console.log('Seems recording has been restarted.');\n            }\n            this.record();\n            return;\n        }\n\n        isPaused = false;\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function () {\n        this.pause();\n\n        leftchannel.length = rightchannel.length = 0;\n        recordingLength = 0;\n    };\n\n    // for debugging\n    this.name = 'StereoAudioRecorder';\n    this.toString = function () {\n        return this.name;\n    };\n\n    var isAudioProcessStarted = false;\n\n    function onAudioProcessDataAvailable(e) {\n        if (isPaused) {\n            return;\n        }\n\n        if (isMediaStreamActive() === false) {\n            if (!config.disableLogs) {\n                console.log('MediaStream seems stopped.');\n            }\n            jsAudioNode.disconnect();\n            recording = false;\n        }\n\n        if (!recording) {\n            audioInput.disconnect();\n            return;\n        }\n\n        /**\n         * This method is called on \"onaudioprocess\" event's first invocation.\n         * @method {function} onAudioProcessStarted\n         * @memberof StereoAudioRecorder\n         * @example\n         * recorder.onAudioProcessStarted: function() { };\n         */\n        if (!isAudioProcessStarted) {\n            isAudioProcessStarted = true;\n            if (config.onAudioProcessStarted) {\n                config.onAudioProcessStarted();\n            }\n\n            if (config.initCallback) {\n                config.initCallback();\n            }\n        }\n\n        var left = e.inputBuffer.getChannelData(0);\n\n        // we clone the samples\n        leftchannel.push(new Float32Array(left));\n\n        if (numberOfAudioChannels === 2) {\n            var right = e.inputBuffer.getChannelData(1);\n            rightchannel.push(new Float32Array(right));\n        }\n\n        recordingLength += bufferSize;\n\n        // export raw PCM\n        self.recordingLength = recordingLength;\n    }\n\n    jsAudioNode.onaudioprocess = onAudioProcessDataAvailable;\n\n    // to prevent self audio to be connected with speakers\n    jsAudioNode.connect(context.destination);\n\n    // export raw PCM\n    this.leftchannel = leftchannel;\n    this.rightchannel = rightchannel;\n    this.numberOfAudioChannels = numberOfAudioChannels;\n    this.desiredSampRate = desiredSampRate;\n    this.sampleRate = sampleRate;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\n}\n\n// _________________\n// CanvasRecorder.js\n\n/**\n * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.\n * @summary HTML2Canvas recording into video WebM.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef CanvasRecorder\n * @class\n * @example\n * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true });\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.\n * @param {object} config - {disableLogs:true, initCallback: function}\n */\n\nfunction CanvasRecorder(htmlElement, config) {\n    if (typeof html2canvas === 'undefined' && htmlElement.nodeName.toLowerCase() !== 'canvas') {\n        throw 'Please link: https://cdn.webrtc-experiment.com/screenshot.js';\n    }\n\n    config = config || {};\n    if (!config.frameInterval) {\n        config.frameInterval = 10;\n    }\n\n    // via DetectRTC.js\n    var isCanvasSupportsStreamCapturing = false;\n    ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function (item) {\n        if (item in document.createElement('canvas')) {\n            isCanvasSupportsStreamCapturing = true;\n        }\n    });\n\n    var _isChrome = (!!window.webkitRTCPeerConnection || !!window.webkitGetUserMedia) && !!window.chrome;\n\n    var chromeVersion = 50;\n    var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n    if (_isChrome && matchArray && matchArray[2]) {\n        chromeVersion = parseInt(matchArray[2], 10);\n    }\n\n    if (_isChrome && chromeVersion < 52) {\n        isCanvasSupportsStreamCapturing = false;\n    }\n\n    var globalCanvas, mediaStreamRecorder;\n\n    if (isCanvasSupportsStreamCapturing) {\n        if (!config.disableLogs) {\n            console.log('Your browser supports both MediRecorder API and canvas.captureStream!');\n        }\n\n        if (htmlElement instanceof HTMLCanvasElement) {\n            globalCanvas = htmlElement;\n        } else if (htmlElement instanceof CanvasRenderingContext2D) {\n            globalCanvas = htmlElement.canvas;\n        } else {\n            throw 'Please pass either HTMLCanvasElement or CanvasRenderingContext2D.';\n        }\n    } else if (!!navigator.mozGetUserMedia) {\n        if (!config.disableLogs) {\n            console.error('Canvas recording is NOT supported in Firefox.');\n        }\n    }\n\n    var isRecording;\n\n    /**\n     * This method records Canvas.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function () {\n        isRecording = true;\n\n        if (isCanvasSupportsStreamCapturing) {\n            // CanvasCaptureMediaStream\n            var canvasMediaStream;\n            if ('captureStream' in globalCanvas) {\n                canvasMediaStream = globalCanvas.captureStream(25); // 25 FPS\n            } else if ('mozCaptureStream' in globalCanvas) {\n                canvasMediaStream = globalCanvas.mozCaptureStream(25);\n            } else if ('webkitCaptureStream' in globalCanvas) {\n                canvasMediaStream = globalCanvas.webkitCaptureStream(25);\n            }\n\n            try {\n                var mdStream = new MediaStream();\n                mdStream.addTrack(canvasMediaStream.getVideoTracks()[0]);\n                canvasMediaStream = mdStream;\n            } catch (e) {}\n\n            if (!canvasMediaStream) {\n                throw 'captureStream API are NOT available.';\n            }\n\n            // Note: Jan 18, 2016 status is that, \n            // Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.\n            mediaStreamRecorder = new MediaStreamRecorder(canvasMediaStream, {\n                mimeType: 'video/webm'\n            });\n            mediaStreamRecorder.record();\n        } else {\n            whammy.frames = [];\n            lastTime = new Date().getTime();\n            drawCanvasFrame();\n        }\n\n        if (config.initCallback) {\n            config.initCallback();\n        }\n    };\n\n    this.getWebPImages = function (callback) {\n        if (htmlElement.nodeName.toLowerCase() !== 'canvas') {\n            callback();\n            return;\n        }\n\n        var framesLength = whammy.frames.length;\n        whammy.frames.forEach(function (frame, idx) {\n            var framesRemaining = framesLength - idx;\n            if (!config.disableLogs) {\n                console.log(framesRemaining + '/' + framesLength + ' frames remaining');\n            }\n\n            if (config.onEncodingCallback) {\n                config.onEncodingCallback(framesRemaining, framesLength);\n            }\n\n            var webp = frame.image.toDataURL('image/webp', 1);\n            whammy.frames[idx].image = webp;\n        });\n\n        if (!config.disableLogs) {\n            console.log('Generating WebM');\n        }\n\n        callback();\n    };\n\n    /**\n     * This method stops recording Canvas.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function (callback) {\n        isRecording = false;\n\n        var that = this;\n\n        if (isCanvasSupportsStreamCapturing && mediaStreamRecorder) {\n            mediaStreamRecorder.stop(callback);\n            return;\n        }\n\n        this.getWebPImages(function () {\n            /**\n             * @property {Blob} blob - Recorded frames in video/webm blob.\n             * @memberof CanvasRecorder\n             * @example\n             * recorder.stop(function() {\n             *     var blob = recorder.blob;\n             * });\n             */\n            whammy.compile(function (blob) {\n                if (!config.disableLogs) {\n                    console.log('Recording finished!');\n                }\n\n                that.blob = blob;\n\n                if (that.blob.forEach) {\n                    that.blob = new Blob([], {\n                        type: 'video/webm'\n                    });\n                }\n\n                if (callback) {\n                    callback(that.blob);\n                }\n\n                whammy.frames = [];\n            });\n        });\n    };\n\n    var isPausedRecording = false;\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function () {\n        isPausedRecording = true;\n\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\n            mediaStreamRecorder.pause();\n            return;\n        }\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function () {\n        isPausedRecording = false;\n\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\n            mediaStreamRecorder.resume();\n            return;\n        }\n\n        if (!isRecording) {\n            this.record();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function () {\n        this.pause();\n        whammy.frames = [];\n    };\n\n    // for debugging\n    this.name = 'CanvasRecorder';\n    this.toString = function () {\n        return this.name;\n    };\n\n    function cloneCanvas() {\n        //create a new canvas\n        var newCanvas = document.createElement('canvas');\n        var context = newCanvas.getContext('2d');\n\n        //set dimensions\n        newCanvas.width = htmlElement.width;\n        newCanvas.height = htmlElement.height;\n\n        //apply the old canvas to the new one\n        context.drawImage(htmlElement, 0, 0);\n\n        //return the new canvas\n        return newCanvas;\n    }\n\n    function drawCanvasFrame() {\n        if (isPausedRecording) {\n            lastTime = new Date().getTime();\n            return setTimeout(drawCanvasFrame, 500);\n        }\n\n        if (htmlElement.nodeName.toLowerCase() === 'canvas') {\n            var duration = new Date().getTime() - lastTime;\n            // via #206, by Jack i.e. @Seymourr\n            lastTime = new Date().getTime();\n\n            whammy.frames.push({\n                image: cloneCanvas(),\n                duration: duration\n            });\n\n            if (isRecording) {\n                setTimeout(drawCanvasFrame, config.frameInterval);\n            }\n            return;\n        }\n\n        html2canvas(htmlElement, {\n            grabMouse: typeof config.showMousePointer === 'undefined' || config.showMousePointer,\n            onrendered: function onrendered(canvas) {\n                var duration = new Date().getTime() - lastTime;\n                if (!duration) {\n                    return setTimeout(drawCanvasFrame, config.frameInterval);\n                }\n\n                // via #206, by Jack i.e. @Seymourr\n                lastTime = new Date().getTime();\n\n                whammy.frames.push({\n                    image: canvas.toDataURL('image/webp', 1),\n                    duration: duration\n                });\n\n                if (isRecording) {\n                    setTimeout(drawCanvasFrame, config.frameInterval);\n                }\n            }\n        });\n    }\n\n    var lastTime = new Date().getTime();\n\n    var whammy = new Whammy.Video(100);\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.CanvasRecorder = CanvasRecorder;\n}\n\n// _________________\n// WhammyRecorder.js\n\n/**\n * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.\n * @summary Video recording feature in Chrome.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef WhammyRecorder\n * @class\n * @example\n * var recorder = new WhammyRecorder(mediaStream);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\n */\n\nfunction WhammyRecorder(mediaStream, config) {\n\n    config = config || {};\n\n    if (!config.frameInterval) {\n        config.frameInterval = 10;\n    }\n\n    if (!config.disableLogs) {\n        console.log('Using frames-interval:', config.frameInterval);\n    }\n\n    /**\n     * This method records video.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function () {\n        if (!config.width) {\n            config.width = 320;\n        }\n\n        if (!config.height) {\n            config.height = 240;\n        }\n\n        if (!config.video) {\n            config.video = {\n                width: config.width,\n                height: config.height\n            };\n        }\n\n        if (!config.canvas) {\n            config.canvas = {\n                width: config.width,\n                height: config.height\n            };\n        }\n\n        canvas.width = config.canvas.width || 320;\n        canvas.height = config.canvas.height || 240;\n\n        context = canvas.getContext('2d');\n\n        // setting defaults\n        if (config.video && config.video instanceof HTMLVideoElement) {\n            video = config.video.cloneNode();\n\n            if (config.initCallback) {\n                config.initCallback();\n            }\n        } else {\n            video = document.createElement('video');\n\n            if (typeof video.srcObject !== 'undefined') {\n                video.srcObject = mediaStream;\n            } else {\n                video.src = URL.createObjectURL(mediaStream);\n            }\n\n            video.onloadedmetadata = function () {\n                // \"onloadedmetadata\" may NOT work in FF?\n                if (config.initCallback) {\n                    config.initCallback();\n                }\n            };\n\n            video.width = config.video.width;\n            video.height = config.video.height;\n        }\n\n        video.muted = true;\n        video.play();\n\n        lastTime = new Date().getTime();\n        whammy = new Whammy.Video();\n\n        if (!config.disableLogs) {\n            console.log('canvas resolutions', canvas.width, '*', canvas.height);\n            console.log('video width/height', video.width || canvas.width, '*', video.height || canvas.height);\n        }\n\n        drawFrames(config.frameInterval);\n    };\n\n    /**\n     * Draw and push frames to Whammy\n     * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy\n     */\n    function drawFrames(frameInterval) {\n        frameInterval = typeof frameInterval !== 'undefined' ? frameInterval : 10;\n\n        var duration = new Date().getTime() - lastTime;\n        if (!duration) {\n            return setTimeout(drawFrames, frameInterval, frameInterval);\n        }\n\n        if (isPausedRecording) {\n            lastTime = new Date().getTime();\n            return setTimeout(drawFrames, 100);\n        }\n\n        // via #206, by Jack i.e. @Seymourr\n        lastTime = new Date().getTime();\n\n        if (video.paused) {\n            // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n            // Tweak for Android Chrome\n            video.play();\n        }\n\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\n        whammy.frames.push({\n            duration: duration,\n            image: canvas.toDataURL('image/webp')\n        });\n\n        if (!isStopDrawing) {\n            setTimeout(drawFrames, frameInterval, frameInterval);\n        }\n    }\n\n    function asyncLoop(o) {\n        var i = -1,\n            length = o.length;\n\n        (function loop() {\n            i++;\n            if (i === length) {\n                o.callback();\n                return;\n            }\n\n            // \"setTimeout\" added by Jim McLeod\n            setTimeout(function () {\n                o.functionToLoop(loop, i);\n            }, 1);\n        })();\n    }\n\n    /**\n     * remove black frames from the beginning to the specified frame\n     * @param {Array} _frames - array of frames to be checked\n     * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)\n     * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all\n     * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all\n     * @returns {Array} - array of frames\n     */\n    // pull#293 by @volodalexey\n    function dropBlackFrames(_frames, _framesToCheck, _pixTolerance, _frameTolerance, _callback2) {\n        var localCanvas = document.createElement('canvas');\n        localCanvas.width = canvas.width;\n        localCanvas.height = canvas.height;\n        var context2d = localCanvas.getContext('2d');\n        var resultFrames = [];\n\n        var checkUntilNotBlack = _framesToCheck === -1;\n        var endCheckFrame = _framesToCheck && _framesToCheck > 0 && _framesToCheck <= _frames.length ? _framesToCheck : _frames.length;\n        var sampleColor = {\n            r: 0,\n            g: 0,\n            b: 0\n        };\n        var maxColorDifference = Math.sqrt(Math.pow(255, 2) + Math.pow(255, 2) + Math.pow(255, 2));\n        var pixTolerance = _pixTolerance && _pixTolerance >= 0 && _pixTolerance <= 1 ? _pixTolerance : 0;\n        var frameTolerance = _frameTolerance && _frameTolerance >= 0 && _frameTolerance <= 1 ? _frameTolerance : 0;\n        var doNotCheckNext = false;\n\n        asyncLoop({\n            length: endCheckFrame,\n            functionToLoop: function functionToLoop(loop, f) {\n                var matchPixCount, endPixCheck, maxPixCount;\n\n                var finishImage = function finishImage() {\n                    if (!doNotCheckNext && maxPixCount - matchPixCount <= maxPixCount * frameTolerance) {\n                        // console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);\n                    } else {\n                        // console.log('frame is passed : ' + f);\n                        if (checkUntilNotBlack) {\n                            doNotCheckNext = true;\n                        }\n                        resultFrames.push(_frames[f]);\n                    }\n                    loop();\n                };\n\n                if (!doNotCheckNext) {\n                    var image = new Image();\n                    image.onload = function () {\n                        context2d.drawImage(image, 0, 0, canvas.width, canvas.height);\n                        var imageData = context2d.getImageData(0, 0, canvas.width, canvas.height);\n                        matchPixCount = 0;\n                        endPixCheck = imageData.data.length;\n                        maxPixCount = imageData.data.length / 4;\n\n                        for (var pix = 0; pix < endPixCheck; pix += 4) {\n                            var currentColor = {\n                                r: imageData.data[pix],\n                                g: imageData.data[pix + 1],\n                                b: imageData.data[pix + 2]\n                            };\n                            var colorDifference = Math.sqrt(Math.pow(currentColor.r - sampleColor.r, 2) + Math.pow(currentColor.g - sampleColor.g, 2) + Math.pow(currentColor.b - sampleColor.b, 2));\n                            // difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)\n                            if (colorDifference <= maxColorDifference * pixTolerance) {\n                                matchPixCount++;\n                            }\n                        }\n                        finishImage();\n                    };\n                    image.src = _frames[f].image;\n                } else {\n                    finishImage();\n                }\n            },\n            callback: function callback() {\n                resultFrames = resultFrames.concat(_frames.slice(endCheckFrame));\n\n                if (resultFrames.length <= 0) {\n                    // at least one last frame should be available for next manipulation\n                    // if total duration of all frames will be < 1000 than ffmpeg doesn't work well...\n                    resultFrames.push(_frames[_frames.length - 1]);\n                }\n                _callback2(resultFrames);\n            }\n        });\n    }\n\n    var isStopDrawing = false;\n\n    /**\n     * This method stops recording video.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function (callback) {\n        isStopDrawing = true;\n\n        var _this = this;\n        // analyse of all frames takes some time!\n        setTimeout(function () {\n            // e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames\n            // e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames\n            // e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color\n            dropBlackFrames(whammy.frames, -1, null, null, function (frames) {\n                whammy.frames = frames;\n\n                // to display advertisement images!\n                if (config.advertisement && config.advertisement.length) {\n                    whammy.frames = config.advertisement.concat(whammy.frames);\n                }\n\n                /**\n                 * @property {Blob} blob - Recorded frames in video/webm blob.\n                 * @memberof WhammyRecorder\n                 * @example\n                 * recorder.stop(function() {\n                 *     var blob = recorder.blob;\n                 * });\n                 */\n                whammy.compile(function (blob) {\n                    _this.blob = blob;\n\n                    if (_this.blob.forEach) {\n                        _this.blob = new Blob([], {\n                            type: 'video/webm'\n                        });\n                    }\n\n                    if (callback) {\n                        callback(_this.blob);\n                    }\n                });\n            });\n        }, 10);\n    };\n\n    var isPausedRecording = false;\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function () {\n        isPausedRecording = true;\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function () {\n        isPausedRecording = false;\n\n        if (isStopDrawing) {\n            this.record();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function () {\n        this.pause();\n        whammy.frames = [];\n    };\n\n    // for debugging\n    this.name = 'WhammyRecorder';\n    this.toString = function () {\n        return this.name;\n    };\n\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n\n    var video;\n    var lastTime;\n    var whammy;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.WhammyRecorder = WhammyRecorder;\n}\n\n// https://github.com/antimatter15/whammy/blob/master/LICENSE\n// _________\n// Whammy.js\n\n// todo: Firefox now supports webp for webm containers!\n// their MediaRecorder implementation works well!\n// should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?\n\n/**\n * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\n * @summary A real time javascript webm encoder based on a canvas hack.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef Whammy\n * @class\n * @example\n * var recorder = new Whammy().Video(15);\n * recorder.add(context || canvas || dataURL);\n * var output = recorder.compile();\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\nvar Whammy = function () {\n    // a more abstract-ish API\n\n    function WhammyVideo(duration) {\n        this.frames = [];\n        this.duration = duration || 1;\n        this.quality = 0.8;\n    }\n\n    /**\n     * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\n     * @method\n     * @memberof Whammy\n     * @example\n     * recorder = new Whammy().Video(0.8, 100);\n     * recorder.add(canvas || context || 'image/webp');\n     * @param {string} frame - Canvas || Context || image/webp\n     * @param {number} duration - Stick a duration (in milliseconds)\n     */\n    WhammyVideo.prototype.add = function (frame, duration) {\n        if ('canvas' in frame) {\n            //CanvasRenderingContext2D\n            frame = frame.canvas;\n        }\n\n        if ('toDataURL' in frame) {\n            frame = frame.toDataURL('image/webp', this.quality);\n        }\n\n        if (!/^data:image\\/webp;base64,/ig.test(frame)) {\n            throw 'Input must be formatted properly as a base64 encoded DataURI of type image/webp';\n        }\n        this.frames.push({\n            image: frame,\n            duration: duration || this.duration\n        });\n    };\n\n    function processInWebWorker(_function) {\n        var blob = URL.createObjectURL(new Blob([_function.toString(), 'this.onmessage =  function (e) {' + _function.name + '(e.data);}'], {\n            type: 'application/javascript'\n        }));\n\n        var worker = new Worker(blob);\n        URL.revokeObjectURL(blob);\n        return worker;\n    }\n\n    function whammyInWebWorker(frames) {\n        function ArrayToWebM(frames) {\n            var info = checkFrames(frames);\n            if (!info) {\n                return [];\n            }\n\n            var clusterMaxDuration = 30000;\n\n            var EBML = [{\n                'id': 0x1a45dfa3, // EBML\n                'data': [{\n                    'data': 1,\n                    'id': 0x4286 // EBMLVersion\n                }, {\n                    'data': 1,\n                    'id': 0x42f7 // EBMLReadVersion\n                }, {\n                    'data': 4,\n                    'id': 0x42f2 // EBMLMaxIDLength\n                }, {\n                    'data': 8,\n                    'id': 0x42f3 // EBMLMaxSizeLength\n                }, {\n                    'data': 'webm',\n                    'id': 0x4282 // DocType\n                }, {\n                    'data': 2,\n                    'id': 0x4287 // DocTypeVersion\n                }, {\n                    'data': 2,\n                    'id': 0x4285 // DocTypeReadVersion\n                }]\n            }, {\n                'id': 0x18538067, // Segment\n                'data': [{\n                    'id': 0x1549a966, // Info\n                    'data': [{\n                        'data': 1e6, //do things in millisecs (num of nanosecs for duration scale)\n                        'id': 0x2ad7b1 // TimecodeScale\n                    }, {\n                        'data': 'whammy',\n                        'id': 0x4d80 // MuxingApp\n                    }, {\n                        'data': 'whammy',\n                        'id': 0x5741 // WritingApp\n                    }, {\n                        'data': doubleToString(info.duration),\n                        'id': 0x4489 // Duration\n                    }]\n                }, {\n                    'id': 0x1654ae6b, // Tracks\n                    'data': [{\n                        'id': 0xae, // TrackEntry\n                        'data': [{\n                            'data': 1,\n                            'id': 0xd7 // TrackNumber\n                        }, {\n                            'data': 1,\n                            'id': 0x73c5 // TrackUID\n                        }, {\n                            'data': 0,\n                            'id': 0x9c // FlagLacing\n                        }, {\n                            'data': 'und',\n                            'id': 0x22b59c // Language\n                        }, {\n                            'data': 'V_VP8',\n                            'id': 0x86 // CodecID\n                        }, {\n                            'data': 'VP8',\n                            'id': 0x258688 // CodecName\n                        }, {\n                            'data': 1,\n                            'id': 0x83 // TrackType\n                        }, {\n                            'id': 0xe0, // Video\n                            'data': [{\n                                'data': info.width,\n                                'id': 0xb0 // PixelWidth\n                            }, {\n                                'data': info.height,\n                                'id': 0xba // PixelHeight\n                            }]\n                        }]\n                    }]\n                }]\n            }];\n\n            //Generate clusters (max duration)\n            var frameNumber = 0;\n            var clusterTimecode = 0;\n            while (frameNumber < frames.length) {\n\n                var clusterFrames = [];\n                var clusterDuration = 0;\n                do {\n                    clusterFrames.push(frames[frameNumber]);\n                    clusterDuration += frames[frameNumber].duration;\n                    frameNumber++;\n                } while (frameNumber < frames.length && clusterDuration < clusterMaxDuration);\n\n                var clusterCounter = 0;\n                var cluster = {\n                    'id': 0x1f43b675, // Cluster\n                    'data': getClusterData(clusterTimecode, clusterCounter, clusterFrames)\n                }; //Add cluster to segment\n                EBML[1].data.push(cluster);\n                clusterTimecode += clusterDuration;\n            }\n\n            return generateEBML(EBML);\n        }\n\n        function getClusterData(clusterTimecode, clusterCounter, clusterFrames) {\n            return [{\n                'data': clusterTimecode,\n                'id': 0xe7 // Timecode\n            }].concat(clusterFrames.map(function (webp) {\n                var block = makeSimpleBlock({\n                    discardable: 0,\n                    frame: webp.data.slice(4),\n                    invisible: 0,\n                    keyframe: 1,\n                    lacing: 0,\n                    trackNum: 1,\n                    timecode: Math.round(clusterCounter)\n                });\n                clusterCounter += webp.duration;\n                return {\n                    data: block,\n                    id: 0xa3\n                };\n            }));\n        }\n\n        // sums the lengths of all the frames and gets the duration\n\n        function checkFrames(frames) {\n            if (!frames[0]) {\n                postMessage({\n                    error: 'Something went wrong. Maybe WebP format is not supported in the current browser.'\n                });\n                return;\n            }\n\n            var width = frames[0].width,\n                height = frames[0].height,\n                duration = frames[0].duration;\n\n            for (var i = 1; i < frames.length; i++) {\n                duration += frames[i].duration;\n            }\n            return {\n                duration: duration,\n                width: width,\n                height: height\n            };\n        }\n\n        function numToBuffer(num) {\n            var parts = [];\n            while (num > 0) {\n                parts.push(num & 0xff);\n                num = num >> 8;\n            }\n            return new Uint8Array(parts.reverse());\n        }\n\n        function strToBuffer(str) {\n            return new Uint8Array(str.split('').map(function (e) {\n                return e.charCodeAt(0);\n            }));\n        }\n\n        function bitsToBuffer(bits) {\n            var data = [];\n            var pad = bits.length % 8 ? new Array(1 + 8 - bits.length % 8).join('0') : '';\n            bits = pad + bits;\n            for (var i = 0; i < bits.length; i += 8) {\n                data.push(parseInt(bits.substr(i, 8), 2));\n            }\n            return new Uint8Array(data);\n        }\n\n        function generateEBML(json) {\n            var ebml = [];\n            for (var i = 0; i < json.length; i++) {\n                var data = json[i].data;\n\n                if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {\n                    data = generateEBML(data);\n                }\n\n                if (typeof data === 'number') {\n                    data = bitsToBuffer(data.toString(2));\n                }\n\n                if (typeof data === 'string') {\n                    data = strToBuffer(data);\n                }\n\n                var len = data.size || data.byteLength || data.length;\n                var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\n                var sizeToString = len.toString(2);\n                var padded = new Array(zeroes * 7 + 7 + 1 - sizeToString.length).join('0') + sizeToString;\n                var size = new Array(zeroes).join('0') + '1' + padded;\n\n                ebml.push(numToBuffer(json[i].id));\n                ebml.push(bitsToBuffer(size));\n                ebml.push(data);\n            }\n\n            return new Blob(ebml, {\n                type: 'video/webm'\n            });\n        }\n\n        function toBinStrOld(bits) {\n            var data = '';\n            var pad = bits.length % 8 ? new Array(1 + 8 - bits.length % 8).join('0') : '';\n            bits = pad + bits;\n            for (var i = 0; i < bits.length; i += 8) {\n                data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\n            }\n            return data;\n        }\n\n        function makeSimpleBlock(data) {\n            var flags = 0;\n\n            if (data.keyframe) {\n                flags |= 128;\n            }\n\n            if (data.invisible) {\n                flags |= 8;\n            }\n\n            if (data.lacing) {\n                flags |= data.lacing << 1;\n            }\n\n            if (data.discardable) {\n                flags |= 1;\n            }\n\n            if (data.trackNum > 127) {\n                throw 'TrackNumber > 127 not supported';\n            }\n\n            var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function (e) {\n                return String.fromCharCode(e);\n            }).join('') + data.frame;\n\n            return out;\n        }\n\n        function parseWebP(riff) {\n            var VP8 = riff.RIFF[0].WEBP[0];\n\n            var frameStart = VP8.indexOf('\\x9d\\x01\\x2a'); // A VP8 keyframe starts with the 0x9d012a header\n            for (var i = 0, c = []; i < 4; i++) {\n                c[i] = VP8.charCodeAt(frameStart + 3 + i);\n            }\n\n            var width, height, tmp;\n\n            //the code below is literally copied verbatim from the bitstream spec\n            tmp = c[1] << 8 | c[0];\n            width = tmp & 0x3FFF;\n            tmp = c[3] << 8 | c[2];\n            height = tmp & 0x3FFF;\n            return {\n                width: width,\n                height: height,\n                data: VP8,\n                riff: riff\n            };\n        }\n\n        function getStrLength(string, offset) {\n            return parseInt(string.substr(offset + 4, 4).split('').map(function (i) {\n                var unpadded = i.charCodeAt(0).toString(2);\n                return new Array(8 - unpadded.length + 1).join('0') + unpadded;\n            }).join(''), 2);\n        }\n\n        function parseRIFF(string) {\n            var offset = 0;\n            var chunks = {};\n\n            while (offset < string.length) {\n                var id = string.substr(offset, 4);\n                var len = getStrLength(string, offset);\n                var data = string.substr(offset + 4 + 4, len);\n                offset += 4 + 4 + len;\n                chunks[id] = chunks[id] || [];\n\n                if (id === 'RIFF' || id === 'LIST') {\n                    chunks[id].push(parseRIFF(data));\n                } else {\n                    chunks[id].push(data);\n                }\n            }\n            return chunks;\n        }\n\n        function doubleToString(num) {\n            return [].slice.call(new Uint8Array(new Float64Array([num]).buffer), 0).map(function (e) {\n                return String.fromCharCode(e);\n            }).reverse().join('');\n        }\n\n        var webm = new ArrayToWebM(frames.map(function (frame) {\n            var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\n            webp.duration = frame.duration;\n            return webp;\n        }));\n\n        postMessage(webm);\n    }\n\n    /**\n     * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof Whammy\n     * @example\n     * recorder = new Whammy().Video(0.8, 100);\n     * recorder.compile(function(blob) {\n     *    // blob.size - blob.type\n     * });\n     */\n    WhammyVideo.prototype.compile = function (callback) {\n        var webWorker = processInWebWorker(whammyInWebWorker);\n\n        webWorker.onmessage = function (event) {\n            if (event.data.error) {\n                console.error(event.data.error);\n                return;\n            }\n            callback(event.data);\n        };\n\n        webWorker.postMessage(this.frames);\n    };\n\n    return {\n        /**\n         * A more abstract-ish API.\n         * @method\n         * @memberof Whammy\n         * @example\n         * recorder = new Whammy().Video(0.8, 100);\n         * @param {?number} speed - 0.8\n         * @param {?number} quality - 100\n         */\n        Video: WhammyVideo\n    };\n}();\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.Whammy = Whammy;\n}\n\n// ______________ (indexed-db)\n// DiskStorage.js\n\n/**\n * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.\n * @summary Writing blobs into IndexedDB.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @example\n * DiskStorage.Store({\n *     audioBlob: yourAudioBlob,\n *     videoBlob: yourVideoBlob,\n *     gifBlob  : yourGifBlob\n * });\n * DiskStorage.Fetch(function(dataURL, type) {\n *     if(type === 'audioBlob') { }\n *     if(type === 'videoBlob') { }\n *     if(type === 'gifBlob')   { }\n * });\n * // DiskStorage.dataStoreName = 'recordRTC';\n * // DiskStorage.onError = function(error) { };\n * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\n * @property {function} Fetch - This method fetches stored blobs from IndexedDB.\n * @property {function} Store - This method stores blobs in IndexedDB.\n * @property {function} onError - This function is invoked for any known/unknown error.\n * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\nvar DiskStorage = {\n    /**\n     * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.init();\n     */\n    init: function init() {\n        var self = this;\n\n        if (typeof indexedDB === 'undefined' || typeof indexedDB.open === 'undefined') {\n            console.error('IndexedDB API are not available in this browser.');\n            return;\n        }\n\n        var dbVersion = 1;\n        var dbName = this.dbName || location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g, ''),\n            db;\n        var request = indexedDB.open(dbName, dbVersion);\n\n        function createObjectStore(dataBase) {\n            dataBase.createObjectStore(self.dataStoreName);\n        }\n\n        function putInDB() {\n            var transaction = db.transaction([self.dataStoreName], 'readwrite');\n\n            if (self.videoBlob) {\n                transaction.objectStore(self.dataStoreName).put(self.videoBlob, 'videoBlob');\n            }\n\n            if (self.gifBlob) {\n                transaction.objectStore(self.dataStoreName).put(self.gifBlob, 'gifBlob');\n            }\n\n            if (self.audioBlob) {\n                transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\n            }\n\n            function getFromStore(portionName) {\n                transaction.objectStore(self.dataStoreName).get(portionName).onsuccess = function (event) {\n                    if (self.callback) {\n                        self.callback(event.target.result, portionName);\n                    }\n                };\n            }\n\n            getFromStore('audioBlob');\n            getFromStore('videoBlob');\n            getFromStore('gifBlob');\n        }\n\n        request.onerror = self.onError;\n\n        request.onsuccess = function () {\n            db = request.result;\n            db.onerror = self.onError;\n\n            if (db.setVersion) {\n                if (db.version !== dbVersion) {\n                    var setVersion = db.setVersion(dbVersion);\n                    setVersion.onsuccess = function () {\n                        createObjectStore(db);\n                        putInDB();\n                    };\n                } else {\n                    putInDB();\n                }\n            } else {\n                putInDB();\n            }\n        };\n        request.onupgradeneeded = function (event) {\n            createObjectStore(event.target.result);\n        };\n    },\n    /**\n     * This method fetches stored blobs from IndexedDB.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.Fetch(function(dataURL, type) {\n     *     if(type === 'audioBlob') { }\n     *     if(type === 'videoBlob') { }\n     *     if(type === 'gifBlob')   { }\n     * });\n     */\n    Fetch: function Fetch(callback) {\n        this.callback = callback;\n        this.init();\n\n        return this;\n    },\n    /**\n     * This method stores blobs in IndexedDB.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.Store({\n     *     audioBlob: yourAudioBlob,\n     *     videoBlob: yourVideoBlob,\n     *     gifBlob  : yourGifBlob\n     * });\n     */\n    Store: function Store(config) {\n        this.audioBlob = config.audioBlob;\n        this.videoBlob = config.videoBlob;\n        this.gifBlob = config.gifBlob;\n\n        this.init();\n\n        return this;\n    },\n    /**\n     * This function is invoked for any known/unknown error.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.onError = function(error){\n     *     alerot( JSON.stringify(error) );\n     * };\n     */\n    onError: function onError(error) {\n        console.error(JSON.stringify(error, null, '\\t'));\n    },\n\n    /**\n     * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.dataStoreName = 'recordRTC';\n     */\n    dataStoreName: 'recordRTC',\n    dbName: null\n};\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.DiskStorage = DiskStorage;\n}\n\n// ______________\n// GifRecorder.js\n\n/**\n * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef GifRecorder\n * @class\n * @example\n * var recorder = new GifRecorder(mediaStream || canvas || context, { width: 1280, height: 720, frameRate: 200, quality: 10 });\n * recorder.record();\n * recorder.stop(function(blob) {\n *     img.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.\n * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}\n */\n\nfunction GifRecorder(mediaStream, config) {\n    if (typeof GIFEncoder === 'undefined') {\n        throw 'Please link: https://cdn.webrtc-experiment.com/gif-recorder.js';\n    }\n\n    config = config || {};\n\n    var isHTMLObject = mediaStream instanceof CanvasRenderingContext2D || mediaStream instanceof HTMLCanvasElement;\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function () {\n        if (!isHTMLObject) {\n            if (!config.width) {\n                config.width = video.offsetWidth || 320;\n            }\n\n            if (!this.height) {\n                config.height = video.offsetHeight || 240;\n            }\n\n            if (!config.video) {\n                config.video = {\n                    width: config.width,\n                    height: config.height\n                };\n            }\n\n            if (!config.canvas) {\n                config.canvas = {\n                    width: config.width,\n                    height: config.height\n                };\n            }\n\n            canvas.width = config.canvas.width || 320;\n            canvas.height = config.canvas.height || 240;\n\n            video.width = config.video.width || 320;\n            video.height = config.video.height || 240;\n        }\n\n        // external library to record as GIF images\n        gifEncoder = new GIFEncoder();\n\n        // void setRepeat(int iter) \n        // Sets the number of times the set of GIF frames should be played. \n        // Default is 1; 0 means play indefinitely.\n        gifEncoder.setRepeat(0);\n\n        // void setFrameRate(Number fps) \n        // Sets frame rate in frames per second. \n        // Equivalent to setDelay(1000/fps).\n        // Using \"setDelay\" instead of \"setFrameRate\"\n        gifEncoder.setDelay(config.frameRate || 200);\n\n        // void setQuality(int quality) \n        // Sets quality of color quantization (conversion of images to the \n        // maximum 256 colors allowed by the GIF specification). \n        // Lower values (minimum = 1) produce better colors, \n        // but slow processing significantly. 10 is the default, \n        // and produces good color mapping at reasonable speeds. \n        // Values greater than 20 do not yield significant improvements in speed.\n        gifEncoder.setQuality(config.quality || 10);\n\n        // Boolean start() \n        // This writes the GIF Header and returns false if it fails.\n        gifEncoder.start();\n\n        startTime = Date.now();\n\n        var self = this;\n\n        function drawVideoFrame(time) {\n            if (isPausedRecording) {\n                return setTimeout(function () {\n                    drawVideoFrame(time);\n                }, 100);\n            }\n\n            lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n\n            if ((typeof lastFrameTime === 'undefined' ? 'undefined' : _typeof(lastFrameTime)) === undefined) {\n                lastFrameTime = time;\n            }\n\n            // ~10 fps\n            if (time - lastFrameTime < 90) {\n                return;\n            }\n\n            if (!isHTMLObject && video.paused) {\n                // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n                // Tweak for Android Chrome\n                video.play();\n            }\n\n            if (!isHTMLObject) {\n                context.drawImage(video, 0, 0, canvas.width, canvas.height);\n            }\n\n            if (config.onGifPreview) {\n                config.onGifPreview(canvas.toDataURL('image/png'));\n            }\n\n            gifEncoder.addFrame(context);\n            lastFrameTime = time;\n        }\n\n        lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n\n        if (config.initCallback) {\n            config.initCallback();\n        }\n    };\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     img.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function () {\n        if (lastAnimationFrame) {\n            cancelAnimationFrame(lastAnimationFrame);\n        }\n\n        endTime = Date.now();\n\n        /**\n         * @property {Blob} blob - The recorded blob object.\n         * @memberof GifRecorder\n         * @example\n         * recorder.stop(function(){\n         *     var blob = recorder.blob;\n         * });\n         */\n        this.blob = new Blob([new Uint8Array(gifEncoder.stream().bin)], {\n            type: 'image/gif'\n        });\n\n        // bug: find a way to clear old recorded blobs\n        gifEncoder.stream().bin = [];\n    };\n\n    var isPausedRecording = false;\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function () {\n        isPausedRecording = true;\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function () {\n        isPausedRecording = false;\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function () {\n        if (!gifEncoder) {\n            return;\n        }\n\n        this.pause();\n\n        gifEncoder.stream().bin = [];\n    };\n\n    // for debugging\n    this.name = 'GifRecorder';\n    this.toString = function () {\n        return this.name;\n    };\n\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n\n    if (isHTMLObject) {\n        if (mediaStream instanceof CanvasRenderingContext2D) {\n            context = mediaStream;\n            canvas = context.canvas;\n        } else if (mediaStream instanceof HTMLCanvasElement) {\n            context = mediaStream.getContext('2d');\n            canvas = mediaStream;\n        }\n    }\n\n    if (!isHTMLObject) {\n        var video = document.createElement('video');\n        video.muted = true;\n        video.autoplay = true;\n\n        if (typeof video.srcObject !== 'undefined') {\n            video.srcObject = mediaStream;\n        } else {\n            video.src = URL.createObjectURL(mediaStream);\n        }\n\n        video.play();\n    }\n\n    var lastAnimationFrame = null;\n    var startTime, endTime, lastFrameTime;\n\n    var gifEncoder;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.GifRecorder = GifRecorder;\n}\n\n// ______________________\n// MultiStreamRecorder.js\n\n/*\n * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\n */\n\n/**\n * MultiStreamRecorder can record multiple videos in single container.\n * @summary Multi-videos recorder.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef MultiStreamRecorder\n * @class\n * @example\n * var options = {\n *     mimeType: 'video/webm'\n * }\n * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n *\n *     // or\n *     var blob = recorder.blob;\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStreams} mediaStreams - Array of MediaStreams.\n * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: \"video/webm\"}\n */\n\nfunction MultiStreamRecorder(arrayOfMediaStreams, options) {\n    var self = this;\n\n    options = options || {\n        mimeType: 'video/webm',\n        video: {\n            width: 360,\n            height: 240\n        }\n    };\n\n    if (!options.frameInterval) {\n        options.frameInterval = 10;\n    }\n\n    if (!options.video) {\n        options.video = {};\n    }\n\n    if (!options.video.width) {\n        options.video.width = 360;\n    }\n\n    if (!options.video.height) {\n        options.video.height = 240;\n    }\n\n    /**\n     * This method records all MediaStreams.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function () {\n        isStoppedRecording = false;\n        var mixedVideoStream = getMixedVideoStream();\n\n        var mixedAudioStream = getMixedAudioStream();\n        if (mixedAudioStream) {\n            mixedAudioStream.getAudioTracks().forEach(function (track) {\n                mixedVideoStream.addTrack(track);\n            });\n        }\n\n        if (options.previewStream && typeof options.previewStream === 'function') {\n            options.previewStream(mixedVideoStream);\n        }\n\n        mediaRecorder = new MediaStreamRecorder(mixedVideoStream, options);\n\n        drawVideosToCanvas();\n\n        mediaRecorder.record();\n    };\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function (callback) {\n        isStoppedRecording = true;\n\n        if (!mediaRecorder) {\n            return;\n        }\n\n        mediaRecorder.stop(function (blob) {\n            self.blob = blob;\n\n            callback(blob);\n\n            self.clearRecordedData();\n        });\n    };\n\n    function getMixedAudioStream() {\n        // via: @pehrsons\n        if (!Storage.AudioContextConstructor) {\n            Storage.AudioContextConstructor = new Storage.AudioContext();\n        }\n\n        self.audioContext = Storage.AudioContextConstructor;\n\n        self.audioSources = [];\n\n        self.gainNode = self.audioContext.createGain();\n        self.gainNode.connect(self.audioContext.destination);\n        self.gainNode.gain.value = 0; // don't hear self\n\n        var audioTracksLength = 0;\n        arrayOfMediaStreams.forEach(function (stream) {\n            if (!stream.getAudioTracks().length) {\n                return;\n            }\n\n            audioTracksLength++;\n\n            var audioSource = self.audioContext.createMediaStreamSource(stream);\n            audioSource.connect(self.gainNode);\n            self.audioSources.push(audioSource);\n        });\n\n        if (!audioTracksLength) {\n            return;\n        }\n\n        self.audioDestination = self.audioContext.createMediaStreamDestination();\n        self.audioSources.forEach(function (audioSource) {\n            audioSource.connect(self.audioDestination);\n        });\n        return self.audioDestination.stream;\n    }\n\n    var videos = [];\n    var mediaRecorder;\n\n    function resetVideoStreams(streams) {\n        videos = [];\n        streams = streams || arrayOfMediaStreams;\n\n        // via: @adrian-ber\n        streams.forEach(function (stream) {\n            if (!stream.getVideoTracks().length) {\n                return;\n            }\n\n            var video = getVideo(stream);\n            video.width = options.video.width;\n            video.height = options.video.height;\n            video.stream = stream;\n            videos.push(video);\n        });\n    }\n\n    function getMixedVideoStream() {\n        resetVideoStreams();\n\n        var capturedStream;\n\n        if ('captureStream' in canvas) {\n            capturedStream = canvas.captureStream();\n        } else if ('mozCaptureStream' in canvas) {\n            capturedStream = canvas.mozCaptureStream();\n        } else if (!options.disableLogs) {\n            console.error('Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features');\n        }\n\n        var videoStream = new MediaStream();\n\n        // via streamproc/MediaStreamRecorder#126\n        capturedStream.getVideoTracks().forEach(function (track) {\n            videoStream.addTrack(track);\n        });\n\n        canvas.stream = videoStream;\n\n        return videoStream;\n    }\n\n    function getVideo(stream) {\n        var video = document.createElement('video');\n        video.src = URL.createObjectURL(stream);\n        video.muted = true;\n        video.volume = 0;\n        video.play();\n        return video;\n    }\n\n    var isStoppedRecording = false;\n\n    function drawVideosToCanvas() {\n        if (isStoppedRecording) {\n            return;\n        }\n\n        var videosLength = videos.length;\n\n        var fullcanvas = false;\n        videos.forEach(function (video) {\n            if (!video.stream) {\n                video.stream = {};\n            }\n\n            if (video.stream.fullcanvas) {\n                fullcanvas = video.stream;\n            }\n        });\n\n        if (fullcanvas) {\n            canvas.width = fullcanvas.width;\n            canvas.height = fullcanvas.height;\n        } else {\n            canvas.width = videosLength > 1 ? videos[0].width * 2 : videos[0].width;\n            canvas.height = videosLength > 2 ? videos[0].height * 2 : videos[0].height;\n        }\n\n        videos.forEach(drawImage);\n\n        setTimeout(drawVideosToCanvas, options.frameInterval);\n    }\n\n    function drawImage(video, idx) {\n        if (isStoppedRecording) {\n            return;\n        }\n\n        var x = 0;\n        var y = 0;\n        var width = video.width;\n        var height = video.height;\n\n        if (idx === 1) {\n            x = video.width;\n        }\n\n        if (idx === 2) {\n            y = video.height;\n        }\n\n        if (idx === 3) {\n            x = video.width;\n            y = video.height;\n        }\n\n        if (typeof video.stream.left !== 'undefined') {\n            x = video.stream.left;\n        }\n\n        if (typeof video.stream.top !== 'undefined') {\n            y = video.stream.top;\n        }\n\n        if (typeof video.stream.width !== 'undefined') {\n            width = video.stream.width;\n        }\n\n        if (typeof video.stream.height !== 'undefined') {\n            height = video.stream.height;\n        }\n\n        context.drawImage(video, x, y, width, height);\n\n        if (typeof video.stream.onRender === 'function') {\n            video.stream.onRender(context, x, y, width, height, idx);\n        }\n    }\n\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n\n    canvas.style = 'opacity:0;position:absolute;z-index:-1;top: -100000000;left:-1000000000;';\n\n    (document.body || document.documentElement).appendChild(canvas);\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function () {\n        if (mediaRecorder) {\n            mediaRecorder.pause();\n        }\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function () {\n        if (mediaRecorder) {\n            mediaRecorder.resume();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function () {\n        videos = [];\n        isStoppedRecording = true;\n\n        if (mediaRecorder) {\n            mediaRecorder.clearRecordedData();\n        }\n\n        mediaRecorder = null;\n\n        if (self.gainNode) {\n            self.gainNode.disconnect();\n            self.gainNode = null;\n        }\n\n        if (self.audioSources.length) {\n            self.audioSources.forEach(function (source) {\n                source.disconnect();\n            });\n            self.audioSources = [];\n        }\n\n        if (self.audioDestination) {\n            self.audioDestination.disconnect();\n            self.audioDestination = null;\n        }\n\n        self.audioContext = null;\n\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (canvas.stream) {\n            canvas.stream.stop();\n            canvas.stream = null;\n        }\n    };\n\n    /**\n     * Add extra media-streams to existing recordings.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\n     * @example\n     * recorder.addStreams([newAudioStream, newVideoStream]);\n     */\n    this.addStreams = function (streams) {\n        if (!streams) {\n            throw 'First parameter is required.';\n        }\n\n        if (!(streams instanceof Array)) {\n            streams = [streams];\n        }\n\n        arrayOfMediaStreams.concat(streams);\n\n        if (!mediaRecorder) {\n            return;\n        }\n\n        streams.forEach(function (stream) {\n            if (stream.getVideoTracks().length) {\n                var video = getVideo(stream);\n                video.width = options.video.width;\n                video.height = options.video.height;\n                video.stream = stream;\n                videos.push(video);\n            }\n\n            if (stream.getAudioTracks().length && self.audioContext) {\n                var audioSource = self.audioContext.createMediaStreamSource(stream);\n                audioSource.connect(self.audioDestination);\n                self.audioSources.push(audioSource);\n            }\n        });\n    };\n\n    /**\n     * Reset videos during live recording. Replace old videos e.g. replace cameras with full-screen.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\n     * @example\n     * recorder.resetVideoStreams([newVideo1, newVideo2]);\n     */\n    this.resetVideoStreams = function (streams) {\n        if (streams && !(streams instanceof Array)) {\n            streams = [streams];\n        }\n\n        resetVideoStreams(streams);\n    };\n\n    // for debugging\n    this.name = 'MultiStreamRecorder';\n    this.toString = function () {\n        return this.name;\n    };\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.MultiStreamRecorder = MultiStreamRecorder;\n}\n\n// _____________________\n// RecordRTC.promises.js\n\n/**\n * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}\n * @summary Promises for {@link RecordRTC}\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef RecordRTCPromisesHandler\n * @class\n * @example\n * var recorder = new RecordRTCPromisesHandler(mediaStream, options);\n * recorder.startRecording()\n *         .then(successCB)\n *         .catch(errorCB);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\n * @throws Will throw an error if \"new\" keyword is not used to initiate \"RecordRTCPromisesHandler\". Also throws error if first argument \"MediaStream\" is missing.\n * @requires {@link RecordRTC}\n */\n\nfunction RecordRTCPromisesHandler(mediaStream, options) {\n    if (!this) {\n        throw 'Use \"new RecordRTCPromisesHandler()\"';\n    }\n\n    if (typeof mediaStream === 'undefined') {\n        throw 'First argument \"MediaStream\" is required.';\n    }\n\n    var self = this;\n\n    /**\n     * @property {Blob} blob - Access/reach the native {@link RecordRTC} object.\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * var internal = recorder.recordRTC.getInternalRecorder();\n     * alert(internal instanceof MediaStreamRecorder);\n     */\n    self.recordRTC = new RecordRTC(mediaStream, options);\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.startRecording()\n     *         .then(successCB)\n     *         .catch(errorCB);\n     */\n    this.startRecording = function () {\n        return new Promise(function (resolve, reject) {\n            try {\n                self.recordRTC.startRecording();\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * This method stops the recording.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.stopRecording().then(function() {\n     *     var blob = recorder.getBlob();\n     * }).catch(errorCB);\n     */\n    this.stopRecording = function () {\n        return new Promise(function (resolve, reject) {\n            try {\n                self.recordRTC.stopRecording(function (url) {\n                    self.blob = self.recordRTC.getBlob();\n                    resolve(url);\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * This method returns data-url for the recorded blob.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.stopRecording().then(function() {\n     *     recorder.getDataURL().then(function(dataURL) {\n     *         window.open(dataURL);\n     *     }).catch(errorCB);;\n     * }).catch(errorCB);\n     */\n    this.getDataURL = function (callback) {\n        return new Promise(function (resolve, reject) {\n            try {\n                self.recordRTC.getDataURL(function (dataURL) {\n                    resolve(dataURL);\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * This method returns the recorded blob.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.stopRecording().then(function() {\n     *     var blob = recorder.getBlob();\n     * }).catch(errorCB);\n     */\n    this.getBlob = function () {\n        return self.recordRTC.getBlob();\n    };\n\n    /**\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.stopRecording().then(function() {\n     *     var blob = recorder.getBlob();\n     * }).catch(errorCB);\n     */\n    this.blob = null;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.RecordRTCPromisesHandler = RecordRTCPromisesHandler;\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction TextReceiver() {\n    var content = {};\n\n    function receive(data, onmessage, userid) {\n        // uuid is used to uniquely identify sending instance\n        var uuid = data.uuid;\n        if (!content[uuid]) {\n            content[uuid] = [];\n        }\n\n        content[uuid].push(data.message);\n        if (data.last == 1) {\n            var message = content[uuid].join('');\n            if (data.isobject == 1) {\n                message = JSON.parse(message);\n            }\n\n            // latency detection\n            var receivingTime = new Date().getTime();\n            var latency = receivingTime - data.sendingTime;\n\n            onmessage(message, userid, latency);\n\n            delete content[uuid];\n        }\n    }\n\n    return {\n        receive: receive\n    };\n}\n\nmodule.exports = TextReceiver();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvVGV4dFJlY2VpdmVyLmpzP2U3NTYiXSwibmFtZXMiOlsiVGV4dFJlY2VpdmVyIiwiY29udGVudCIsInJlY2VpdmUiLCJkYXRhIiwib25tZXNzYWdlIiwidXNlcmlkIiwidXVpZCIsInB1c2giLCJtZXNzYWdlIiwibGFzdCIsImpvaW4iLCJpc29iamVjdCIsIkpTT04iLCJwYXJzZSIsInJlY2VpdmluZ1RpbWUiLCJEYXRlIiwiZ2V0VGltZSIsImxhdGVuY3kiLCJzZW5kaW5nVGltZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsU0FBU0EsWUFBVCxHQUF3QjtBQUNwQixRQUFJQyxVQUFVLEVBQWQ7O0FBRUEsYUFBU0MsT0FBVCxDQUFpQkMsSUFBakIsRUFBdUJDLFNBQXZCLEVBQWtDQyxNQUFsQyxFQUEwQztBQUN0QztBQUNBLFlBQUlDLE9BQU9ILEtBQUtHLElBQWhCO0FBQ0EsWUFBSSxDQUFDTCxRQUFRSyxJQUFSLENBQUwsRUFBb0I7QUFDaEJMLG9CQUFRSyxJQUFSLElBQWdCLEVBQWhCO0FBQ0g7O0FBRURMLGdCQUFRSyxJQUFSLEVBQWNDLElBQWQsQ0FBbUJKLEtBQUtLLE9BQXhCO0FBQ0EsWUFBSUwsS0FBS00sSUFBTCxJQUFXLENBQWYsRUFBa0I7QUFDZCxnQkFBSUQsVUFBVVAsUUFBUUssSUFBUixFQUFjSSxJQUFkLENBQW1CLEVBQW5CLENBQWQ7QUFDQSxnQkFBSVAsS0FBS1EsUUFBTCxJQUFlLENBQW5CLEVBQXNCO0FBQ2xCSCwwQkFBVUksS0FBS0MsS0FBTCxDQUFXTCxPQUFYLENBQVY7QUFDSDs7QUFFRDtBQUNBLGdCQUFJTSxnQkFBZ0IsSUFBSUMsSUFBSixHQUFXQyxPQUFYLEVBQXBCO0FBQ0EsZ0JBQUlDLFVBQVVILGdCQUFnQlgsS0FBS2UsV0FBbkM7O0FBRUFkLHNCQUFVSSxPQUFWLEVBQW1CSCxNQUFuQixFQUEyQlksT0FBM0I7O0FBRUEsbUJBQU9oQixRQUFRSyxJQUFSLENBQVA7QUFDSDtBQUNKOztBQUVELFdBQU87QUFDSEosaUJBQVNBO0FBRE4sS0FBUDtBQUdIOztBQUVEaUIsT0FBT0MsT0FBUCxHQUFpQnBCLGNBQWpCIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBUZXh0UmVjZWl2ZXIoKSB7XG4gICAgdmFyIGNvbnRlbnQgPSB7fTtcblxuICAgIGZ1bmN0aW9uIHJlY2VpdmUoZGF0YSwgb25tZXNzYWdlLCB1c2VyaWQpIHtcbiAgICAgICAgLy8gdXVpZCBpcyB1c2VkIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHNlbmRpbmcgaW5zdGFuY2VcbiAgICAgICAgdmFyIHV1aWQgPSBkYXRhLnV1aWQ7XG4gICAgICAgIGlmICghY29udGVudFt1dWlkXSkge1xuICAgICAgICAgICAgY29udGVudFt1dWlkXSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGVudFt1dWlkXS5wdXNoKGRhdGEubWVzc2FnZSk7XG4gICAgICAgIGlmIChkYXRhLmxhc3Q9PTEpIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gY29udGVudFt1dWlkXS5qb2luKCcnKTtcbiAgICAgICAgICAgIGlmIChkYXRhLmlzb2JqZWN0PT0xKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IEpTT04ucGFyc2UobWVzc2FnZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGxhdGVuY3kgZGV0ZWN0aW9uXG4gICAgICAgICAgICB2YXIgcmVjZWl2aW5nVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgdmFyIGxhdGVuY3kgPSByZWNlaXZpbmdUaW1lIC0gZGF0YS5zZW5kaW5nVGltZTtcblxuICAgICAgICAgICAgb25tZXNzYWdlKG1lc3NhZ2UsIHVzZXJpZCwgbGF0ZW5jeSk7XG5cbiAgICAgICAgICAgIGRlbGV0ZSBjb250ZW50W3V1aWRdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVjZWl2ZTogcmVjZWl2ZVxuICAgIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dFJlY2VpdmVyKCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvVGV4dFJlY2VpdmVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by guominghui on 17/8/7.\n */\nvar io = __webpack_require__(12);\nvar config = __webpack_require__(9);\n\nvar socketMessage = function () {\n    function socketMessage(fn) {\n        _classCallCheck(this, socketMessage);\n\n        this.handelFn = fn;\n        this.connect();\n    }\n\n    _createClass(socketMessage, [{\n        key: 'connect',\n        value: function connect() {\n            this.socket = io.connect(config.socketServer);\n            this.socket.on('message', this.handelFn);\n        }\n    }, {\n        key: 'changeFn',\n        value: function changeFn(fn) {\n            this.handelFn = fn;\n            this.socket.off('message');\n            this.socket.on('message', fn);\n        }\n    }, {\n        key: 'leave',\n        value: function leave() {\n            this.socket && this.socket.close();\n            this.socket = null;\n        }\n    }, {\n        key: 'sendMessage',\n        value: function sendMessage(msg) {\n            this.socket.emit('message', msg);\n        }\n    }, {\n        key: 'sendToServer',\n        value: function sendToServer(type, msg) {\n            this.socket.emit(type, msg);\n        }\n    }]);\n\n    return socketMessage;\n}();\n\nmodule.exports = socketMessage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvc29ja2V0TWVzc2FnZS5qcz8xZGI1Il0sIm5hbWVzIjpbImlvIiwicmVxdWlyZSIsImNvbmZpZyIsInNvY2tldE1lc3NhZ2UiLCJmbiIsImhhbmRlbEZuIiwiY29ubmVjdCIsInNvY2tldCIsInNvY2tldFNlcnZlciIsIm9uIiwib2ZmIiwiY2xvc2UiLCJtc2ciLCJlbWl0IiwidHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7QUFHQSxJQUFJQSxLQUFLLG1CQUFBQyxDQUFRLEVBQVIsQ0FBVDtBQUNBLElBQUlDLFNBQVMsbUJBQUFELENBQVEsQ0FBUixDQUFiOztJQUNNRSxhO0FBQ0YsMkJBQVlDLEVBQVosRUFBZTtBQUFBOztBQUNYLGFBQUtDLFFBQUwsR0FBZ0JELEVBQWhCO0FBQ0EsYUFBS0UsT0FBTDtBQUNIOzs7O2tDQUVRO0FBQ0wsaUJBQUtDLE1BQUwsR0FBY1AsR0FBR00sT0FBSCxDQUFXSixPQUFPTSxZQUFsQixDQUFkO0FBQ0EsaUJBQUtELE1BQUwsQ0FBWUUsRUFBWixDQUFlLFNBQWYsRUFBMEIsS0FBS0osUUFBL0I7QUFFSDs7O2lDQUVRRCxFLEVBQUc7QUFDUixpQkFBS0MsUUFBTCxHQUFnQkQsRUFBaEI7QUFDQSxpQkFBS0csTUFBTCxDQUFZRyxHQUFaLENBQWdCLFNBQWhCO0FBQ0EsaUJBQUtILE1BQUwsQ0FBWUUsRUFBWixDQUFlLFNBQWYsRUFBeUJMLEVBQXpCO0FBQ0g7OztnQ0FFTTtBQUNILGlCQUFLRyxNQUFMLElBQWUsS0FBS0EsTUFBTCxDQUFZSSxLQUFaLEVBQWY7QUFDQSxpQkFBS0osTUFBTCxHQUFjLElBQWQ7QUFDSDs7O29DQUVXSyxHLEVBQUk7QUFDWixpQkFBS0wsTUFBTCxDQUFZTSxJQUFaLENBQWlCLFNBQWpCLEVBQTJCRCxHQUEzQjtBQUNIOzs7cUNBRVlFLEksRUFBS0YsRyxFQUFJO0FBQ2xCLGlCQUFLTCxNQUFMLENBQVlNLElBQVosQ0FBaUJDLElBQWpCLEVBQXNCRixHQUF0QjtBQUNIOzs7Ozs7QUFLTEcsT0FBT0MsT0FBUCxHQUFpQmIsYUFBakIiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSBndW9taW5naHVpIG9uIDE3LzgvNy5cbiAqL1xubGV0IGlvID0gcmVxdWlyZSgnLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvZGlzdC9zb2NrZXQuaW8nKTtcbmxldCBjb25maWcgPSByZXF1aXJlKCcuL2NvbmZpZycpO1xuY2xhc3Mgc29ja2V0TWVzc2FnZXtcbiAgICBjb25zdHJ1Y3Rvcihmbil7XG4gICAgICAgIHRoaXMuaGFuZGVsRm4gPSBmbjtcbiAgICAgICAgdGhpcy5jb25uZWN0KCk7XG4gICAgfVxuXG4gICAgY29ubmVjdCgpe1xuICAgICAgICB0aGlzLnNvY2tldCA9IGlvLmNvbm5lY3QoY29uZmlnLnNvY2tldFNlcnZlcik7XG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKCdtZXNzYWdlJywgdGhpcy5oYW5kZWxGbik7XG5cbiAgICB9XG5cbiAgICBjaGFuZ2VGbihmbil7XG4gICAgICAgIHRoaXMuaGFuZGVsRm4gPSBmbjtcbiAgICAgICAgdGhpcy5zb2NrZXQub2ZmKCdtZXNzYWdlJyk7XG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKCdtZXNzYWdlJyxmbik7XG4gICAgfVxuXG4gICAgbGVhdmUoKXtcbiAgICAgICAgdGhpcy5zb2NrZXQgJiYgdGhpcy5zb2NrZXQuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5zb2NrZXQgPSBudWxsO1xuICAgIH1cblxuICAgIHNlbmRNZXNzYWdlKG1zZyl7XG4gICAgICAgIHRoaXMuc29ja2V0LmVtaXQoJ21lc3NhZ2UnLG1zZyk7XG4gICAgfVxuXG4gICAgc2VuZFRvU2VydmVyKHR5cGUsbXNnKXtcbiAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCh0eXBlLG1zZyk7XG4gICAgfVxuXG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzb2NrZXRNZXNzYWdlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zb2NrZXRNZXNzYWdlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Created by guominghui on 17/8/11.\n */\nvar util = {\n    getBytesLength: function getBytesLength(str) {\n        // 在GBK编码里，除了ASCII字符，其它都占两个字符宽\n        return str.replace(/[^\\x00-\\xff]/g, 'xx').length;\n    },\n    ab2str: function ab2str(buf) {\n        return String.fromCharCode.apply(null, new Uint8Array(buf));\n    },\n\n    str2ab: function str2ab(str) {\n        var buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n        var bufView = new Uint16Array(buf);\n        for (var i = 0, strLen = str.length; i < strLen; i++) {\n            bufView[i] = str.charCodeAt(i);\n        }\n        return buf;\n    },\n    getRandomString: function getRandomString() {\n        return (Math.random() * new Date().getTime()).toString(36).replace(/\\./g, '-');\n    }\n};\n\nmodule.exports = util;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvdXRpbC5qcz85NGU5Il0sIm5hbWVzIjpbInV0aWwiLCJnZXRCeXRlc0xlbmd0aCIsInN0ciIsInJlcGxhY2UiLCJsZW5ndGgiLCJhYjJzdHIiLCJidWYiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsIlVpbnQ4QXJyYXkiLCJzdHIyYWIiLCJBcnJheUJ1ZmZlciIsImJ1ZlZpZXciLCJVaW50MTZBcnJheSIsImkiLCJzdHJMZW4iLCJjaGFyQ29kZUF0IiwiZ2V0UmFuZG9tU3RyaW5nIiwiTWF0aCIsInJhbmRvbSIsIkRhdGUiLCJnZXRUaW1lIiwidG9TdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7QUFHQSxJQUFJQSxPQUFPO0FBQ1BDLG9CQUFlLHdCQUFTQyxHQUFULEVBQWM7QUFDakM7QUFDUSxlQUFPQSxJQUFJQyxPQUFKLENBQVksZUFBWixFQUE2QixJQUE3QixFQUFtQ0MsTUFBMUM7QUFDSCxLQUpNO0FBS1BDLFlBQU8sZ0JBQVNDLEdBQVQsRUFBYztBQUNqQixlQUFPQyxPQUFPQyxZQUFQLENBQW9CQyxLQUFwQixDQUEwQixJQUExQixFQUFnQyxJQUFJQyxVQUFKLENBQWVKLEdBQWYsQ0FBaEMsQ0FBUDtBQUNILEtBUE07O0FBU1BLLFlBQU8sZ0JBQVNULEdBQVQsRUFBYztBQUNqQixZQUFJSSxNQUFNLElBQUlNLFdBQUosQ0FBZ0JWLElBQUlFLE1BQUosR0FBVyxDQUEzQixDQUFWLENBRGlCLENBQ3dCO0FBQ3pDLFlBQUlTLFVBQVUsSUFBSUMsV0FBSixDQUFnQlIsR0FBaEIsQ0FBZDtBQUNBLGFBQUssSUFBSVMsSUFBRSxDQUFOLEVBQVNDLFNBQU9kLElBQUlFLE1BQXpCLEVBQWlDVyxJQUFFQyxNQUFuQyxFQUEyQ0QsR0FBM0MsRUFBZ0Q7QUFDNUNGLG9CQUFRRSxDQUFSLElBQWFiLElBQUllLFVBQUosQ0FBZUYsQ0FBZixDQUFiO0FBQ0g7QUFDRCxlQUFPVCxHQUFQO0FBQ0gsS0FoQk07QUFpQlBZLHFCQUFpQiwyQkFBWTtBQUN6QixlQUFPLENBQUNDLEtBQUtDLE1BQUwsS0FBZ0IsSUFBSUMsSUFBSixHQUFXQyxPQUFYLEVBQWpCLEVBQXVDQyxRQUF2QyxDQUFnRCxFQUFoRCxFQUFvRHBCLE9BQXBELENBQTRELEtBQTVELEVBQW1FLEdBQW5FLENBQVA7QUFDSDtBQW5CTSxDQUFYOztBQXNCQXFCLE9BQU9DLE9BQVAsR0FBaUJ6QixJQUFqQiIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IGd1b21pbmdodWkgb24gMTcvOC8xMS5cbiAqL1xubGV0IHV0aWwgPSB7XG4gICAgZ2V0Qnl0ZXNMZW5ndGg6ZnVuY3Rpb24oc3RyKSB7XG4vLyDlnKhHQkvnvJbnoIHph4zvvIzpmaTkuoZBU0NJSeWtl+espu+8jOWFtuWug+mDveWNoOS4pOS4quWtl+espuWuvVxuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1teXFx4MDAtXFx4ZmZdL2csICd4eCcpLmxlbmd0aDtcbiAgICB9LFxuICAgIGFiMnN0cjpmdW5jdGlvbihidWYpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkoYnVmKSk7XG4gICAgfSxcblxuICAgIHN0cjJhYjpmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgdmFyIGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihzdHIubGVuZ3RoKjIpOyAvLyAyIGJ5dGVzIGZvciBlYWNoIGNoYXJcbiAgICAgICAgdmFyIGJ1ZlZpZXcgPSBuZXcgVWludDE2QXJyYXkoYnVmKTtcbiAgICAgICAgZm9yICh2YXIgaT0wLCBzdHJMZW49c3RyLmxlbmd0aDsgaTxzdHJMZW47IGkrKykge1xuICAgICAgICAgICAgYnVmVmlld1tpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgfSxcbiAgICBnZXRSYW5kb21TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChNYXRoLnJhbmRvbSgpICogbmV3IERhdGUoKS5nZXRUaW1lKCkpLnRvU3RyaW5nKDM2KS5yZXBsYWNlKC9cXC4vZywgJy0nKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXRpbDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvdXRpbC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by guominghui on 17/8/4.\n */\nvar Message = __webpack_require__(2);\nvar util = __webpack_require__(3);\nvar Sender = __webpack_require__(8);\nvar RecordRTC = __webpack_require__(0);\nvar Receiver = __webpack_require__(1);\nvar screen = __webpack_require__(11);\n\nvar MasterRTC = function () {\n    function MasterRTC(el, slave) {\n        _classCallCheck(this, MasterRTC);\n\n        this.id = slave.id;\n        this.el = el;\n        this.message = slave.message;\n        this.others = slave.others || [];\n        this.initMsg();\n\n        this.pcs = {};\n    }\n\n    _createClass(MasterRTC, [{\n        key: 'initMsg',\n        value: function initMsg() {\n            this.message.changeFn(this.handleMessage());\n            this.message.sendToServer('updatemaster');\n        }\n    }, {\n        key: 'initVideo',\n        value: function initVideo() {\n            var _this = this;\n            return navigator.mediaDevices.getUserMedia({\n                audio: true,\n                video: {\n                    width: { min: 200, max: 200 },\n                    height: { min: 200, max: 200 }\n                }\n            });\n        }\n    }, {\n        key: 'handleMessage',\n        value: function handleMessage() {\n            var _this = this;\n            return function (msg) {\n                console.log(msg.type, msg.from);\n                var type = msg.type;\n                var connection = void 0,\n                    data = void 0;\n                switch (type) {\n                    case 'offer':\n                        msg.desc = msg.data;\n                        _this.connection.setRemoteDescription(new RTCSessionDescription(msg.desc)).then().catch(function (e) {\n                            console.log(e);\n                        });\n                        _this.createAnswer();\n                        break;\n                    case 'answer':\n                        if (msg.payload) {\n                            data = msg.payload;\n                        }\n                        connection = _this.pcs[msg.from];\n                        if (connection) {\n                            connection.setRemoteDescription(new RTCSessionDescription(data)).then().catch(function (e) {\n                                console.log(e);\n                            });\n                        }\n                        break;\n                    case 'candidate':\n\n                        data = msg.payload && {\n                            sdpMLineIndex: msg.payload.label,\n                            sdpMid: msg.payload.id,\n                            candidate: msg.payload.candidate\n                        };\n\n                        if (data) {\n                            var candidate = new RTCIceCandidate(data);\n                            connection = _this.pcs[msg.from];\n                            if (connection) {\n                                connection.addIceCandidate(candidate).then(function () {}).catch(function (e) {\n                                    console.log(e);\n                                });\n                            }\n                        }\n\n                        break;\n                    case 'other':\n                        if (msg.data) {\n                            _this.others = msg.data;\n                        }\n                        break;\n                    case 'otherjoin':\n                        _this.others.push(msg.data);\n                        console.log(_this.others);\n                        if (_this.isStart) {\n                            _this.pcs[msg.data] = _this.createConnection(msg.data);\n                        }\n                        break;\n                    case 'otherleave':\n                        var i = _this.others.indexOf(msg.data);\n                        if (i > -1) {\n                            _this.others.splice(i, 1);\n                            if (_this.isStart) {\n                                _this.closeConnection(msg.data);\n                            }\n                        }\n\n                        console.log(_this.others);\n                        break;\n                }\n            };\n        }\n    }, {\n        key: 'createConnections',\n        value: function createConnections() {\n            this.isStart = true;\n            var _this = this;\n            this.initVideo().then(function (stream) {\n                _this.el.srcObject = stream;\n                _this.stream = stream;\n                for (var i = 0, l = _this.others.length; i < l; i++) {\n                    _this.pcs[_this.others[i]] = _this.createConnection(_this.others[i]);\n                }\n                /*screen.init('container');\n                screen.start();\n                setTimeout(function(){\n                    screen.stop();\n                },5000);*/\n                /*_this.recorder = RecordRTC([stream,document.getElementById('drawcanvas')],{\n                    type:'video',\n                    recorderType: RecordRTC.MediaStreamRecorder,\n                    numberOfAudioChannels: 1\n                });\n                _this.recorder.startRecording();\n                setTimeout(function(){\n                    _this.recorder.stopRecording(function() {\n                         // or manually:\n                        _this.recorder.save('filename.webm');\n                    });\n                },5000);*/\n            }).catch(function (e) {\n                console.log(e);\n                function handleGetUserMediaError(e) {\n                    switch (e.name) {\n                        case \"NotFoundError\":\n                            alert(\"Unable to open your call because no camera and/or microphone\" + \"were found.\");\n                            break;\n                        case \"SecurityError\":\n                        case \"PermissionDeniedError\":\n                            // Do nothing; this is the same as the user canceling the call.\n                            break;\n                        default:\n                            alert(\"Error opening your camera and/or microphone: \" + e.message);\n                            break;\n                    }\n\n                    // closeVideoCall();\n                }\n            });\n            ;\n        }\n    }, {\n        key: 'initDataChannel',\n        value: function initDataChannel(pc) {\n            return;\n            var dc = pc.createDataChannel(\"my channel\");\n\n            dc.onmessage = function (event) {\n                console.log(event.data);\n                var data = JSON.parse(event.data);\n\n                Receiver.receive(data, function (message) {\n                    /*let msg = JSON.parse(event.data);\n                     if(msg.type =='img'){\n                     let imgDom = document.getElementById('img');\n                     if(imgDom){\n                     imgDom.src = msg.data;\n                     }\n                     }*/\n                    console.log(message.data);\n                    if (message.type == 'img') {\n                        var imgDom = document.getElementById('img');\n                        if (imgDom) {\n                            imgDom.src = message.data;\n                        }\n                    }\n                });\n            };\n\n            dc.onopen = function () {\n                console.log(\"datachannel open\");\n            };\n\n            dc.onclose = function () {\n                console.log(\"datachannel close\");\n                dc = null;\n            };\n            pc.dc = dc;\n        }\n    }, {\n        key: 'drawImg',\n        value: function drawImg(img) {\n            for (var i in this.pcs) {\n                if (this.pcs.hasOwnProperty(i) && this.pcs[i].dc) {\n                    var o = { type: 'img', data: img };\n                    console.log(o.length);\n                    Sender.send({\n                        channel: this.pcs[i].dc,\n                        text: o,\n                        chunkSize: 5000,\n                        chunkInterval: 10\n                    });\n                    //this.pcs[i].dc.send(o);\n                }\n            }\n        }\n    }, {\n        key: 'createConnection',\n        value: function createConnection(id) {\n            var _this = this;\n            var connection = new RTCPeerConnection();\n            _this.initDataChannel(connection);\n            connection.onicecandidate = function (e) {\n                if (!e.candidate || !e.candidate.sdpMid) {\n                    return;\n                }\n                _this.message.sendMessage({\n                    to: id,\n                    type: 'candidate',\n                    payload: {\n                        label: e.candidate && e.candidate.sdpMLineIndex,\n                        id: e.candidate && e.candidate.sdpMid,\n                        candidate: e.candidate && e.candidate.candidate\n                    }\n                });\n            };\n\n            connection.onnegotiationneeded = function () {\n                connection.createOffer({\n                    offerToReceiveAudio: 1,\n                    offerToReceiveVideo: 1\n                }).then(function (desc) {\n                    connection.setLocalDescription(desc).then(function () {\n                        _this.message.sendMessage({\n                            type: 'offer',\n                            payload: desc,\n                            to: id\n                        });\n                    });\n                });\n                connection.onnegotiationneeded = function () {};\n            };\n            connection.onremovestream = function () {\n                _this.closeConnection(id);\n            };\n            connection.oniceconnectionstatechange = function () {\n                switch (connection.iceConnectionState) {\n                    case \"closed\":\n                    case \"failed\":\n                    case \"disconnected\":\n                        _this.closeConnection(id);\n                        break;\n                }\n            };\n            connection.onsignalingstatechange = function (event) {\n                switch (connection.signalingState) {\n                    case \"closed\":\n                        _this.closeConnection(id);\n                        break;\n                }\n            };\n\n            connection.ondatachannel = function (event) {\n                var channel = event.channel;\n                channel.onopen = function (event) {\n                    channel.send('Hi back!');\n                };\n                channel.onmessage = function (event) {\n                    var data = JSON.parse(event.data);\n                    console.log(data);\n                };\n            };\n\n            _this.stream.getTracks().forEach(function (track) {\n                connection.addTrack(track, _this.stream);\n            });\n            /*setTimeout(function(){\n                _this.stream.getTracks().forEach(\n                    function(track) {\n                        connection.addTrack(\n                            track,\n                            _this.stream\n                        );\n                    }\n                );\n                connection.createOffer({\n                    offerToReceiveAudio: 1,\n                    offerToReceiveVideo: 1\n                }).then(function(desc){\n                    connection.setLocalDescription(desc).then(\n                        function() {\n                            _this.message.sendMessage({\n                                type:'offer',\n                                data:JSON.stringify(desc),\n                                to:id\n                            });\n                        }\n                    );\n                });\n             },1000)*/\n\n            return connection;\n        }\n    }, {\n        key: 'initRTCPeerConnection',\n        value: function initRTCPeerConnection() {\n            var _this = this;\n            var connection = this.connection;\n            connection.onicecandidate = function (e) {\n                _this.message.sendMessage({\n                    type: 'candidate',\n                    data: JSON.stringify(e.candidate)\n                });\n            };\n        }\n    }, {\n        key: 'createOff',\n        value: function createOff() {\n            var _this = this;\n            this.connection.createOffer({\n                offerToReceiveAudio: 1,\n                offerToReceiveVideo: 1\n            }).then(function (desc) {\n                _this.connection.setLocalDescription(desc).then(function () {\n                    _this.message.sendMessage({\n                        type: 'offer',\n                        data: JSON.stringify(desc),\n                        to: _this.id\n                    });\n                });\n            });\n        }\n    }, {\n        key: 'createAnswer',\n        value: function createAnswer() {\n            var _this = this;\n            this.connection.createAnswer().then(function (desc) {\n                _this.connection.setLocalDescription(desc).then(function () {\n                    _this.message.sendMessage({\n                        type: 'answer',\n                        data: JSON.stringify(desc),\n                        to: _this.id\n                    });\n                });\n            });\n        }\n    }, {\n        key: 'closeVideoCall',\n        value: function closeVideoCall() {\n            var remoteVideo = this.el;\n            if (this.isStart) {\n                if (this.stream) {\n                    this.stream.getTracks().forEach(function (track) {\n                        return track.stop();\n                    });\n                    this.stream = remoteVideo.srcObject = null;\n                }\n\n                for (var i in this.pcs) {\n                    if (this.pcs.hasOwnProperty(i)) {\n                        this.closeConnection(i);\n                    }\n                }\n\n                this.pcs = {};\n            }\n        }\n    }, {\n        key: 'closeConnection',\n        value: function closeConnection(id) {\n            var connection = this.pcs[id];\n            if (connection) {\n                connection.close();\n                connection = null;\n                delete this.pcs[id];\n            }\n        }\n    }]);\n\n    return MasterRTC;\n}();\n\nmodule.exports = MasterRTC;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by guominghui on 17/8/4.\n */\nvar Message = __webpack_require__(2);\nvar Receiver = __webpack_require__(1);\n\nvar SlaveRTC = function () {\n    function SlaveRTC(el) {\n        _classCallCheck(this, SlaveRTC);\n\n        this.el = el;\n        this.others = [];\n        this.connection = new RTCPeerConnection();\n        this.initRTCPeerConnection();\n        this.message = new Message(this.handleMessage());\n        this.initVideo();\n    }\n\n    _createClass(SlaveRTC, [{\n        key: 'initVideo',\n        value: function initVideo() {\n            var _this = this;\n            navigator.mediaDevices.getUserMedia({\n                audio: true,\n                video: true\n            }).then(function (stream) {\n                _this.stream = stream;\n                stream.getTracks().forEach(function (track) {\n                    if (track.kind == 'audio') {\n                        _this.connection.addTrack(track, stream);\n                    }\n                });\n            }).catch(function (e) {\n                console.log(e);\n            });\n            this.connection.ontrack = function (e) {\n                console.log(e.streams);\n                _this.el.srcObject = e.streams[0];\n            };\n        }\n    }, {\n        key: 'updateToMaster',\n        value: function updateToMaster() {\n            return {\n                message: this.message,\n                others: this.others,\n                id: this.id\n            };\n        }\n    }, {\n        key: 'handleMessage',\n        value: function handleMessage() {\n            var _this = this;\n            return function (msg) {\n                console.log(msg.type, msg.from);\n                var type = msg.type;\n                var data = void 0;\n                switch (type) {\n                    case 'id':\n                        _this.id = msg.data;\n                        console.log('id', msg);\n                        if (msg.masterId) {\n                            _this.masterId = msg.masterId;\n                        }\n                        break;\n                    case 'offer':\n                        msg.desc = msg.payload;\n                        _this.connection.setRemoteDescription(new RTCSessionDescription(msg.desc)).then().catch(function (e) {\n                            console.log(e);\n                        });\n                        _this.createAnswer();\n                        break;\n                    case 'answer':\n\n                        if (msg.data) {\n                            data = JSON.parse(msg.data);\n                        } else if (msg.payload) {\n                            data = JSON.parse(msg.payload);\n                        }\n                        _this.connection.setRemoteDescription(new RTCSessionDescription(data)).then();\n                        break;\n                    case 'candidate':\n\n                        data = msg.payload && {\n                            sdpMLineIndex: msg.payload.label,\n                            sdpMid: msg.payload.id,\n                            candidate: msg.payload.candidate\n                        };\n                        if (data) {\n                            var candidate = new RTCIceCandidate(data);\n                            _this.connection.addIceCandidate(candidate).then(function () {}).catch(function (e) {\n                                console.log(e);\n                            });\n                        }\n                        break;\n                    case 'other':\n                        if (msg.data) {\n                            _this.others = msg.data;\n                        }\n                        break;\n                    case 'otherjoin':\n\n                        _this.others.push(msg.data);\n                        break;\n                    case 'otherleave':\n                        var i = _this.others.indexOf(msg.data);\n                        if (i > -1) {\n                            _this.others.splice(i, 1);\n                        }\n                        break;\n                    case 'newmaster':\n                        _this.masterId = msg.data;\n                        break;\n                }\n            };\n        }\n    }, {\n        key: 'initRTCPeerConnection',\n        value: function initRTCPeerConnection() {\n            var _this = this;\n            var connection = this.connection;\n            connection.onicecandidate = function (e) {\n                _this.message.sendMessage({\n                    type: 'candidate',\n                    payload: {\n                        label: e.candidate && e.candidate.sdpMLineIndex,\n                        id: e.candidate && e.candidate.sdpMid,\n                        candidate: e.candidate && e.candidate.candidate\n                    },\n                    to: _this.masterId\n                });\n            };\n            connection.onremovestream = function () {\n                _this.closeVideoCall();\n            };\n            connection.oniceconnectionstatechange = function () {\n                switch (connection.iceConnectionState) {\n                    case \"closed\":\n                    case \"failed\":\n                    case \"disconnected\":\n                        _this.closeVideoCall();\n                        break;\n                }\n            };\n            connection.onsignalingstatechange = function (event) {\n                switch (connection.signalingState) {\n                    case \"closed\":\n                        _this.closeVideoCall();\n                        break;\n                }\n            };\n\n            connection.ondatachannel = function (event) {\n                var channel = event.channel;\n                channel.onopen = function (event) {\n                    channel.send('Hi back!');\n                };\n                channel.onmessage = function (event) {\n                    var data = JSON.parse(event.data);\n                    console.log(data);\n                    Receiver.receive(data, function (message) {\n                        /*let msg = JSON.parse(event.data);\n                        if(msg.type =='img'){\n                            let imgDom = document.getElementById('img');\n                            if(imgDom){\n                                imgDom.src = msg.data;\n                            }\n                        }*/\n                        console.log(message.data);\n                        if (message.type == 'img') {\n                            var imgDom = document.getElementById('img');\n                            if (imgDom) {\n                                imgDom.src = message.data;\n                            }\n                        }\n                    });\n                };\n            };\n        }\n    }, {\n        key: 'createOff',\n        value: function createOff() {\n            var _this = this;\n            this.connection.createOffer({\n                offerToReceiveAudio: 1,\n                offerToReceiveVideo: 1\n            }).then(function (desc) {\n                _this.connection.setLocalDescription(desc).then(function () {\n                    _this.message.sendMessage({\n                        type: 'offer',\n                        data: JSON.stringify(desc),\n                        id: _this.id\n                    });\n                });\n            });\n        }\n    }, {\n        key: 'createAnswer',\n        value: function createAnswer() {\n            var _this = this;\n            this.connection.createAnswer().then(function (desc) {\n                _this.connection.setLocalDescription(desc).then(function () {\n                    _this.message.sendMessage({\n                        type: 'answer',\n                        payload: desc,\n                        to: _this.masterId\n                    });\n                });\n            });\n        }\n    }, {\n        key: 'closeVideoCall',\n        value: function closeVideoCall() {\n            var remoteVideo = this.el;\n            if (this.connection) {\n                if (this.stream) {\n                    this.stream.getTracks().forEach(function (track) {\n                        return track.stop();\n                    });\n                    this.stream = remoteVideo.srcObject = null;\n                }\n\n                this.connection.close();\n                this.connection = null;\n            }\n        }\n    }]);\n\n    return SlaveRTC;\n}();\n\nmodule.exports = SlaveRTC;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by guominghui on 17/8/15.\n */\nvar Drawer = function () {\n    function Drawer(config) {\n        _classCallCheck(this, Drawer);\n\n        this.dom = config.dom;\n        this.config = config;\n    }\n\n    _createClass(Drawer, [{\n        key: \"init\",\n        value: function init() {\n            var canvas = this.dom;\n            if (canvas.getContext) {\n                //支持\n                this.ctx = canvas.getContext('2d');\n                // drawing code here\n            } else {\n                //不支持\n                // canvas-unsupported code here\n                console.log(\"canvas-unsupported code here\");\n            }\n\n            this.width = canvas.width = this.config.width;\n            this.height = canvas.height = this.config.height;\n            var isDrawing = false;\n            var lastX = 0;\n            var lastY = 0;\n            this.ctx.lineWidth = this.config.lineWidth || 4;\n            this.ctx.lineCap = \"round\";\n            this.ctx.lineJoin = \"round\";\n            this.ctx.strokeStyle = this.config.color || \"#f00\";\n            var ctx = this.ctx;\n            var x = 0;\n            var y = 0;\n            function draw(e) {\n                if (!isDrawing) return;\n                x = e.offsetX;\n                y = e.offsetY;\n                //\t\t控制绘制路径\n                ctx.beginPath();\n                ctx.moveTo(lastX, lastY);\n                ctx.lineTo(x, y);\n                ctx.stroke();\n                lastX = x;\n                lastY = y;\n            }\n            canvas.addEventListener('mousedown', function (e) {\n                isDrawing = true;\n                var _ref = [e.offsetX, e.offsetY];\n                lastX = _ref[0];\n                lastY = _ref[1];\n            });\n            canvas.addEventListener('mousemove', draw);\n            canvas.addEventListener('mouseup', function () {\n                return isDrawing = false;\n            });\n            canvas.addEventListener('mouseout', function () {\n                return isDrawing = false;\n            });\n        }\n    }, {\n        key: \"clear\",\n        value: function clear() {\n            this.ctx.clearRect(0, 0, this.width, this.height);\n        }\n    }, {\n        key: \"changeWidth\",\n        value: function changeWidth(lineWidth) {\n            if (lineWidth && typeof lineWidth == 'number' && lineWidth > 0) {\n                this.ctx.lineWidth = lineWidth;\n            }\n        }\n    }, {\n        key: \"changeColor\",\n        value: function changeColor(color) {\n            if (color) {\n                this.ctx.strokeStyle = color;\n            }\n        }\n    }, {\n        key: \"destroy\",\n        value: function destroy() {\n            var canvas = this.dom;\n            canvas.removeEventListener('mousemove');\n            canvas.removeEventListener('mousedown');\n            canvas.removeEventListener('mouseup');\n            canvas.removeEventListener('mouseout');\n        }\n    }, {\n        key: \"toImg\",\n        value: function toImg() {\n            return this.dom.toDataURL('image/png');\n        }\n    }]);\n\n    return Drawer;\n}();\n\nmodule.exports = Drawer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY2FudmFzLmpzPzk5OWYiXSwibmFtZXMiOlsiRHJhd2VyIiwiY29uZmlnIiwiZG9tIiwiY2FudmFzIiwiZ2V0Q29udGV4dCIsImN0eCIsImNvbnNvbGUiLCJsb2ciLCJ3aWR0aCIsImhlaWdodCIsImlzRHJhd2luZyIsImxhc3RYIiwibGFzdFkiLCJsaW5lV2lkdGgiLCJsaW5lQ2FwIiwibGluZUpvaW4iLCJzdHJva2VTdHlsZSIsImNvbG9yIiwieCIsInkiLCJkcmF3IiwiZSIsIm9mZnNldFgiLCJvZmZzZXRZIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsZWFyUmVjdCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0b0RhdGFVUkwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7O0lBR01BLE07QUFDRixvQkFBWUMsTUFBWixFQUFtQjtBQUFBOztBQUNmLGFBQUtDLEdBQUwsR0FBV0QsT0FBT0MsR0FBbEI7QUFDQSxhQUFLRCxNQUFMLEdBQWNBLE1BQWQ7QUFDSDs7OzsrQkFDSztBQUNGLGdCQUFJRSxTQUFTLEtBQUtELEdBQWxCO0FBQ0EsZ0JBQUlDLE9BQU9DLFVBQVgsRUFBdUI7QUFDbkI7QUFDQSxxQkFBS0MsR0FBTCxHQUFXRixPQUFPQyxVQUFQLENBQWtCLElBQWxCLENBQVg7QUFDQTtBQUNILGFBSkQsTUFJTztBQUNIO0FBQ0E7QUFDQUUsd0JBQVFDLEdBQVIsQ0FBWSw4QkFBWjtBQUNIOztBQUVELGlCQUFLQyxLQUFMLEdBQWFMLE9BQU9LLEtBQVAsR0FBZSxLQUFLUCxNQUFMLENBQVlPLEtBQXhDO0FBQ0EsaUJBQUtDLE1BQUwsR0FBY04sT0FBT00sTUFBUCxHQUFnQixLQUFLUixNQUFMLENBQVlRLE1BQTFDO0FBQ0EsZ0JBQUlDLFlBQVksS0FBaEI7QUFDQSxnQkFBSUMsUUFBUSxDQUFaO0FBQ0EsZ0JBQUlDLFFBQVEsQ0FBWjtBQUNBLGlCQUFLUCxHQUFMLENBQVNRLFNBQVQsR0FBcUIsS0FBS1osTUFBTCxDQUFZWSxTQUFaLElBQXVCLENBQTVDO0FBQ0EsaUJBQUtSLEdBQUwsQ0FBU1MsT0FBVCxHQUFtQixPQUFuQjtBQUNBLGlCQUFLVCxHQUFMLENBQVNVLFFBQVQsR0FBb0IsT0FBcEI7QUFDQSxpQkFBS1YsR0FBTCxDQUFTVyxXQUFULEdBQXVCLEtBQUtmLE1BQUwsQ0FBWWdCLEtBQVosSUFBbUIsTUFBMUM7QUFDQSxnQkFBSVosTUFBTSxLQUFLQSxHQUFmO0FBQ0EsZ0JBQUlhLElBQUksQ0FBUjtBQUNBLGdCQUFJQyxJQUFJLENBQVI7QUFDQSxxQkFBU0MsSUFBVCxDQUFjQyxDQUFkLEVBQWlCO0FBQ2Isb0JBQUksQ0FBQ1gsU0FBTCxFQUFnQjtBQUNoQlEsb0JBQUlHLEVBQUVDLE9BQU47QUFDQUgsb0JBQUlFLEVBQUVFLE9BQU47QUFDQTtBQUNBbEIsb0JBQUltQixTQUFKO0FBQ0FuQixvQkFBSW9CLE1BQUosQ0FBV2QsS0FBWCxFQUFrQkMsS0FBbEI7QUFDQVAsb0JBQUlxQixNQUFKLENBQVdSLENBQVgsRUFBY0MsQ0FBZDtBQUNBZCxvQkFBSXNCLE1BQUo7QUFDQ2hCLHFCQVRZLEdBU0tPLENBVEw7QUFTTE4scUJBVEssR0FTUU8sQ0FUUjtBQVVoQjtBQUNEaEIsbUJBQU95QixnQkFBUCxDQUF3QixXQUF4QixFQUFxQyxVQUFDUCxDQUFELEVBQU87QUFDeENYLDRCQUFZLElBQVo7QUFEd0MsMkJBRXZCLENBQUNXLEVBQUVDLE9BQUgsRUFBWUQsRUFBRUUsT0FBZCxDQUZ1QjtBQUV2Q1oscUJBRnVDO0FBRWhDQyxxQkFGZ0M7QUFHM0MsYUFIRDtBQUlBVCxtQkFBT3lCLGdCQUFQLENBQXdCLFdBQXhCLEVBQXFDUixJQUFyQztBQUNBakIsbUJBQU95QixnQkFBUCxDQUF3QixTQUF4QixFQUFtQztBQUFBLHVCQUFNbEIsWUFBWSxLQUFsQjtBQUFBLGFBQW5DO0FBQ0FQLG1CQUFPeUIsZ0JBQVAsQ0FBd0IsVUFBeEIsRUFBb0M7QUFBQSx1QkFBTWxCLFlBQVksS0FBbEI7QUFBQSxhQUFwQztBQUNIOzs7Z0NBQ007QUFDSCxpQkFBS0wsR0FBTCxDQUFTd0IsU0FBVCxDQUFtQixDQUFuQixFQUFzQixDQUF0QixFQUF5QixLQUFLckIsS0FBOUIsRUFBcUMsS0FBS0MsTUFBMUM7QUFDSDs7O29DQUNXSSxTLEVBQVU7QUFDbEIsZ0JBQUdBLGFBQWEsT0FBT0EsU0FBUCxJQUFvQixRQUFqQyxJQUE2Q0EsWUFBWSxDQUE1RCxFQUE4RDtBQUMxRCxxQkFBS1IsR0FBTCxDQUFTUSxTQUFULEdBQXFCQSxTQUFyQjtBQUNIO0FBQ0o7OztvQ0FDV0ksSyxFQUFNO0FBQ2QsZ0JBQUdBLEtBQUgsRUFBUztBQUNMLHFCQUFLWixHQUFMLENBQVNXLFdBQVQsR0FBdUJDLEtBQXZCO0FBQ0g7QUFDSjs7O2tDQUNRO0FBQ0wsZ0JBQUlkLFNBQVMsS0FBS0QsR0FBbEI7QUFDQUMsbUJBQU8yQixtQkFBUCxDQUEyQixXQUEzQjtBQUNBM0IsbUJBQU8yQixtQkFBUCxDQUEyQixXQUEzQjtBQUNBM0IsbUJBQU8yQixtQkFBUCxDQUEyQixTQUEzQjtBQUNBM0IsbUJBQU8yQixtQkFBUCxDQUEyQixVQUEzQjtBQUNIOzs7Z0NBQ007QUFDSCxtQkFBTyxLQUFLNUIsR0FBTCxDQUFTNkIsU0FBVCxDQUFtQixXQUFuQixDQUFQO0FBQ0g7Ozs7OztBQUdMQyxPQUFPQyxPQUFQLEdBQWlCakMsTUFBakIiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSBndW9taW5naHVpIG9uIDE3LzgvMTUuXG4gKi9cbmNsYXNzIERyYXdlcntcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpe1xuICAgICAgICB0aGlzLmRvbSA9IGNvbmZpZy5kb207XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIGxldCBjYW52YXMgPSB0aGlzLmRvbTtcbiAgICAgICAgaWYgKGNhbnZhcy5nZXRDb250ZXh0KSB7XG4gICAgICAgICAgICAvL+aUr+aMgVxuICAgICAgICAgICAgdGhpcy5jdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIC8vIGRyYXdpbmcgY29kZSBoZXJlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL+S4jeaUr+aMgVxuICAgICAgICAgICAgLy8gY2FudmFzLXVuc3VwcG9ydGVkIGNvZGUgaGVyZVxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjYW52YXMtdW5zdXBwb3J0ZWQgY29kZSBoZXJlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy53aWR0aCA9IGNhbnZhcy53aWR0aCA9IHRoaXMuY29uZmlnLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGNhbnZhcy5oZWlnaHQgPSB0aGlzLmNvbmZpZy5oZWlnaHQ7XG4gICAgICAgIGxldCBpc0RyYXdpbmcgPSBmYWxzZTtcbiAgICAgICAgbGV0IGxhc3RYID0gMDtcbiAgICAgICAgbGV0IGxhc3RZID0gMDtcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gdGhpcy5jb25maWcubGluZVdpZHRofHw0O1xuICAgICAgICB0aGlzLmN0eC5saW5lQ2FwID0gXCJyb3VuZFwiO1xuICAgICAgICB0aGlzLmN0eC5saW5lSm9pbiA9IFwicm91bmRcIjtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmNvbmZpZy5jb2xvcnx8XCIjZjAwXCI7XG4gICAgICAgIGxldCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgbGV0IHggPSAwO1xuICAgICAgICBsZXQgeSA9IDA7XG4gICAgICAgIGZ1bmN0aW9uIGRyYXcoZSkge1xuICAgICAgICAgICAgaWYgKCFpc0RyYXdpbmcpIHJldHVybjtcbiAgICAgICAgICAgIHggPSBlLm9mZnNldFg7XG4gICAgICAgICAgICB5ID0gZS5vZmZzZXRZO1xuICAgICAgICAgICAgLy9cdFx05o6n5Yi257uY5Yi26Lev5b6EXG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKGxhc3RYLCBsYXN0WSk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHgsIHkpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgW2xhc3RYLCBsYXN0WV0gPSBbeCwgeV07XG4gICAgICAgIH1cbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChlKSA9PiB7XG4gICAgICAgICAgICBpc0RyYXdpbmcgPSB0cnVlO1xuICAgICAgICAgICAgW2xhc3RYLCBsYXN0WV0gPSBbZS5vZmZzZXRYLCBlLm9mZnNldFldO1xuICAgICAgICB9KTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGRyYXcpO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICgpID0+IGlzRHJhd2luZyA9IGZhbHNlKTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgKCkgPT4gaXNEcmF3aW5nID0gZmFsc2UpO1xuICAgIH1cbiAgICBjbGVhcigpe1xuICAgICAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgIH1cbiAgICBjaGFuZ2VXaWR0aChsaW5lV2lkdGgpe1xuICAgICAgICBpZihsaW5lV2lkdGggJiYgdHlwZW9mIGxpbmVXaWR0aCA9PSAnbnVtYmVyJyAmJiBsaW5lV2lkdGggPiAwKXtcbiAgICAgICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGFuZ2VDb2xvcihjb2xvcil7XG4gICAgICAgIGlmKGNvbG9yKXtcbiAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVzdHJveSgpe1xuICAgICAgICBsZXQgY2FudmFzID0gdGhpcy5kb207XG4gICAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnKTtcbiAgICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicpO1xuICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcpO1xuICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnKTtcbiAgICB9XG4gICAgdG9JbWcoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tLnRvRGF0YVVSTCgnaW1hZ2UvcG5nJyk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERyYXdlcjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9jYW52YXMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Created by guominghui on 17/8/4.\n */\nvar id = 1;\nfunction getId() {\n  return id++;\n}\nmodule.exports = getId;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaWQuanM/NmI1NyJdLCJuYW1lcyI6WyJpZCIsImdldElkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7O0FBR0EsSUFBSUEsS0FBSyxDQUFUO0FBQ0EsU0FBU0MsS0FBVCxHQUFnQjtBQUNaLFNBQU9ELElBQVA7QUFDSDtBQUNERSxPQUFPQyxPQUFQLEdBQWlCRixLQUFqQiIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IGd1b21pbmdodWkgb24gMTcvOC80LlxuICovXG5sZXQgaWQgPSAxO1xuZnVuY3Rpb24gZ2V0SWQoKXtcbiAgICByZXR1cm4gaWQrKztcbn1cbm1vZHVsZS5leHBvcnRzID0gZ2V0SWQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2lkLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar util = __webpack_require__(3);\nvar TextSender = {\n    send: function send(config) {\n        var channel = config.channel;\n        var initialText = config.text;\n        var packetSize = config.chunkSize || 1000;\n        var textToTransfer = '';\n        var isobject = '0';\n\n        if (typeof initialText !== 'string') {\n            isobject = '1';\n            initialText = JSON.stringify(initialText);\n        }\n\n        // uuid is used to uniquely identify sending instance\n        var uuid = util.getRandomString();\n        var sendingTime = new Date().getTime();\n\n        sendText(initialText);\n\n        function sendText(textMessage, text) {\n            var data = {\n                type: 'text',\n                uuid: uuid,\n                sendingTime: sendingTime\n            };\n\n            if (textMessage) {\n                text = textMessage;\n                data.packets = parseInt(text.length / packetSize);\n            }\n\n            if (text.length > packetSize) {\n                data.message = text.slice(0, packetSize);\n                data.last = '0';\n                data.isobject = isobject;\n            } else {\n                data.message = text;\n                data.last = '1';\n                data.isobject = isobject;\n            }\n            if (channel.readyState === 'open') {\n                channel.send(JSON.stringify(data));\n            }\n            textToTransfer = text.slice(data.message.length);\n\n            if (textToTransfer.length) {\n                setTimeout(function () {\n                    sendText(null, textToTransfer);\n                }, config.chunkInterval || 100);\n            }\n        }\n    }\n};\n\nmodule.exports = TextSender;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvVGV4dFNlbmRlci5qcz8yYjA3Il0sIm5hbWVzIjpbInV0aWwiLCJyZXF1aXJlIiwiVGV4dFNlbmRlciIsInNlbmQiLCJjb25maWciLCJjaGFubmVsIiwiaW5pdGlhbFRleHQiLCJ0ZXh0IiwicGFja2V0U2l6ZSIsImNodW5rU2l6ZSIsInRleHRUb1RyYW5zZmVyIiwiaXNvYmplY3QiLCJKU09OIiwic3RyaW5naWZ5IiwidXVpZCIsImdldFJhbmRvbVN0cmluZyIsInNlbmRpbmdUaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJzZW5kVGV4dCIsInRleHRNZXNzYWdlIiwiZGF0YSIsInR5cGUiLCJwYWNrZXRzIiwicGFyc2VJbnQiLCJsZW5ndGgiLCJtZXNzYWdlIiwic2xpY2UiLCJsYXN0IiwicmVhZHlTdGF0ZSIsInNldFRpbWVvdXQiLCJjaHVua0ludGVydmFsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxPQUFPLG1CQUFBQyxDQUFRLENBQVIsQ0FBWDtBQUNBLElBQUlDLGFBQWE7QUFDYkMsVUFBTSxjQUFTQyxNQUFULEVBQWlCO0FBQ25CLFlBQUlDLFVBQVVELE9BQU9DLE9BQXJCO0FBQ0EsWUFBSUMsY0FBY0YsT0FBT0csSUFBekI7QUFDQSxZQUFJQyxhQUFhSixPQUFPSyxTQUFQLElBQW9CLElBQXJDO0FBQ0EsWUFBSUMsaUJBQWlCLEVBQXJCO0FBQ0EsWUFBSUMsV0FBVyxHQUFmOztBQUVBLFlBQUksT0FBT0wsV0FBUCxLQUF1QixRQUEzQixFQUFxQztBQUNqQ0ssdUJBQVcsR0FBWDtBQUNBTCwwQkFBY00sS0FBS0MsU0FBTCxDQUFlUCxXQUFmLENBQWQ7QUFDSDs7QUFFRDtBQUNBLFlBQUlRLE9BQU9kLEtBQUtlLGVBQUwsRUFBWDtBQUNBLFlBQUlDLGNBQWMsSUFBSUMsSUFBSixHQUFXQyxPQUFYLEVBQWxCOztBQUVBQyxpQkFBU2IsV0FBVDs7QUFFQSxpQkFBU2EsUUFBVCxDQUFrQkMsV0FBbEIsRUFBK0JiLElBQS9CLEVBQXFDO0FBQ2pDLGdCQUFJYyxPQUFPO0FBQ1BDLHNCQUFNLE1BREM7QUFFUFIsc0JBQU1BLElBRkM7QUFHUEUsNkJBQWFBO0FBSE4sYUFBWDs7QUFNQSxnQkFBSUksV0FBSixFQUFpQjtBQUNiYix1QkFBT2EsV0FBUDtBQUNBQyxxQkFBS0UsT0FBTCxHQUFlQyxTQUFTakIsS0FBS2tCLE1BQUwsR0FBY2pCLFVBQXZCLENBQWY7QUFDSDs7QUFFRCxnQkFBSUQsS0FBS2tCLE1BQUwsR0FBY2pCLFVBQWxCLEVBQThCO0FBQzFCYSxxQkFBS0ssT0FBTCxHQUFlbkIsS0FBS29CLEtBQUwsQ0FBVyxDQUFYLEVBQWNuQixVQUFkLENBQWY7QUFDQWEscUJBQUtPLElBQUwsR0FBWSxHQUFaO0FBQ0FQLHFCQUFLVixRQUFMLEdBQWdCQSxRQUFoQjtBQUNILGFBSkQsTUFJTztBQUNIVSxxQkFBS0ssT0FBTCxHQUFlbkIsSUFBZjtBQUNBYyxxQkFBS08sSUFBTCxHQUFZLEdBQVo7QUFDQVAscUJBQUtWLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0g7QUFDRCxnQkFBSU4sUUFBUXdCLFVBQVIsS0FBdUIsTUFBM0IsRUFBbUM7QUFDL0J4Qix3QkFBUUYsSUFBUixDQUFhUyxLQUFLQyxTQUFMLENBQWVRLElBQWYsQ0FBYjtBQUNIO0FBQ0RYLDZCQUFpQkgsS0FBS29CLEtBQUwsQ0FBV04sS0FBS0ssT0FBTCxDQUFhRCxNQUF4QixDQUFqQjs7QUFFQSxnQkFBSWYsZUFBZWUsTUFBbkIsRUFBMkI7QUFDdkJLLDJCQUFXLFlBQVc7QUFDbEJYLDZCQUFTLElBQVQsRUFBZVQsY0FBZjtBQUNILGlCQUZELEVBRUdOLE9BQU8yQixhQUFQLElBQXdCLEdBRjNCO0FBR0g7QUFDSjtBQUNKO0FBbkRZLENBQWpCOztBQXNEQUMsT0FBT0MsT0FBUCxHQUFpQi9CLFVBQWpCIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xubGV0IFRleHRTZW5kZXIgPSB7XG4gICAgc2VuZDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gY29uZmlnLmNoYW5uZWw7XG4gICAgICAgIHZhciBpbml0aWFsVGV4dCA9IGNvbmZpZy50ZXh0O1xuICAgICAgICB2YXIgcGFja2V0U2l6ZSA9IGNvbmZpZy5jaHVua1NpemUgfHwgMTAwMDtcbiAgICAgICAgdmFyIHRleHRUb1RyYW5zZmVyID0gJyc7XG4gICAgICAgIHZhciBpc29iamVjdCA9ICcwJztcblxuICAgICAgICBpZiAodHlwZW9mIGluaXRpYWxUZXh0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaXNvYmplY3QgPSAnMSc7XG4gICAgICAgICAgICBpbml0aWFsVGV4dCA9IEpTT04uc3RyaW5naWZ5KGluaXRpYWxUZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHV1aWQgaXMgdXNlZCB0byB1bmlxdWVseSBpZGVudGlmeSBzZW5kaW5nIGluc3RhbmNlXG4gICAgICAgIHZhciB1dWlkID0gdXRpbC5nZXRSYW5kb21TdHJpbmcoKTtcbiAgICAgICAgdmFyIHNlbmRpbmdUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgICAgICAgc2VuZFRleHQoaW5pdGlhbFRleHQpO1xuXG4gICAgICAgIGZ1bmN0aW9uIHNlbmRUZXh0KHRleHRNZXNzYWdlLCB0ZXh0KSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgdXVpZDogdXVpZCxcbiAgICAgICAgICAgICAgICBzZW5kaW5nVGltZTogc2VuZGluZ1RpbWVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICh0ZXh0TWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0TWVzc2FnZTtcbiAgICAgICAgICAgICAgICBkYXRhLnBhY2tldHMgPSBwYXJzZUludCh0ZXh0Lmxlbmd0aCAvIHBhY2tldFNpemUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGV4dC5sZW5ndGggPiBwYWNrZXRTaXplKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5tZXNzYWdlID0gdGV4dC5zbGljZSgwLCBwYWNrZXRTaXplKTtcbiAgICAgICAgICAgICAgICBkYXRhLmxhc3QgPSAnMCc7XG4gICAgICAgICAgICAgICAgZGF0YS5pc29iamVjdCA9IGlzb2JqZWN0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhLm1lc3NhZ2UgPSB0ZXh0O1xuICAgICAgICAgICAgICAgIGRhdGEubGFzdCA9ICcxJztcbiAgICAgICAgICAgICAgICBkYXRhLmlzb2JqZWN0ID0gaXNvYmplY3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hhbm5lbC5yZWFkeVN0YXRlID09PSAnb3BlbicpIHtcbiAgICAgICAgICAgICAgICBjaGFubmVsLnNlbmQoSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGV4dFRvVHJhbnNmZXIgPSB0ZXh0LnNsaWNlKGRhdGEubWVzc2FnZS5sZW5ndGgpO1xuXG4gICAgICAgICAgICBpZiAodGV4dFRvVHJhbnNmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VuZFRleHQobnVsbCwgdGV4dFRvVHJhbnNmZXIpO1xuICAgICAgICAgICAgICAgIH0sIGNvbmZpZy5jaHVua0ludGVydmFsIHx8IDEwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRleHRTZW5kZXI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvVGV4dFNlbmRlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Created by guominghui on 17/8/8.\n */\nvar config = {\n  socketServer: 'http://localhost:3001'\n};\nmodule.exports = config;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY29uZmlnLmpzP2MzNmMiXSwibmFtZXMiOlsiY29uZmlnIiwic29ja2V0U2VydmVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7O0FBR0EsSUFBSUEsU0FBUztBQUNUQyxnQkFBYTtBQURKLENBQWI7QUFHQUMsT0FBT0MsT0FBUCxHQUFpQkgsTUFBakIiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSBndW9taW5naHVpIG9uIDE3LzgvOC5cbiAqL1xubGV0IGNvbmZpZyA9IHtcbiAgICBzb2NrZXRTZXJ2ZXI6J2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMSdcbn1cbm1vZHVsZS5leHBvcnRzID0gY29uZmlnO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbmZpZy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Created by guominghui on 17/8/4.\n */\nvar SlaveRTC = __webpack_require__(5);\nvar MasterRTC = __webpack_require__(4);\nvar Drawer = __webpack_require__(6);\nvar getId = __webpack_require__(7);\nwindow.onload = function () {\n    var videoDomSelf = document.querySelector('#self');\n    //let videoDomOther = document.querySelector('#other');\n    var self = void 0;\n    var masterbtn = document.querySelector('#masterbtn');\n    var slavebtn = document.querySelector('#slavebtn');\n    var closebtn = document.querySelector('#closebtn');\n    var printbtn = document.querySelector('#printbtn');\n    var drawbtn = document.querySelector('#drawbtn');\n    var clearbtn = document.querySelector('#clearbtn');\n    masterbtn.onclick = function () {\n        if (self instanceof MasterRTC) {\n            return;\n        }\n        var slave = self.updateToMaster();\n        self = new MasterRTC(videoDomSelf, slave);\n        self.createConnections();\n        //self.initVideo();\n    };\n    slavebtn.onclick = function () {\n        self = new SlaveRTC(videoDomSelf);\n        //self.initVideo();\n    };\n    closebtn.onclick = function () {\n        self && self.closeVideoCall();\n        //self.initVideo();\n    };\n    printbtn.onclick = function () {\n        var video = document.getElementById(\"self\"); //获取前台要截图的video对象，\n        var canvas = document.getElementById('canvas'); //获取前台的canvas对象，用于作图\n        var ctx = canvas.getContext('2d'); //设置canvas绘制2d图，\n        var width = 480; //设置canvas宽\n        var height = 270; //设置canvas高\n        canvas.width = width;\n        canvas.height = height;\n        ctx.drawImage(video, 0, 0, width, height); //将video视频绘制到canvas中\n        //self.initVideo();\n        var images = canvas.toDataURL('image/png');\n        self.drawImg(images);\n    };\n    var canvas = document.getElementById('drawcanvas');\n    var drawer = new Drawer({ dom: canvas, width: 200, height: 200 });\n    drawbtn.onclick = function () {\n        drawer.init();\n        var type = [{\n            color: '#f00',\n            lineWidth: 4\n        }, {\n            color: '#0f0',\n            lineWidth: 6\n        }, {\n            color: '#00f',\n            lineWidth: 8\n        }];\n        var times = 0;\n        setInterval(function () {\n            var obj = type[times % 3];\n            times++;\n            drawer.changeColor(obj.color);\n            drawer.changeWidth(obj.lineWidth);\n        }, 2000);\n    };\n    clearbtn.onclick = function () {\n        console.log(drawer.toImg().length);\n        drawer.clear();\n    };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW5kZXguanM/ZGFkYyJdLCJuYW1lcyI6WyJTbGF2ZVJUQyIsInJlcXVpcmUiLCJNYXN0ZXJSVEMiLCJEcmF3ZXIiLCJnZXRJZCIsIndpbmRvdyIsIm9ubG9hZCIsInZpZGVvRG9tU2VsZiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInNlbGYiLCJtYXN0ZXJidG4iLCJzbGF2ZWJ0biIsImNsb3NlYnRuIiwicHJpbnRidG4iLCJkcmF3YnRuIiwiY2xlYXJidG4iLCJvbmNsaWNrIiwic2xhdmUiLCJ1cGRhdGVUb01hc3RlciIsImNyZWF0ZUNvbm5lY3Rpb25zIiwiY2xvc2VWaWRlb0NhbGwiLCJ2aWRlbyIsImdldEVsZW1lbnRCeUlkIiwiY2FudmFzIiwiY3R4IiwiZ2V0Q29udGV4dCIsIndpZHRoIiwiaGVpZ2h0IiwiZHJhd0ltYWdlIiwiaW1hZ2VzIiwidG9EYXRhVVJMIiwiZHJhd0ltZyIsImRyYXdlciIsImRvbSIsImluaXQiLCJ0eXBlIiwiY29sb3IiLCJsaW5lV2lkdGgiLCJ0aW1lcyIsInNldEludGVydmFsIiwib2JqIiwiY2hhbmdlQ29sb3IiLCJjaGFuZ2VXaWR0aCIsImNvbnNvbGUiLCJsb2ciLCJ0b0ltZyIsImxlbmd0aCIsImNsZWFyIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7QUFHQSxJQUFJQSxXQUFXLG1CQUFBQyxDQUFRLENBQVIsQ0FBZjtBQUNBLElBQUlDLFlBQVksbUJBQUFELENBQVEsQ0FBUixDQUFoQjtBQUNBLElBQUlFLFNBQVMsbUJBQUFGLENBQVEsQ0FBUixDQUFiO0FBQ0EsSUFBSUcsUUFBUSxtQkFBQUgsQ0FBUSxDQUFSLENBQVo7QUFDQUksT0FBT0MsTUFBUCxHQUFnQixZQUFVO0FBQ3RCLFFBQUlDLGVBQWVDLFNBQVNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBbkI7QUFDQTtBQUNBLFFBQUlDLGFBQUo7QUFDQSxRQUFJQyxZQUFZSCxTQUFTQyxhQUFULENBQXVCLFlBQXZCLENBQWhCO0FBQ0EsUUFBSUcsV0FBV0osU0FBU0MsYUFBVCxDQUF1QixXQUF2QixDQUFmO0FBQ0EsUUFBSUksV0FBV0wsU0FBU0MsYUFBVCxDQUF1QixXQUF2QixDQUFmO0FBQ0EsUUFBSUssV0FBV04sU0FBU0MsYUFBVCxDQUF1QixXQUF2QixDQUFmO0FBQ0EsUUFBSU0sVUFBVVAsU0FBU0MsYUFBVCxDQUF1QixVQUF2QixDQUFkO0FBQ0EsUUFBSU8sV0FBV1IsU0FBU0MsYUFBVCxDQUF1QixXQUF2QixDQUFmO0FBQ0FFLGNBQVVNLE9BQVYsR0FBb0IsWUFBVTtBQUMxQixZQUFHUCxnQkFBZ0JSLFNBQW5CLEVBQTZCO0FBQ3pCO0FBQ0g7QUFDRCxZQUFJZ0IsUUFBUVIsS0FBS1MsY0FBTCxFQUFaO0FBQ0FULGVBQU8sSUFBSVIsU0FBSixDQUFjSyxZQUFkLEVBQTJCVyxLQUEzQixDQUFQO0FBQ0FSLGFBQUtVLGlCQUFMO0FBQ0E7QUFDSCxLQVJEO0FBU0FSLGFBQVNLLE9BQVQsR0FBbUIsWUFBVTtBQUN6QlAsZUFBTyxJQUFJVixRQUFKLENBQWFPLFlBQWIsQ0FBUDtBQUNBO0FBQ0gsS0FIRDtBQUlBTSxhQUFTSSxPQUFULEdBQW1CLFlBQVU7QUFDekJQLGdCQUFRQSxLQUFLVyxjQUFMLEVBQVI7QUFDQTtBQUNILEtBSEQ7QUFJQVAsYUFBU0csT0FBVCxHQUFtQixZQUFVO0FBQ3pCLFlBQUlLLFFBQVFkLFNBQVNlLGNBQVQsQ0FBd0IsTUFBeEIsQ0FBWixDQUR5QixDQUNtQjtBQUM1QyxZQUFJQyxTQUFTaEIsU0FBU2UsY0FBVCxDQUF3QixRQUF4QixDQUFiLENBRnlCLENBRXNCO0FBQy9DLFlBQUlFLE1BQU1ELE9BQU9FLFVBQVAsQ0FBa0IsSUFBbEIsQ0FBVixDQUh5QixDQUdTO0FBQ2xDLFlBQUlDLFFBQVEsR0FBWixDQUp5QixDQUlUO0FBQ2hCLFlBQUlDLFNBQVMsR0FBYixDQUx5QixDQUtSO0FBQ2pCSixlQUFPRyxLQUFQLEdBQWVBLEtBQWY7QUFDQUgsZUFBT0ksTUFBUCxHQUFnQkEsTUFBaEI7QUFDQUgsWUFBSUksU0FBSixDQUFjUCxLQUFkLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCSyxLQUEzQixFQUFrQ0MsTUFBbEMsRUFSeUIsQ0FRaUI7QUFDMUM7QUFDQSxZQUFJRSxTQUFTTixPQUFPTyxTQUFQLENBQWlCLFdBQWpCLENBQWI7QUFDQXJCLGFBQUtzQixPQUFMLENBQWFGLE1BQWI7QUFDSCxLQVpEO0FBYUEsUUFBSU4sU0FBU2hCLFNBQVNlLGNBQVQsQ0FBd0IsWUFBeEIsQ0FBYjtBQUNBLFFBQUlVLFNBQVMsSUFBSTlCLE1BQUosQ0FBVyxFQUFDK0IsS0FBSVYsTUFBTCxFQUFZRyxPQUFNLEdBQWxCLEVBQXNCQyxRQUFPLEdBQTdCLEVBQVgsQ0FBYjtBQUNBYixZQUFRRSxPQUFSLEdBQWtCLFlBQVU7QUFDeEJnQixlQUFPRSxJQUFQO0FBQ0EsWUFBSUMsT0FBTSxDQUFDO0FBQ1BDLG1CQUFNLE1BREM7QUFFUEMsdUJBQVU7QUFGSCxTQUFELEVBR1I7QUFDRUQsbUJBQU0sTUFEUjtBQUVFQyx1QkFBVTtBQUZaLFNBSFEsRUFPTjtBQUNJRCxtQkFBTSxNQURWO0FBRUlDLHVCQUFVO0FBRmQsU0FQTSxDQUFWO0FBV0EsWUFBSUMsUUFBUSxDQUFaO0FBQ0FDLG9CQUFZLFlBQVU7QUFDbEIsZ0JBQUlDLE1BQU1MLEtBQUtHLFFBQU0sQ0FBWCxDQUFWO0FBQ0FBO0FBQ0FOLG1CQUFPUyxXQUFQLENBQW1CRCxJQUFJSixLQUF2QjtBQUNBSixtQkFBT1UsV0FBUCxDQUFtQkYsSUFBSUgsU0FBdkI7QUFDSCxTQUxELEVBS0UsSUFMRjtBQU1ILEtBcEJEO0FBcUJBdEIsYUFBU0MsT0FBVCxHQUFtQixZQUFVO0FBQ3pCMkIsZ0JBQVFDLEdBQVIsQ0FBWVosT0FBT2EsS0FBUCxHQUFlQyxNQUEzQjtBQUNBZCxlQUFPZSxLQUFQO0FBQ0gsS0FIRDtBQUtILENBcEVEIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IGd1b21pbmdodWkgb24gMTcvOC80LlxuICovXG5sZXQgU2xhdmVSVEMgPSByZXF1aXJlKCcuL1NsYXZlUlRDLmpzJyk7XG5sZXQgTWFzdGVyUlRDID0gcmVxdWlyZSgnLi9NYXN0ZXJSVEMnKTtcbmxldCBEcmF3ZXIgPSByZXF1aXJlKCcuL2NhbnZhcycpO1xubGV0IGdldElkID0gcmVxdWlyZSgnLi9pZC5qcycpO1xud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCl7XG4gICAgbGV0IHZpZGVvRG9tU2VsZiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWxmJyk7XG4gICAgLy9sZXQgdmlkZW9Eb21PdGhlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNvdGhlcicpO1xuICAgIGxldCBzZWxmO1xuICAgIGxldCBtYXN0ZXJidG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWFzdGVyYnRuJyk7XG4gICAgbGV0IHNsYXZlYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NsYXZlYnRuJyk7XG4gICAgbGV0IGNsb3NlYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Nsb3NlYnRuJyk7XG4gICAgbGV0IHByaW50YnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3ByaW50YnRuJyk7XG4gICAgbGV0IGRyYXdidG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZHJhd2J0bicpO1xuICAgIGxldCBjbGVhcmJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjbGVhcmJ0bicpO1xuICAgIG1hc3RlcmJ0bi5vbmNsaWNrID0gZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoc2VsZiBpbnN0YW5jZW9mIE1hc3RlclJUQyl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNsYXZlID0gc2VsZi51cGRhdGVUb01hc3RlcigpO1xuICAgICAgICBzZWxmID0gbmV3IE1hc3RlclJUQyh2aWRlb0RvbVNlbGYsc2xhdmUpO1xuICAgICAgICBzZWxmLmNyZWF0ZUNvbm5lY3Rpb25zKCk7XG4gICAgICAgIC8vc2VsZi5pbml0VmlkZW8oKTtcbiAgICB9XG4gICAgc2xhdmVidG4ub25jbGljayA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHNlbGYgPSBuZXcgU2xhdmVSVEModmlkZW9Eb21TZWxmKTtcbiAgICAgICAgLy9zZWxmLmluaXRWaWRlbygpO1xuICAgIH1cbiAgICBjbG9zZWJ0bi5vbmNsaWNrID0gZnVuY3Rpb24oKXtcbiAgICAgICAgc2VsZiAmJiBzZWxmLmNsb3NlVmlkZW9DYWxsKCk7XG4gICAgICAgIC8vc2VsZi5pbml0VmlkZW8oKTtcbiAgICB9XG4gICAgcHJpbnRidG4ub25jbGljayA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciB2aWRlbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VsZlwiKTsvL+iOt+WPluWJjeWPsOimgeaIquWbvueahHZpZGVv5a+56LGh77yMXG4gICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzJyk7Ly/ojrflj5bliY3lj7DnmoRjYW52YXPlr7nosaHvvIznlKjkuo7kvZzlm75cbiAgICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOy8v6K6+572uY2FudmFz57uY5Yi2MmTlm77vvIxcbiAgICAgICAgdmFyIHdpZHRoID0gNDgwOy8v6K6+572uY2FudmFz5a69XG4gICAgICAgIHZhciBoZWlnaHQgPSAyNzA7Ly/orr7nva5jYW52YXPpq5hcbiAgICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UodmlkZW8sIDAsIDAsIHdpZHRoLCBoZWlnaHQpOy8v5bCGdmlkZW/op4bpopHnu5jliLbliLBjYW52YXPkuK1cbiAgICAgICAgLy9zZWxmLmluaXRWaWRlbygpO1xuICAgICAgICB2YXIgaW1hZ2VzID0gY2FudmFzLnRvRGF0YVVSTCgnaW1hZ2UvcG5nJyk7XG4gICAgICAgIHNlbGYuZHJhd0ltZyhpbWFnZXMpO1xuICAgIH1cbiAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RyYXdjYW52YXMnKTtcbiAgICBsZXQgZHJhd2VyID0gbmV3IERyYXdlcih7ZG9tOmNhbnZhcyx3aWR0aDoyMDAsaGVpZ2h0OjIwMH0pO1xuICAgIGRyYXdidG4ub25jbGljayA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGRyYXdlci5pbml0KCk7XG4gICAgICAgIHZhciB0eXBlID1be1xuICAgICAgICAgICAgY29sb3I6JyNmMDAnLFxuICAgICAgICAgICAgbGluZVdpZHRoOjRcbiAgICAgICAgfSx7XG4gICAgICAgICAgICBjb2xvcjonIzBmMCcsXG4gICAgICAgICAgICBsaW5lV2lkdGg6NlxuICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbG9yOicjMDBmJyxcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6OFxuICAgICAgICAgICAgfV07XG4gICAgICAgIHZhciB0aW1lcyA9IDA7XG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgb2JqID0gdHlwZVt0aW1lcyUzXTtcbiAgICAgICAgICAgIHRpbWVzKys7XG4gICAgICAgICAgICBkcmF3ZXIuY2hhbmdlQ29sb3Iob2JqLmNvbG9yKTtcbiAgICAgICAgICAgIGRyYXdlci5jaGFuZ2VXaWR0aChvYmoubGluZVdpZHRoKTtcbiAgICAgICAgfSwyMDAwKVxuICAgIH1cbiAgICBjbGVhcmJ0bi5vbmNsaWNrID0gZnVuY3Rpb24oKXtcbiAgICAgICAgY29uc29sZS5sb2coZHJhd2VyLnRvSW1nKCkubGVuZ3RoKTtcbiAgICAgICAgZHJhd2VyLmNsZWFyKCk7XG4gICAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Created by guominghui on 17/8/17.\n */\n/*\nlet html2canvas = require('./screenshot');\n*/\nvar RecordRTC = __webpack_require__(0);\n\nvar isRecordingStarted = false;\nvar isStoppedRecording = false;\n\nvar rc = {\n    start: function start() {\n        isStoppedRecording = false;\n        isRecordingStarted = true;\n        // this.recorder.startRecording();\n    },\n    stop: function stop() {\n        isStoppedRecording = true;\n        var _this = this;\n        /* this.recorder.stopRecording(function () {\n              // or manually:\n             _this.recorder.save('filename.webm');\n         });*/\n    },\n    init: function init(id) {\n        var elementToShare = document.getElementById(id);\n        var canvas2d = document.createElement('canvas');\n        var context = canvas2d.getContext('2d');\n\n        canvas2d.width = elementToShare.clientWidth;\n        canvas2d.height = elementToShare.clientHeight;\n\n        canvas2d.style.top = 0;\n        canvas2d.style.left = 0;\n        canvas2d.style.zIndex = -1;\n        (document.body || document.documentElement).appendChild(canvas2d);\n        (function looper() {\n            if (!isRecordingStarted) {\n                return setTimeout(looper, 500);\n            }\n\n            html2canvas(elementToShare, {\n                grabMouse: true,\n                onrendered: function onrendered(canvas) {\n                    context.clearRect(0, 0, canvas2d.width, canvas2d.height);\n                    context.drawImage(canvas, 0, 0, canvas2d.width, canvas2d.height);\n\n                    if (isStoppedRecording) {\n                        return;\n                    }\n\n                    requestAnimationFrame(looper);\n                }\n            });\n        })();\n        this.recorder = new RecordRTC(canvas2d, {\n            type: 'canvas'\n        });\n    }\n};\nmodule.exports = rc;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvc2NyZWVucmVvY3JkZXIuanM/NjQzYSJdLCJuYW1lcyI6WyJSZWNvcmRSVEMiLCJyZXF1aXJlIiwiaXNSZWNvcmRpbmdTdGFydGVkIiwiaXNTdG9wcGVkUmVjb3JkaW5nIiwicmMiLCJzdGFydCIsInN0b3AiLCJfdGhpcyIsImluaXQiLCJpZCIsImVsZW1lbnRUb1NoYXJlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNhbnZhczJkIiwiY3JlYXRlRWxlbWVudCIsImNvbnRleHQiLCJnZXRDb250ZXh0Iiwid2lkdGgiLCJjbGllbnRXaWR0aCIsImhlaWdodCIsImNsaWVudEhlaWdodCIsInN0eWxlIiwidG9wIiwibGVmdCIsInpJbmRleCIsImJvZHkiLCJkb2N1bWVudEVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImxvb3BlciIsInNldFRpbWVvdXQiLCJodG1sMmNhbnZhcyIsImdyYWJNb3VzZSIsIm9ucmVuZGVyZWQiLCJjYW52YXMiLCJjbGVhclJlY3QiLCJkcmF3SW1hZ2UiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyZWNvcmRlciIsInR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7QUFHQTs7O0FBR0EsSUFBSUEsWUFBWSxtQkFBQUMsQ0FBUSxDQUFSLENBQWhCOztBQUVBLElBQUlDLHFCQUFxQixLQUF6QjtBQUNBLElBQUlDLHFCQUFxQixLQUF6Qjs7QUFFQSxJQUFJQyxLQUFLO0FBQ0xDLFdBQU0saUJBQVU7QUFDWkYsNkJBQXFCLEtBQXJCO0FBQ0FELDZCQUFxQixJQUFyQjtBQUNEO0FBQ0YsS0FMSTtBQU1MSSxVQUFLLGdCQUFXO0FBQ1pILDZCQUFxQixJQUFyQjtBQUNBLFlBQUlJLFFBQVEsSUFBWjtBQUNEOzs7O0FBS0YsS0FkSTtBQWVMQyxVQUFLLGNBQVNDLEVBQVQsRUFBWTtBQUNiLFlBQUlDLGlCQUFpQkMsU0FBU0MsY0FBVCxDQUF3QkgsRUFBeEIsQ0FBckI7QUFDQSxZQUFJSSxXQUFXRixTQUFTRyxhQUFULENBQXVCLFFBQXZCLENBQWY7QUFDQSxZQUFJQyxVQUFVRixTQUFTRyxVQUFULENBQW9CLElBQXBCLENBQWQ7O0FBRUFILGlCQUFTSSxLQUFULEdBQWlCUCxlQUFlUSxXQUFoQztBQUNBTCxpQkFBU00sTUFBVCxHQUFrQlQsZUFBZVUsWUFBakM7O0FBRUFQLGlCQUFTUSxLQUFULENBQWVDLEdBQWYsR0FBcUIsQ0FBckI7QUFDQVQsaUJBQVNRLEtBQVQsQ0FBZUUsSUFBZixHQUFzQixDQUF0QjtBQUNBVixpQkFBU1EsS0FBVCxDQUFlRyxNQUFmLEdBQXdCLENBQUMsQ0FBekI7QUFDQSxTQUFDYixTQUFTYyxJQUFULElBQWlCZCxTQUFTZSxlQUEzQixFQUE0Q0MsV0FBNUMsQ0FBd0RkLFFBQXhEO0FBQ0EsU0FBQyxTQUFTZSxNQUFULEdBQWtCO0FBQ2YsZ0JBQUcsQ0FBQzFCLGtCQUFKLEVBQXdCO0FBQ3BCLHVCQUFPMkIsV0FBV0QsTUFBWCxFQUFtQixHQUFuQixDQUFQO0FBQ0g7O0FBRURFLHdCQUFZcEIsY0FBWixFQUE0QjtBQUN4QnFCLDJCQUFXLElBRGE7QUFFeEJDLDRCQUFZLG9CQUFTQyxNQUFULEVBQWlCO0FBQ3pCbEIsNEJBQVFtQixTQUFSLENBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCckIsU0FBU0ksS0FBakMsRUFBd0NKLFNBQVNNLE1BQWpEO0FBQ0FKLDRCQUFRb0IsU0FBUixDQUFrQkYsTUFBbEIsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBZ0NwQixTQUFTSSxLQUF6QyxFQUFnREosU0FBU00sTUFBekQ7O0FBRUEsd0JBQUdoQixrQkFBSCxFQUF1QjtBQUNuQjtBQUNIOztBQUVEaUMsMENBQXNCUixNQUF0QjtBQUNIO0FBWHVCLGFBQTVCO0FBYUgsU0FsQkQ7QUFtQkEsYUFBS1MsUUFBTCxHQUFnQixJQUFJckMsU0FBSixDQUFjYSxRQUFkLEVBQXdCO0FBQ3BDeUIsa0JBQU07QUFEOEIsU0FBeEIsQ0FBaEI7QUFHSDtBQWpESSxDQUFUO0FBbURBQyxPQUFPQyxPQUFQLEdBQWlCcEMsRUFBakIiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgZ3VvbWluZ2h1aSBvbiAxNy84LzE3LlxuICovXG4vKlxubGV0IGh0bWwyY2FudmFzID0gcmVxdWlyZSgnLi9zY3JlZW5zaG90Jyk7XG4qL1xubGV0IFJlY29yZFJUQyA9IHJlcXVpcmUoJy4vUmVjb3JkUlRDJyk7XG5cbnZhciBpc1JlY29yZGluZ1N0YXJ0ZWQgPSBmYWxzZTtcbnZhciBpc1N0b3BwZWRSZWNvcmRpbmcgPSBmYWxzZTtcblxudmFyIHJjID0ge1xuICAgIHN0YXJ0OmZ1bmN0aW9uKCl7XG4gICAgICAgIGlzU3RvcHBlZFJlY29yZGluZyA9IGZhbHNlO1xuICAgICAgICBpc1JlY29yZGluZ1N0YXJ0ZWQgPSB0cnVlO1xuICAgICAgIC8vIHRoaXMucmVjb3JkZXIuc3RhcnRSZWNvcmRpbmcoKTtcbiAgICB9LFxuICAgIHN0b3A6ZnVuY3Rpb24oKSB7XG4gICAgICAgIGlzU3RvcHBlZFJlY29yZGluZyA9IHRydWU7XG4gICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgICAgLyogdGhpcy5yZWNvcmRlci5zdG9wUmVjb3JkaW5nKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgLy8gb3IgbWFudWFsbHk6XG4gICAgICAgICAgICBfdGhpcy5yZWNvcmRlci5zYXZlKCdmaWxlbmFtZS53ZWJtJyk7XG4gICAgICAgIH0pOyovXG4gICAgfSxcbiAgICBpbml0OmZ1bmN0aW9uKGlkKXtcbiAgICAgICAgdmFyIGVsZW1lbnRUb1NoYXJlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgICAgICB2YXIgY2FudmFzMmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBjYW52YXMyZC5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgICAgIGNhbnZhczJkLndpZHRoID0gZWxlbWVudFRvU2hhcmUuY2xpZW50V2lkdGg7XG4gICAgICAgIGNhbnZhczJkLmhlaWdodCA9IGVsZW1lbnRUb1NoYXJlLmNsaWVudEhlaWdodDtcblxuICAgICAgICBjYW52YXMyZC5zdHlsZS50b3AgPSAwO1xuICAgICAgICBjYW52YXMyZC5zdHlsZS5sZWZ0ID0gMDtcbiAgICAgICAgY2FudmFzMmQuc3R5bGUuekluZGV4ID0gLTE7XG4gICAgICAgIChkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQoY2FudmFzMmQpO1xuICAgICAgICAoZnVuY3Rpb24gbG9vcGVyKCkge1xuICAgICAgICAgICAgaWYoIWlzUmVjb3JkaW5nU3RhcnRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGxvb3BlciwgNTAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaHRtbDJjYW52YXMoZWxlbWVudFRvU2hhcmUsIHtcbiAgICAgICAgICAgICAgICBncmFiTW91c2U6IHRydWUsXG4gICAgICAgICAgICAgICAgb25yZW5kZXJlZDogZnVuY3Rpb24oY2FudmFzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGNhbnZhczJkLndpZHRoLCBjYW52YXMyZC5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShjYW52YXMsIDAsIDAsIGNhbnZhczJkLndpZHRoLCBjYW52YXMyZC5oZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKGlzU3RvcHBlZFJlY29yZGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3Blcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHRoaXMucmVjb3JkZXIgPSBuZXcgUmVjb3JkUlRDKGNhbnZhczJkLCB7XG4gICAgICAgICAgICB0eXBlOiAnY2FudmFzJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHJjO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zY3JlZW5yZW9jcmRlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(t,e){ true?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):\"object\"==typeof exports?exports.io=e():t.io=e()}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p=\"\",e(0)}([function(t,e,n){\"use strict\";function r(t,e){\"object\"===(\"undefined\"==typeof t?\"undefined\":o(t))&&(e=t,t=void 0),e=e||{};var n,r=i(t),s=r.source,u=r.id,h=r.path,f=p[u]&&h in p[u].nsps,l=e.forceNew||e[\"force new connection\"]||!1===e.multiplex||f;return l?(c(\"ignoring socket cache for %s\",s),n=a(s,e)):(p[u]||(c(\"new io instance for %s\",s),p[u]=a(s,e)),n=p[u]),r.query&&!e.query&&(e.query=r.query),n.socket(r.path,e)}var o=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},i=n(1),s=n(7),a=n(13),c=n(3)(\"socket.io-client\");t.exports=e=r;var p=e.managers={};e.protocol=s.protocol,e.connect=r,e.Manager=n(13),e.Socket=n(39)},function(t,e,n){(function(e){\"use strict\";function r(t,n){var r=t;n=n||e.location,null==t&&(t=n.protocol+\"//\"+n.host),\"string\"==typeof t&&(\"/\"===t.charAt(0)&&(t=\"/\"===t.charAt(1)?n.protocol+t:n.host+t),/^(https?|wss?):\\/\\//.test(t)||(i(\"protocol-less url %s\",t),t=\"undefined\"!=typeof n?n.protocol+\"//\"+t:\"https://\"+t),i(\"parse %s\",t),r=o(t)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port=\"80\":/^(http|ws)s$/.test(r.protocol)&&(r.port=\"443\")),r.path=r.path||\"/\";var s=r.host.indexOf(\":\")!==-1,a=s?\"[\"+r.host+\"]\":r.host;return r.id=r.protocol+\"://\"+a+\":\"+r.port,r.href=r.protocol+\"://\"+a+(n&&n.port===r.port?\"\":\":\"+r.port),r}var o=n(2),i=n(3)(\"socket.io-client:url\");t.exports=r}).call(e,function(){return this}())},function(t,e){var n=/^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/,r=[\"source\",\"protocol\",\"authority\",\"userInfo\",\"user\",\"password\",\"host\",\"port\",\"relative\",\"path\",\"directory\",\"file\",\"query\",\"anchor\"];t.exports=function(t){var e=t,o=t.indexOf(\"[\"),i=t.indexOf(\"]\");o!=-1&&i!=-1&&(t=t.substring(0,o)+t.substring(o,i).replace(/:/g,\";\")+t.substring(i,t.length));for(var s=n.exec(t||\"\"),a={},c=14;c--;)a[r[c]]=s[c]||\"\";return o!=-1&&i!=-1&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,\":\"),a.authority=a.authority.replace(\"[\",\"\").replace(\"]\",\"\").replace(/;/g,\":\"),a.ipv6uri=!0),a}},function(t,e,n){(function(r){function o(){return!(\"undefined\"==typeof window||!window.process||\"renderer\"!==window.process.type)||(\"undefined\"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||\"undefined\"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||\"undefined\"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||\"undefined\"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/))}function i(t){var n=this.useColors;if(t[0]=(n?\"%c\":\"\")+this.namespace+(n?\" %c\":\" \")+t[0]+(n?\"%c \":\" \")+\"+\"+e.humanize(this.diff),n){var r=\"color: \"+this.color;t.splice(1,0,r,\"color: inherit\");var o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,function(t){\"%%\"!==t&&(o++,\"%c\"===t&&(i=o))}),t.splice(i,0,r)}}function s(){return\"object\"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function a(t){try{null==t?e.storage.removeItem(\"debug\"):e.storage.debug=t}catch(n){}}function c(){var t;try{t=e.storage.debug}catch(n){}return!t&&\"undefined\"!=typeof r&&\"env\"in r&&(t=r.env.DEBUG),t}function p(){try{return window.localStorage}catch(t){}}e=t.exports=n(5),e.log=s,e.formatArgs=i,e.save=a,e.load=c,e.useColors=o,e.storage=\"undefined\"!=typeof chrome&&\"undefined\"!=typeof chrome.storage?chrome.storage.local:p(),e.colors=[\"lightseagreen\",\"forestgreen\",\"goldenrod\",\"dodgerblue\",\"darkorchid\",\"crimson\"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(e){return\"[UnexpectedJSONParseError]: \"+e.message}},e.enable(c())}).call(e,n(4))},function(t,e){function n(){throw new Error(\"setTimeout has not been defined\")}function r(){throw new Error(\"clearTimeout has not been defined\")}function o(t){if(u===setTimeout)return setTimeout(t,0);if((u===n||!u)&&setTimeout)return u=setTimeout,setTimeout(t,0);try{return u(t,0)}catch(e){try{return u.call(null,t,0)}catch(e){return u.call(this,t,0)}}}function i(t){if(h===clearTimeout)return clearTimeout(t);if((h===r||!h)&&clearTimeout)return h=clearTimeout,clearTimeout(t);try{return h(t)}catch(e){try{return h.call(null,t)}catch(e){return h.call(this,t)}}}function s(){y&&l&&(y=!1,l.length?d=l.concat(d):m=-1,d.length&&a())}function a(){if(!y){var t=o(s);y=!0;for(var e=d.length;e;){for(l=d,d=[];++m<e;)l&&l[m].run();m=-1,e=d.length}l=null,y=!1,i(t)}}function c(t,e){this.fun=t,this.array=e}function p(){}var u,h,f=t.exports={};!function(){try{u=\"function\"==typeof setTimeout?setTimeout:n}catch(t){u=n}try{h=\"function\"==typeof clearTimeout?clearTimeout:r}catch(t){h=r}}();var l,d=[],y=!1,m=-1;f.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];d.push(new c(t,e)),1!==d.length||y||o(a)},c.prototype.run=function(){this.fun.apply(null,this.array)},f.title=\"browser\",f.browser=!0,f.env={},f.argv=[],f.version=\"\",f.versions={},f.on=p,f.addListener=p,f.once=p,f.off=p,f.removeListener=p,f.removeAllListeners=p,f.emit=p,f.prependListener=p,f.prependOnceListener=p,f.listeners=function(t){return[]},f.binding=function(t){throw new Error(\"process.binding is not supported\")},f.cwd=function(){return\"/\"},f.chdir=function(t){throw new Error(\"process.chdir is not supported\")},f.umask=function(){return 0}},function(t,e,n){function r(t){var n,r=0;for(n in t)r=(r<<5)-r+t.charCodeAt(n),r|=0;return e.colors[Math.abs(r)%e.colors.length]}function o(t){function n(){if(n.enabled){var t=n,r=+new Date,o=r-(p||r);t.diff=o,t.prev=p,t.curr=r,p=r;for(var i=new Array(arguments.length),s=0;s<i.length;s++)i[s]=arguments[s];i[0]=e.coerce(i[0]),\"string\"!=typeof i[0]&&i.unshift(\"%O\");var a=0;i[0]=i[0].replace(/%([a-zA-Z%])/g,function(n,r){if(\"%%\"===n)return n;a++;var o=e.formatters[r];if(\"function\"==typeof o){var s=i[a];n=o.call(t,s),i.splice(a,1),a--}return n}),e.formatArgs.call(t,i);var c=n.log||e.log||console.log.bind(console);c.apply(t,i)}}return n.namespace=t,n.enabled=e.enabled(t),n.useColors=e.useColors(),n.color=r(t),\"function\"==typeof e.init&&e.init(n),n}function i(t){e.save(t),e.names=[],e.skips=[];for(var n=(\"string\"==typeof t?t:\"\").split(/[\\s,]+/),r=n.length,o=0;o<r;o++)n[o]&&(t=n[o].replace(/\\*/g,\".*?\"),\"-\"===t[0]?e.skips.push(new RegExp(\"^\"+t.substr(1)+\"$\")):e.names.push(new RegExp(\"^\"+t+\"$\")))}function s(){e.enable(\"\")}function a(t){var n,r;for(n=0,r=e.skips.length;n<r;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;n<r;n++)if(e.names[n].test(t))return!0;return!1}function c(t){return t instanceof Error?t.stack||t.message:t}e=t.exports=o.debug=o[\"default\"]=o,e.coerce=c,e.disable=s,e.enable=i,e.enabled=a,e.humanize=n(6),e.names=[],e.skips=[],e.formatters={};var p},function(t,e){function n(t){if(t=String(t),!(t.length>100)){var e=/^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(e){var n=parseFloat(e[1]),r=(e[2]||\"ms\").toLowerCase();switch(r){case\"years\":case\"year\":case\"yrs\":case\"yr\":case\"y\":return n*u;case\"days\":case\"day\":case\"d\":return n*p;case\"hours\":case\"hour\":case\"hrs\":case\"hr\":case\"h\":return n*c;case\"minutes\":case\"minute\":case\"mins\":case\"min\":case\"m\":return n*a;case\"seconds\":case\"second\":case\"secs\":case\"sec\":case\"s\":return n*s;case\"milliseconds\":case\"millisecond\":case\"msecs\":case\"msec\":case\"ms\":return n;default:return}}}}function r(t){return t>=p?Math.round(t/p)+\"d\":t>=c?Math.round(t/c)+\"h\":t>=a?Math.round(t/a)+\"m\":t>=s?Math.round(t/s)+\"s\":t+\"ms\"}function o(t){return i(t,p,\"day\")||i(t,c,\"hour\")||i(t,a,\"minute\")||i(t,s,\"second\")||t+\" ms\"}function i(t,e,n){if(!(t<e))return t<1.5*e?Math.floor(t/e)+\" \"+n:Math.ceil(t/e)+\" \"+n+\"s\"}var s=1e3,a=60*s,c=60*a,p=24*c,u=365.25*p;t.exports=function(t,e){e=e||{};var i=typeof t;if(\"string\"===i&&t.length>0)return n(t);if(\"number\"===i&&isNaN(t)===!1)return e[\"long\"]?o(t):r(t);throw new Error(\"val is not a non-empty string or a valid number. val=\"+JSON.stringify(t))}},function(t,e,n){function r(){}function o(t){var n=\"\"+t.type;return e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(n+=t.attachments+\"-\"),t.nsp&&\"/\"!==t.nsp&&(n+=t.nsp+\",\"),null!=t.id&&(n+=t.id),null!=t.data&&(n+=JSON.stringify(t.data)),h(\"encoded %j as %s\",t,n),n}function i(t,e){function n(t){var n=d.deconstructPacket(t),r=o(n.packet),i=n.buffers;i.unshift(r),e(i)}d.removeBlobs(t,n)}function s(){this.reconstructor=null}function a(t){var n=0,r={type:Number(t.charAt(0))};if(null==e.types[r.type])return u();if(e.BINARY_EVENT===r.type||e.BINARY_ACK===r.type){for(var o=\"\";\"-\"!==t.charAt(++n)&&(o+=t.charAt(n),n!=t.length););if(o!=Number(o)||\"-\"!==t.charAt(n))throw new Error(\"Illegal attachments\");r.attachments=Number(o)}if(\"/\"===t.charAt(n+1))for(r.nsp=\"\";++n;){var i=t.charAt(n);if(\",\"===i)break;if(r.nsp+=i,n===t.length)break}else r.nsp=\"/\";var s=t.charAt(n+1);if(\"\"!==s&&Number(s)==s){for(r.id=\"\";++n;){var i=t.charAt(n);if(null==i||Number(i)!=i){--n;break}if(r.id+=t.charAt(n),n===t.length)break}r.id=Number(r.id)}return t.charAt(++n)&&(r=c(r,t.substr(n))),h(\"decoded %s as %j\",t,r),r}function c(t,e){try{t.data=JSON.parse(e)}catch(n){return u()}return t}function p(t){this.reconPack=t,this.buffers=[]}function u(){return{type:e.ERROR,data:\"parser error\"}}var h=n(3)(\"socket.io-parser\"),f=n(8),l=n(9),d=n(11),y=n(12);e.protocol=4,e.types=[\"CONNECT\",\"DISCONNECT\",\"EVENT\",\"ACK\",\"ERROR\",\"BINARY_EVENT\",\"BINARY_ACK\"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=r,e.Decoder=s,r.prototype.encode=function(t,n){if(t.type!==e.EVENT&&t.type!==e.ACK||!l(t.data)||(t.type=t.type===e.EVENT?e.BINARY_EVENT:e.BINARY_ACK),h(\"encoding packet %j\",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)i(t,n);else{var r=o(t);n([r])}},f(s.prototype),s.prototype.add=function(t){var n;if(\"string\"==typeof t)n=a(t),e.BINARY_EVENT===n.type||e.BINARY_ACK===n.type?(this.reconstructor=new p(n),0===this.reconstructor.reconPack.attachments&&this.emit(\"decoded\",n)):this.emit(\"decoded\",n);else{if(!y(t)&&!t.base64)throw new Error(\"Unknown type: \"+t);if(!this.reconstructor)throw new Error(\"got binary data when not reconstructing a packet\");n=this.reconstructor.takeBinaryData(t),n&&(this.reconstructor=null,this.emit(\"decoded\",n))}},s.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},p.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=d.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},p.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e,n){function r(t){if(t)return o(t)}function o(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks[\"$\"+t]=this._callbacks[\"$\"+t]||[]).push(e),this},r.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n=this._callbacks[\"$\"+t];if(!n)return this;if(1==arguments.length)return delete this._callbacks[\"$\"+t],this;for(var r,o=0;o<n.length;o++)if(r=n[o],r===e||r.fn===e){n.splice(o,1);break}return this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks[\"$\"+t];if(n){n=n.slice(0);for(var r=0,o=n.length;r<o;++r)n[r].apply(this,e)}return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks[\"$\"+t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,n){(function(e){function r(t){if(!t||\"object\"!=typeof t)return!1;if(o(t)){for(var n=0,i=t.length;n<i;n++)if(r(t[n]))return!0;return!1}if(\"function\"==typeof e.Buffer&&e.Buffer.isBuffer&&e.Buffer.isBuffer(t)||\"function\"==typeof e.ArrayBuffer&&t instanceof ArrayBuffer||s&&t instanceof Blob||a&&t instanceof File)return!0;if(t.toJSON&&\"function\"==typeof t.toJSON&&1===arguments.length)return r(t.toJSON(),!0);for(var c in t)if(Object.prototype.hasOwnProperty.call(t,c)&&r(t[c]))return!0;return!1}var o=n(10),i=Object.prototype.toString,s=\"function\"==typeof e.Blob||\"[object BlobConstructor]\"===i.call(e.Blob),a=\"function\"==typeof e.File||\"[object FileConstructor]\"===i.call(e.File);t.exports=r}).call(e,function(){return this}())},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return\"[object Array]\"==n.call(t)}},function(t,e,n){(function(t){function r(t,e){if(!t)return t;if(s(t)){var n={_placeholder:!0,num:e.length};return e.push(t),n}if(i(t)){for(var o=new Array(t.length),a=0;a<t.length;a++)o[a]=r(t[a],e);return o}if(\"object\"==typeof t&&!(t instanceof Date)){var o={};for(var c in t)o[c]=r(t[c],e);return o}return t}function o(t,e){if(!t)return t;if(t&&t._placeholder)return e[t.num];if(i(t))for(var n=0;n<t.length;n++)t[n]=o(t[n],e);else if(\"object\"==typeof t)for(var r in t)t[r]=o(t[r],e);return t}var i=n(10),s=n(12),a=Object.prototype.toString,c=\"function\"==typeof t.Blob||\"[object BlobConstructor]\"===a.call(t.Blob),p=\"function\"==typeof t.File||\"[object FileConstructor]\"===a.call(t.File);e.deconstructPacket=function(t){var e=[],n=t.data,o=t;return o.data=r(n,e),o.attachments=e.length,{packet:o,buffers:e}},e.reconstructPacket=function(t,e){return t.data=o(t.data,e),t.attachments=void 0,t},e.removeBlobs=function(t,e){function n(t,a,u){if(!t)return t;if(c&&t instanceof Blob||p&&t instanceof File){r++;var h=new FileReader;h.onload=function(){u?u[a]=this.result:o=this.result,--r||e(o)},h.readAsArrayBuffer(t)}else if(i(t))for(var f=0;f<t.length;f++)n(t[f],f,t);else if(\"object\"==typeof t&&!s(t))for(var l in t)n(t[l],l,t)}var r=0,o=t;n(o),r||e(o)}}).call(e,function(){return this}())},function(t,e){(function(e){function n(t){return e.Buffer&&e.Buffer.isBuffer(t)||e.ArrayBuffer&&t instanceof ArrayBuffer}t.exports=n}).call(e,function(){return this}())},function(t,e,n){\"use strict\";function r(t,e){if(!(this instanceof r))return new r(t,e);t&&\"object\"===(\"undefined\"==typeof t?\"undefined\":o(t))&&(e=t,t=void 0),e=e||{},e.path=e.path||\"/socket.io\",this.nsps={},this.subs=[],this.opts=e,this.reconnection(e.reconnection!==!1),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new l({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState=\"closed\",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=e.parser||c;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=e.autoConnect!==!1,this.autoConnect&&this.open()}var o=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},i=n(14),s=n(39),a=n(8),c=n(7),p=n(41),u=n(42),h=n(3)(\"socket.io-client:manager\"),f=n(37),l=n(43),d=Object.prototype.hasOwnProperty;t.exports=r,r.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var t in this.nsps)d.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},r.prototype.updateSocketIds=function(){for(var t in this.nsps)d.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},r.prototype.generateId=function(t){return(\"/\"===t?\"\":t+\"#\")+this.engine.id},a(r.prototype),r.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},r.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},r.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},r.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},r.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},r.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},r.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},r.prototype.open=r.prototype.connect=function(t,e){if(h(\"readyState %s\",this.readyState),~this.readyState.indexOf(\"open\"))return this;h(\"opening %s\",this.uri),this.engine=i(this.uri,this.opts);var n=this.engine,r=this;this.readyState=\"opening\",this.skipReconnect=!1;var o=p(n,\"open\",function(){r.onopen(),t&&t()}),s=p(n,\"error\",function(e){if(h(\"connect_error\"),r.cleanup(),r.readyState=\"closed\",r.emitAll(\"connect_error\",e),t){var n=new Error(\"Connection error\");n.data=e,t(n)}else r.maybeReconnectOnOpen()});if(!1!==this._timeout){var a=this._timeout;h(\"connect attempt will timeout after %d\",a);var c=setTimeout(function(){h(\"connect attempt timed out after %d\",a),o.destroy(),n.close(),n.emit(\"error\",\"timeout\"),r.emitAll(\"connect_timeout\",a)},a);this.subs.push({destroy:function(){clearTimeout(c)}})}return this.subs.push(o),this.subs.push(s),this},r.prototype.onopen=function(){h(\"open\"),this.cleanup(),this.readyState=\"open\",this.emit(\"open\");var t=this.engine;this.subs.push(p(t,\"data\",u(this,\"ondata\"))),this.subs.push(p(t,\"ping\",u(this,\"onping\"))),this.subs.push(p(t,\"pong\",u(this,\"onpong\"))),this.subs.push(p(t,\"error\",u(this,\"onerror\"))),this.subs.push(p(t,\"close\",u(this,\"onclose\"))),this.subs.push(p(this.decoder,\"decoded\",u(this,\"ondecoded\")))},r.prototype.onping=function(){this.lastPing=new Date,this.emitAll(\"ping\")},r.prototype.onpong=function(){this.emitAll(\"pong\",new Date-this.lastPing)},r.prototype.ondata=function(t){this.decoder.add(t)},r.prototype.ondecoded=function(t){this.emit(\"packet\",t)},r.prototype.onerror=function(t){h(\"error\",t),this.emitAll(\"error\",t)},r.prototype.socket=function(t,e){function n(){~f(o.connecting,r)||o.connecting.push(r)}var r=this.nsps[t];if(!r){r=new s(this,t,e),this.nsps[t]=r;var o=this;r.on(\"connecting\",n),r.on(\"connect\",function(){r.id=o.generateId(t)}),this.autoConnect&&n()}return r},r.prototype.destroy=function(t){var e=f(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},r.prototype.packet=function(t){h(\"writing packet %j\",t);var e=this;t.query&&0===t.type&&(t.nsp+=\"?\"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,function(n){for(var r=0;r<n.length;r++)e.engine.write(n[r],t.options);e.encoding=!1,e.processPacketQueue()}))},r.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},r.prototype.cleanup=function(){h(\"cleanup\");for(var t=this.subs.length,e=0;e<t;e++){var n=this.subs.shift();n.destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},r.prototype.close=r.prototype.disconnect=function(){h(\"disconnect\"),this.skipReconnect=!0,this.reconnecting=!1,\"opening\"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState=\"closed\",this.engine&&this.engine.close()},r.prototype.onclose=function(t){h(\"onclose\"),this.cleanup(),this.backoff.reset(),this.readyState=\"closed\",this.emit(\"close\",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},r.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)h(\"reconnect failed\"),this.backoff.reset(),this.emitAll(\"reconnect_failed\"),this.reconnecting=!1;else{var e=this.backoff.duration();h(\"will wait %dms before reconnect attempt\",e),this.reconnecting=!0;var n=setTimeout(function(){t.skipReconnect||(h(\"attempting reconnect\"),t.emitAll(\"reconnect_attempt\",t.backoff.attempts),t.emitAll(\"reconnecting\",t.backoff.attempts),t.skipReconnect||t.open(function(e){e?(h(\"reconnect attempt error\"),t.reconnecting=!1,t.reconnect(),t.emitAll(\"reconnect_error\",e.data)):(h(\"reconnect success\"),t.onreconnect())}))},e);this.subs.push({destroy:function(){clearTimeout(n)}})}},r.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll(\"reconnect\",t)}},function(t,e,n){t.exports=n(15)},function(t,e,n){t.exports=n(16),t.exports.parser=n(23)},function(t,e,n){(function(e){function r(t,n){if(!(this instanceof r))return new r(t,n);n=n||{},t&&\"object\"==typeof t&&(n=t,t=null),t?(t=u(t),n.hostname=t.host,n.secure=\"https\"===t.protocol||\"wss\"===t.protocol,n.port=t.port,t.query&&(n.query=t.query)):n.host&&(n.hostname=u(n.host).host),this.secure=null!=n.secure?n.secure:e.location&&\"https:\"===location.protocol,n.hostname&&!n.port&&(n.port=this.secure?\"443\":\"80\"),this.agent=n.agent||!1,this.hostname=n.hostname||(e.location?location.hostname:\"localhost\"),this.port=n.port||(e.location&&location.port?location.port:this.secure?443:80),this.query=n.query||{},\"string\"==typeof this.query&&(this.query=f.decode(this.query)),this.upgrade=!1!==n.upgrade,this.path=(n.path||\"/engine.io\").replace(/\\/$/,\"\")+\"/\",this.forceJSONP=!!n.forceJSONP,this.jsonp=!1!==n.jsonp,this.forceBase64=!!n.forceBase64,this.enablesXDR=!!n.enablesXDR,this.timestampParam=n.timestampParam||\"t\",this.timestampRequests=n.timestampRequests,this.transports=n.transports||[\"polling\",\"websocket\"],this.transportOptions=n.transportOptions||{},this.readyState=\"\",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=n.policyPort||843,this.rememberUpgrade=n.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=n.onlyBinaryUpgrades,this.perMessageDeflate=!1!==n.perMessageDeflate&&(n.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=n.pfx||null,this.key=n.key||null,this.passphrase=n.passphrase||null,this.cert=n.cert||null,this.ca=n.ca||null,this.ciphers=n.ciphers||null,this.rejectUnauthorized=void 0===n.rejectUnauthorized||n.rejectUnauthorized,this.forceNode=!!n.forceNode;var o=\"object\"==typeof e&&e;o.global===o&&(n.extraHeaders&&Object.keys(n.extraHeaders).length>0&&(this.extraHeaders=n.extraHeaders),n.localAddress&&(this.localAddress=n.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}function o(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}var i=n(17),s=n(8),a=n(3)(\"engine.io-client:socket\"),c=n(37),p=n(23),u=n(2),h=n(38),f=n(31);t.exports=r,r.priorWebsocketSuccess=!1,s(r.prototype),r.protocol=p.protocol,r.Socket=r,r.Transport=n(22),r.transports=n(17),r.parser=n(23),r.prototype.createTransport=function(t){a('creating transport \"%s\"',t);var e=o(this.query);e.EIO=p.protocol,e.transport=t;var n=this.transportOptions[t]||{};this.id&&(e.sid=this.id);var r=new i[t]({query:e,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0});return r},r.prototype.open=function(){var t;if(this.rememberUpgrade&&r.priorWebsocketSuccess&&this.transports.indexOf(\"websocket\")!==-1)t=\"websocket\";else{if(0===this.transports.length){var e=this;return void setTimeout(function(){e.emit(\"error\",\"No transports available\")},0)}t=this.transports[0]}this.readyState=\"opening\";try{t=this.createTransport(t)}catch(n){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},r.prototype.setTransport=function(t){a(\"setting transport %s\",t.name);var e=this;this.transport&&(a(\"clearing existing transport %s\",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on(\"drain\",function(){e.onDrain()}).on(\"packet\",function(t){e.onPacket(t)}).on(\"error\",function(t){e.onError(t)}).on(\"close\",function(){e.onClose(\"transport close\")})},r.prototype.probe=function(t){function e(){if(f.onlyBinaryUpgrades){var e=!this.supportsBinary&&f.transport.supportsBinary;h=h||e}h||(a('probe transport \"%s\" opened',t),u.send([{type:\"ping\",data:\"probe\"}]),u.once(\"packet\",function(e){if(!h)if(\"pong\"===e.type&&\"probe\"===e.data){if(a('probe transport \"%s\" pong',t),f.upgrading=!0,f.emit(\"upgrading\",u),!u)return;r.priorWebsocketSuccess=\"websocket\"===u.name,a('pausing current transport \"%s\"',f.transport.name),f.transport.pause(function(){h||\"closed\"!==f.readyState&&(a(\"changing transport and sending upgrade packet\"),p(),f.setTransport(u),u.send([{type:\"upgrade\"}]),f.emit(\"upgrade\",u),u=null,f.upgrading=!1,f.flush())})}else{a('probe transport \"%s\" failed',t);var n=new Error(\"probe error\");n.transport=u.name,f.emit(\"upgradeError\",n)}}))}function n(){h||(h=!0,p(),u.close(),u=null)}function o(e){var r=new Error(\"probe error: \"+e);r.transport=u.name,n(),a('probe transport \"%s\" failed because of error: %s',t,e),f.emit(\"upgradeError\",r)}function i(){o(\"transport closed\")}function s(){o(\"socket closed\")}function c(t){u&&t.name!==u.name&&(a('\"%s\" works - aborting \"%s\"',t.name,u.name),n())}function p(){u.removeListener(\"open\",e),u.removeListener(\"error\",o),u.removeListener(\"close\",i),f.removeListener(\"close\",s),f.removeListener(\"upgrading\",c)}a('probing transport \"%s\"',t);var u=this.createTransport(t,{probe:1}),h=!1,f=this;r.priorWebsocketSuccess=!1,u.once(\"open\",e),u.once(\"error\",o),u.once(\"close\",i),this.once(\"close\",s),this.once(\"upgrading\",c),u.open()},r.prototype.onOpen=function(){if(a(\"socket open\"),this.readyState=\"open\",r.priorWebsocketSuccess=\"websocket\"===this.transport.name,this.emit(\"open\"),this.flush(),\"open\"===this.readyState&&this.upgrade&&this.transport.pause){a(\"starting upgrade probes\");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},r.prototype.onPacket=function(t){if(\"opening\"===this.readyState||\"open\"===this.readyState||\"closing\"===this.readyState)switch(a('socket receive: type \"%s\", data \"%s\"',t.type,t.data),this.emit(\"packet\",t),this.emit(\"heartbeat\"),t.type){case\"open\":this.onHandshake(h(t.data));break;case\"pong\":this.setPing(),this.emit(\"pong\");break;case\"error\":var e=new Error(\"server error\");e.code=t.data,this.onError(e);break;case\"message\":this.emit(\"data\",t.data),this.emit(\"message\",t.data)}else a('packet received with socket readyState \"%s\"',this.readyState)},r.prototype.onHandshake=function(t){this.emit(\"handshake\",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),\"closed\"!==this.readyState&&(this.setPing(),this.removeListener(\"heartbeat\",this.onHeartbeat),this.on(\"heartbeat\",this.onHeartbeat))},r.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout(function(){\"closed\"!==e.readyState&&e.onClose(\"ping timeout\")},t||e.pingInterval+e.pingTimeout)},r.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout(function(){a(\"writing ping packet - expecting pong within %sms\",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)},t.pingInterval)},r.prototype.ping=function(){var t=this;this.sendPacket(\"ping\",function(){t.emit(\"ping\")})},r.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit(\"drain\"):this.flush()},r.prototype.flush=function(){\"closed\"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(a(\"flushing %d packets in socket\",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit(\"flush\"))},r.prototype.write=r.prototype.send=function(t,e,n){return this.sendPacket(\"message\",t,e,n),this},r.prototype.sendPacket=function(t,e,n,r){if(\"function\"==typeof e&&(r=e,e=void 0),\"function\"==typeof n&&(r=n,n=null),\"closing\"!==this.readyState&&\"closed\"!==this.readyState){n=n||{},n.compress=!1!==n.compress;var o={type:t,data:e,options:n};this.emit(\"packetCreate\",o),this.writeBuffer.push(o),r&&this.once(\"flush\",r),this.flush()}},r.prototype.close=function(){function t(){r.onClose(\"forced close\"),a(\"socket closing - telling transport to close\"),r.transport.close()}function e(){r.removeListener(\"upgrade\",e),r.removeListener(\"upgradeError\",e),t()}function n(){r.once(\"upgrade\",e),r.once(\"upgradeError\",e)}if(\"opening\"===this.readyState||\"open\"===this.readyState){this.readyState=\"closing\";var r=this;this.writeBuffer.length?this.once(\"drain\",function(){this.upgrading?n():t()}):this.upgrading?n():t()}return this},r.prototype.onError=function(t){a(\"socket error %j\",t),r.priorWebsocketSuccess=!1,this.emit(\"error\",t),this.onClose(\"transport error\",t)},r.prototype.onClose=function(t,e){if(\"opening\"===this.readyState||\"open\"===this.readyState||\"closing\"===this.readyState){a('socket close with reason: \"%s\"',t);var n=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners(\"close\"),this.transport.close(),this.transport.removeAllListeners(),this.readyState=\"closed\",this.id=null,this.emit(\"close\",t,e),n.writeBuffer=[],n.prevBufferLen=0}},r.prototype.filterUpgrades=function(t){for(var e=[],n=0,r=t.length;n<r;n++)~c(this.transports,t[n])&&e.push(t[n]);return e}}).call(e,function(){return this}())},function(t,e,n){(function(t){function r(e){var n,r=!1,a=!1,c=!1!==e.jsonp;if(t.location){var p=\"https:\"===location.protocol,u=location.port;u||(u=p?443:80),r=e.hostname!==location.hostname||u!==e.port,a=e.secure!==p}if(e.xdomain=r,e.xscheme=a,n=new o(e),\"open\"in n&&!e.forceJSONP)return new i(e);if(!c)throw new Error(\"JSONP disabled\");return new s(e)}var o=n(18),i=n(20),s=n(34),a=n(35);e.polling=r,e.websocket=a}).call(e,function(){return this}())},function(t,e,n){(function(e){var r=n(19);t.exports=function(t){var n=t.xdomain,o=t.xscheme,i=t.enablesXDR;try{if(\"undefined\"!=typeof XMLHttpRequest&&(!n||r))return new XMLHttpRequest}catch(s){}try{if(\"undefined\"!=typeof XDomainRequest&&!o&&i)return new XDomainRequest}catch(s){}if(!n)try{\nreturn new(e[[\"Active\"].concat(\"Object\").join(\"X\")])(\"Microsoft.XMLHTTP\")}catch(s){}}}).call(e,function(){return this}())},function(t,e){try{t.exports=\"undefined\"!=typeof XMLHttpRequest&&\"withCredentials\"in new XMLHttpRequest}catch(n){t.exports=!1}},function(t,e,n){(function(e){function r(){}function o(t){if(c.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,e.location){var n=\"https:\"===location.protocol,r=location.port;r||(r=n?443:80),this.xd=t.hostname!==e.location.hostname||r!==t.port,this.xs=t.secure!==n}}function i(t){this.method=t.method||\"GET\",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}function s(){for(var t in i.requests)i.requests.hasOwnProperty(t)&&i.requests[t].abort()}var a=n(18),c=n(21),p=n(8),u=n(32),h=n(3)(\"engine.io-client:polling-xhr\");t.exports=o,t.exports.Request=i,u(o,c),o.prototype.supportsBinary=!0,o.prototype.request=function(t){return t=t||{},t.uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new i(t)},o.prototype.doWrite=function(t,e){var n=\"string\"!=typeof t&&void 0!==t,r=this.request({method:\"POST\",data:t,isBinary:n}),o=this;r.on(\"success\",e),r.on(\"error\",function(t){o.onError(\"xhr post error\",t)}),this.sendXhr=r},o.prototype.doPoll=function(){h(\"xhr poll\");var t=this.request(),e=this;t.on(\"data\",function(t){e.onData(t)}),t.on(\"error\",function(t){e.onError(\"xhr poll error\",t)}),this.pollXhr=t},p(i.prototype),i.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var n=this.xhr=new a(t),r=this;try{h(\"xhr open %s: %s\",this.method,this.uri),n.open(this.method,this.uri,this.async);try{if(this.extraHeaders){n.setDisableHeaderCheck&&n.setDisableHeaderCheck(!0);for(var o in this.extraHeaders)this.extraHeaders.hasOwnProperty(o)&&n.setRequestHeader(o,this.extraHeaders[o])}}catch(s){}if(\"POST\"===this.method)try{this.isBinary?n.setRequestHeader(\"Content-type\",\"application/octet-stream\"):n.setRequestHeader(\"Content-type\",\"text/plain;charset=UTF-8\")}catch(s){}try{n.setRequestHeader(\"Accept\",\"*/*\")}catch(s){}\"withCredentials\"in n&&(n.withCredentials=!0),this.requestTimeout&&(n.timeout=this.requestTimeout),this.hasXDR()?(n.onload=function(){r.onLoad()},n.onerror=function(){r.onError(n.responseText)}):n.onreadystatechange=function(){if(2===n.readyState){var t;try{t=n.getResponseHeader(\"Content-Type\")}catch(e){}\"application/octet-stream\"===t&&(n.responseType=\"arraybuffer\")}4===n.readyState&&(200===n.status||1223===n.status?r.onLoad():setTimeout(function(){r.onError(n.status)},0))},h(\"xhr data %s\",this.data),n.send(this.data)}catch(s){return void setTimeout(function(){r.onError(s)},0)}e.document&&(this.index=i.requestsCount++,i.requests[this.index]=this)},i.prototype.onSuccess=function(){this.emit(\"success\"),this.cleanup()},i.prototype.onData=function(t){this.emit(\"data\",t),this.onSuccess()},i.prototype.onError=function(t){this.emit(\"error\",t),this.cleanup(!0)},i.prototype.cleanup=function(t){if(\"undefined\"!=typeof this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=r:this.xhr.onreadystatechange=r,t)try{this.xhr.abort()}catch(n){}e.document&&delete i.requests[this.index],this.xhr=null}},i.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader(\"Content-Type\")}catch(n){}t=\"application/octet-stream\"===e?this.xhr.response||this.xhr.responseText:this.xhr.responseText}catch(n){this.onError(n)}null!=t&&this.onData(t)},i.prototype.hasXDR=function(){return\"undefined\"!=typeof e.XDomainRequest&&!this.xs&&this.enablesXDR},i.prototype.abort=function(){this.cleanup()},i.requestsCount=0,i.requests={},e.document&&(e.attachEvent?e.attachEvent(\"onunload\",s):e.addEventListener&&e.addEventListener(\"beforeunload\",s,!1))}).call(e,function(){return this}())},function(t,e,n){function r(t){var e=t&&t.forceBase64;u&&!e||(this.supportsBinary=!1),o.call(this,t)}var o=n(22),i=n(31),s=n(23),a=n(32),c=n(33),p=n(3)(\"engine.io-client:polling\");t.exports=r;var u=function(){var t=n(18),e=new t({xdomain:!1});return null!=e.responseType}();a(r,o),r.prototype.name=\"polling\",r.prototype.doOpen=function(){this.poll()},r.prototype.pause=function(t){function e(){p(\"paused\"),n.readyState=\"paused\",t()}var n=this;if(this.readyState=\"pausing\",this.polling||!this.writable){var r=0;this.polling&&(p(\"we are currently polling - waiting to pause\"),r++,this.once(\"pollComplete\",function(){p(\"pre-pause polling complete\"),--r||e()})),this.writable||(p(\"we are currently writing - waiting to pause\"),r++,this.once(\"drain\",function(){p(\"pre-pause writing complete\"),--r||e()}))}else e()},r.prototype.poll=function(){p(\"polling\"),this.polling=!0,this.doPoll(),this.emit(\"poll\")},r.prototype.onData=function(t){var e=this;p(\"polling got data %s\",t);var n=function(t,n,r){return\"opening\"===e.readyState&&e.onOpen(),\"close\"===t.type?(e.onClose(),!1):void e.onPacket(t)};s.decodePayload(t,this.socket.binaryType,n),\"closed\"!==this.readyState&&(this.polling=!1,this.emit(\"pollComplete\"),\"open\"===this.readyState?this.poll():p('ignoring poll - transport state \"%s\"',this.readyState))},r.prototype.doClose=function(){function t(){p(\"writing close packet\"),e.write([{type:\"close\"}])}var e=this;\"open\"===this.readyState?(p(\"transport open - closing\"),t()):(p(\"transport not open - deferring close\"),this.once(\"open\",t))},r.prototype.write=function(t){var e=this;this.writable=!1;var n=function(){e.writable=!0,e.emit(\"drain\")};s.encodePayload(t,this.supportsBinary,function(t){e.doWrite(t,n)})},r.prototype.uri=function(){var t=this.query||{},e=this.secure?\"https\":\"http\",n=\"\";!1!==this.timestampRequests&&(t[this.timestampParam]=c()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.port&&(\"https\"===e&&443!==Number(this.port)||\"http\"===e&&80!==Number(this.port))&&(n=\":\"+this.port),t.length&&(t=\"?\"+t);var r=this.hostname.indexOf(\":\")!==-1;return e+\"://\"+(r?\"[\"+this.hostname+\"]\":this.hostname)+n+this.path+t}},function(t,e,n){function r(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState=\"\",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}var o=n(23),i=n(8);t.exports=r,i(r.prototype),r.prototype.onError=function(t,e){var n=new Error(t);return n.type=\"TransportError\",n.description=e,this.emit(\"error\",n),this},r.prototype.open=function(){return\"closed\"!==this.readyState&&\"\"!==this.readyState||(this.readyState=\"opening\",this.doOpen()),this},r.prototype.close=function(){return\"opening\"!==this.readyState&&\"open\"!==this.readyState||(this.doClose(),this.onClose()),this},r.prototype.send=function(t){if(\"open\"!==this.readyState)throw new Error(\"Transport not open\");this.write(t)},r.prototype.onOpen=function(){this.readyState=\"open\",this.writable=!0,this.emit(\"open\")},r.prototype.onData=function(t){var e=o.decodePacket(t,this.socket.binaryType);this.onPacket(e)},r.prototype.onPacket=function(t){this.emit(\"packet\",t)},r.prototype.onClose=function(){this.readyState=\"closed\",this.emit(\"close\")}},function(t,e,n){(function(t){function r(t,n){var r=\"b\"+e.packets[t.type]+t.data.data;return n(r)}function o(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var o=t.data,i=new Uint8Array(o),s=new Uint8Array(1+o.byteLength);s[0]=v[t.type];for(var a=0;a<i.length;a++)s[a+1]=i[a];return r(s.buffer)}function i(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var o=new FileReader;return o.onload=function(){t.data=o.result,e.encodePacket(t,n,!0,r)},o.readAsArrayBuffer(t.data)}function s(t,n,r){if(!n)return e.encodeBase64Packet(t,r);if(g)return i(t,n,r);var o=new Uint8Array(1);o[0]=v[t.type];var s=new k([o.buffer,t.data]);return r(s)}function a(t){try{t=d.decode(t,{strict:!1})}catch(e){return!1}return t}function c(t,e,n){for(var r=new Array(t.length),o=l(t.length,n),i=function(t,n,o){e(n,function(e,n){r[t]=n,o(e,r)})},s=0;s<t.length;s++)i(s,t[s],o)}var p,u=n(24),h=n(9),f=n(25),l=n(26),d=n(27);t&&t.ArrayBuffer&&(p=n(29));var y=\"undefined\"!=typeof navigator&&/Android/i.test(navigator.userAgent),m=\"undefined\"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),g=y||m;e.protocol=3;var v=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},b=u(v),w={type:\"error\",data:\"parser error\"},k=n(30);e.encodePacket=function(e,n,i,a){\"function\"==typeof n&&(a=n,n=!1),\"function\"==typeof i&&(a=i,i=null);var c=void 0===e.data?void 0:e.data.buffer||e.data;if(t.ArrayBuffer&&c instanceof ArrayBuffer)return o(e,n,a);if(k&&c instanceof t.Blob)return s(e,n,a);if(c&&c.base64)return r(e,a);var p=v[e.type];return void 0!==e.data&&(p+=i?d.encode(String(e.data),{strict:!1}):String(e.data)),a(\"\"+p)},e.encodeBase64Packet=function(n,r){var o=\"b\"+e.packets[n.type];if(k&&n.data instanceof t.Blob){var i=new FileReader;return i.onload=function(){var t=i.result.split(\",\")[1];r(o+t)},i.readAsDataURL(n.data)}var s;try{s=String.fromCharCode.apply(null,new Uint8Array(n.data))}catch(a){for(var c=new Uint8Array(n.data),p=new Array(c.length),u=0;u<c.length;u++)p[u]=c[u];s=String.fromCharCode.apply(null,p)}return o+=t.btoa(s),r(o)},e.decodePacket=function(t,n,r){if(void 0===t)return w;if(\"string\"==typeof t){if(\"b\"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),n);if(r&&(t=a(t),t===!1))return w;var o=t.charAt(0);return Number(o)==o&&b[o]?t.length>1?{type:b[o],data:t.substring(1)}:{type:b[o]}:w}var i=new Uint8Array(t),o=i[0],s=f(t,1);return k&&\"blob\"===n&&(s=new k([s])),{type:b[o],data:s}},e.decodeBase64Packet=function(t,e){var n=b[t.charAt(0)];if(!p)return{type:n,data:{base64:!0,data:t.substr(1)}};var r=p.decode(t.substr(1));return\"blob\"===e&&k&&(r=new k([r])),{type:n,data:r}},e.encodePayload=function(t,n,r){function o(t){return t.length+\":\"+t}function i(t,r){e.encodePacket(t,!!s&&n,!1,function(t){r(null,o(t))})}\"function\"==typeof n&&(r=n,n=null);var s=h(t);return n&&s?k&&!g?e.encodePayloadAsBlob(t,r):e.encodePayloadAsArrayBuffer(t,r):t.length?void c(t,i,function(t,e){return r(e.join(\"\"))}):r(\"0:\")},e.decodePayload=function(t,n,r){if(\"string\"!=typeof t)return e.decodePayloadAsBinary(t,n,r);\"function\"==typeof n&&(r=n,n=null);var o;if(\"\"===t)return r(w,0,1);for(var i,s,a=\"\",c=0,p=t.length;c<p;c++){var u=t.charAt(c);if(\":\"===u){if(\"\"===a||a!=(i=Number(a)))return r(w,0,1);if(s=t.substr(c+1,i),a!=s.length)return r(w,0,1);if(s.length){if(o=e.decodePacket(s,n,!1),w.type===o.type&&w.data===o.data)return r(w,0,1);var h=r(o,c+i,p);if(!1===h)return}c+=i,a=\"\"}else a+=u}return\"\"!==a?r(w,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,n){function r(t,n){e.encodePacket(t,!0,!0,function(t){return n(null,t)})}return t.length?void c(t,r,function(t,e){var r=e.reduce(function(t,e){var n;return n=\"string\"==typeof e?e.length:e.byteLength,t+n.toString().length+n+2},0),o=new Uint8Array(r),i=0;return e.forEach(function(t){var e=\"string\"==typeof t,n=t;if(e){for(var r=new Uint8Array(t.length),s=0;s<t.length;s++)r[s]=t.charCodeAt(s);n=r.buffer}e?o[i++]=0:o[i++]=1;for(var a=n.byteLength.toString(),s=0;s<a.length;s++)o[i++]=parseInt(a[s]);o[i++]=255;for(var r=new Uint8Array(n),s=0;s<r.length;s++)o[i++]=r[s]}),n(o.buffer)}):n(new ArrayBuffer(0))},e.encodePayloadAsBlob=function(t,n){function r(t,n){e.encodePacket(t,!0,!0,function(t){var e=new Uint8Array(1);if(e[0]=1,\"string\"==typeof t){for(var r=new Uint8Array(t.length),o=0;o<t.length;o++)r[o]=t.charCodeAt(o);t=r.buffer,e[0]=0}for(var i=t instanceof ArrayBuffer?t.byteLength:t.size,s=i.toString(),a=new Uint8Array(s.length+1),o=0;o<s.length;o++)a[o]=parseInt(s[o]);if(a[s.length]=255,k){var c=new k([e.buffer,a.buffer,t]);n(null,c)}})}c(t,r,function(t,e){return n(new k(e))})},e.decodePayloadAsBinary=function(t,n,r){\"function\"==typeof n&&(r=n,n=null);for(var o=t,i=[];o.byteLength>0;){for(var s=new Uint8Array(o),a=0===s[0],c=\"\",p=1;255!==s[p];p++){if(c.length>310)return r(w,0,1);c+=s[p]}o=f(o,2+c.length),c=parseInt(c);var u=f(o,0,c);if(a)try{u=String.fromCharCode.apply(null,new Uint8Array(u))}catch(h){var l=new Uint8Array(u);u=\"\";for(var p=0;p<l.length;p++)u+=String.fromCharCode(l[p])}i.push(u),o=f(o,c)}var d=i.length;i.forEach(function(t,o){r(e.decodePacket(t,n,!0),o,d)})}}).call(e,function(){return this}())},function(t,e){t.exports=Object.keys||function(t){var e=[],n=Object.prototype.hasOwnProperty;for(var r in t)n.call(t,r)&&e.push(r);return e}},function(t,e){t.exports=function(t,e,n){var r=t.byteLength;if(e=e||0,n=n||r,t.slice)return t.slice(e,n);if(e<0&&(e+=r),n<0&&(n+=r),n>r&&(n=r),e>=r||e>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(t),i=new Uint8Array(n-e),s=e,a=0;s<n;s++,a++)i[a]=o[s];return i.buffer}},function(t,e){function n(t,e,n){function o(t,r){if(o.count<=0)throw new Error(\"after called too many times\");--o.count,t?(i=!0,e(t),e=n):0!==o.count||i||e(null,r)}var i=!1;return n=n||r,o.count=t,0===t?e():o}function r(){}t.exports=n},function(t,e,n){var r;(function(t,o){!function(i){function s(t){for(var e,n,r=[],o=0,i=t.length;o<i;)e=t.charCodeAt(o++),e>=55296&&e<=56319&&o<i?(n=t.charCodeAt(o++),56320==(64512&n)?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),o--)):r.push(e);return r}function a(t){for(var e,n=t.length,r=-1,o=\"\";++r<n;)e=t[r],e>65535&&(e-=65536,o+=w(e>>>10&1023|55296),e=56320|1023&e),o+=w(e);return o}function c(t,e){if(t>=55296&&t<=57343){if(e)throw Error(\"Lone surrogate U+\"+t.toString(16).toUpperCase()+\" is not a scalar value\");return!1}return!0}function p(t,e){return w(t>>e&63|128)}function u(t,e){if(0==(4294967168&t))return w(t);var n=\"\";return 0==(4294965248&t)?n=w(t>>6&31|192):0==(4294901760&t)?(c(t,e)||(t=65533),n=w(t>>12&15|224),n+=p(t,6)):0==(4292870144&t)&&(n=w(t>>18&7|240),n+=p(t,12),n+=p(t,6)),n+=w(63&t|128)}function h(t,e){e=e||{};for(var n,r=!1!==e.strict,o=s(t),i=o.length,a=-1,c=\"\";++a<i;)n=o[a],c+=u(n,r);return c}function f(){if(b>=v)throw Error(\"Invalid byte index\");var t=255&g[b];if(b++,128==(192&t))return 63&t;throw Error(\"Invalid continuation byte\")}function l(t){var e,n,r,o,i;if(b>v)throw Error(\"Invalid byte index\");if(b==v)return!1;if(e=255&g[b],b++,0==(128&e))return e;if(192==(224&e)){if(n=f(),i=(31&e)<<6|n,i>=128)return i;throw Error(\"Invalid continuation byte\")}if(224==(240&e)){if(n=f(),r=f(),i=(15&e)<<12|n<<6|r,i>=2048)return c(i,t)?i:65533;throw Error(\"Invalid continuation byte\")}if(240==(248&e)&&(n=f(),r=f(),o=f(),i=(7&e)<<18|n<<12|r<<6|o,i>=65536&&i<=1114111))return i;throw Error(\"Invalid UTF-8 detected\")}function d(t,e){e=e||{};var n=!1!==e.strict;g=s(t),v=g.length,b=0;for(var r,o=[];(r=l(n))!==!1;)o.push(r);return a(o)}var y=\"object\"==typeof e&&e,m=(\"object\"==typeof t&&t&&t.exports==y&&t,\"object\"==typeof o&&o);m.global!==m&&m.window!==m||(i=m);var g,v,b,w=String.fromCharCode,k={version:\"2.1.2\",encode:h,decode:d};r=function(){return k}.call(e,n,e,t),!(void 0!==r&&(t.exports=r))}(this)}).call(e,n(28)(t),function(){return this}())},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e){!function(){\"use strict\";for(var t=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",n=new Uint8Array(256),r=0;r<t.length;r++)n[t.charCodeAt(r)]=r;e.encode=function(e){var n,r=new Uint8Array(e),o=r.length,i=\"\";for(n=0;n<o;n+=3)i+=t[r[n]>>2],i+=t[(3&r[n])<<4|r[n+1]>>4],i+=t[(15&r[n+1])<<2|r[n+2]>>6],i+=t[63&r[n+2]];return o%3===2?i=i.substring(0,i.length-1)+\"=\":o%3===1&&(i=i.substring(0,i.length-2)+\"==\"),i},e.decode=function(t){var e,r,o,i,s,a=.75*t.length,c=t.length,p=0;\"=\"===t[t.length-1]&&(a--,\"=\"===t[t.length-2]&&a--);var u=new ArrayBuffer(a),h=new Uint8Array(u);for(e=0;e<c;e+=4)r=n[t.charCodeAt(e)],o=n[t.charCodeAt(e+1)],i=n[t.charCodeAt(e+2)],s=n[t.charCodeAt(e+3)],h[p++]=r<<2|o>>4,h[p++]=(15&o)<<4|i>>2,h[p++]=(3&i)<<6|63&s;return u}}()},function(t,e){(function(e){function n(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.buffer instanceof ArrayBuffer){var r=n.buffer;if(n.byteLength!==r.byteLength){var o=new Uint8Array(n.byteLength);o.set(new Uint8Array(r,n.byteOffset,n.byteLength)),r=o.buffer}t[e]=r}}}function r(t,e){e=e||{};var r=new i;n(t);for(var o=0;o<t.length;o++)r.append(t[o]);return e.type?r.getBlob(e.type):r.getBlob()}function o(t,e){return n(t),new Blob(t,e||{})}var i=e.BlobBuilder||e.WebKitBlobBuilder||e.MSBlobBuilder||e.MozBlobBuilder,s=function(){try{var t=new Blob([\"hi\"]);return 2===t.size}catch(e){return!1}}(),a=s&&function(){try{var t=new Blob([new Uint8Array([1,2])]);return 2===t.size}catch(e){return!1}}(),c=i&&i.prototype.append&&i.prototype.getBlob;t.exports=function(){return s?a?e.Blob:o:c?r:void 0}()}).call(e,function(){return this}())},function(t,e){e.encode=function(t){var e=\"\";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+=\"&\"),e+=encodeURIComponent(n)+\"=\"+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split(\"&\"),r=0,o=n.length;r<o;r++){var i=n[r].split(\"=\");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}},function(t,e){t.exports=function(t,e){var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e){\"use strict\";function n(t){var e=\"\";do e=s[t%a]+e,t=Math.floor(t/a);while(t>0);return e}function r(t){var e=0;for(u=0;u<t.length;u++)e=e*a+c[t.charAt(u)];return e}function o(){var t=n(+new Date);return t!==i?(p=0,i=t):t+\".\"+n(p++)}for(var i,s=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\".split(\"\"),a=64,c={},p=0,u=0;u<a;u++)c[s[u]]=u;o.encode=n,o.decode=r,t.exports=o},function(t,e,n){(function(e){function r(){}function o(t){i.call(this,t),this.query=this.query||{},a||(e.___eio||(e.___eio=[]),a=e.___eio),this.index=a.length;var n=this;a.push(function(t){n.onData(t)}),this.query.j=this.index,e.document&&e.addEventListener&&e.addEventListener(\"beforeunload\",function(){n.script&&(n.script.onerror=r)},!1)}var i=n(21),s=n(32);t.exports=o;var a,c=/\\n/g,p=/\\\\n/g;s(o,i),o.prototype.supportsBinary=!1,o.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),i.prototype.doClose.call(this)},o.prototype.doPoll=function(){var t=this,e=document.createElement(\"script\");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError(\"jsonp poll error\",e)};var n=document.getElementsByTagName(\"script\")[0];n?n.parentNode.insertBefore(e,n):(document.head||document.body).appendChild(e),this.script=e;var r=\"undefined\"!=typeof navigator&&/gecko/i.test(navigator.userAgent);r&&setTimeout(function(){var t=document.createElement(\"iframe\");document.body.appendChild(t),document.body.removeChild(t)},100)},o.prototype.doWrite=function(t,e){function n(){r(),e()}function r(){if(o.iframe)try{o.form.removeChild(o.iframe)}catch(t){o.onError(\"jsonp polling iframe removal error\",t)}try{var e='<iframe src=\"javascript:0\" name=\"'+o.iframeId+'\">';i=document.createElement(e)}catch(t){i=document.createElement(\"iframe\"),i.name=o.iframeId,i.src=\"javascript:0\"}i.id=o.iframeId,o.form.appendChild(i),o.iframe=i}var o=this;if(!this.form){var i,s=document.createElement(\"form\"),a=document.createElement(\"textarea\"),u=this.iframeId=\"eio_iframe_\"+this.index;s.className=\"socketio\",s.style.position=\"absolute\",s.style.top=\"-1000px\",s.style.left=\"-1000px\",s.target=u,s.method=\"POST\",s.setAttribute(\"accept-charset\",\"utf-8\"),a.name=\"d\",s.appendChild(a),document.body.appendChild(s),this.form=s,this.area=a}this.form.action=this.uri(),r(),t=t.replace(p,\"\\\\\\n\"),this.area.value=t.replace(c,\"\\\\n\");try{this.form.submit()}catch(h){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){\"complete\"===o.iframe.readyState&&n()}:this.iframe.onload=n}}).call(e,function(){return this}())},function(t,e,n){(function(e){function r(t){var e=t&&t.forceBase64;e&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=h&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(l=o),i.call(this,t)}var o,i=n(22),s=n(23),a=n(31),c=n(32),p=n(33),u=n(3)(\"engine.io-client:websocket\"),h=e.WebSocket||e.MozWebSocket;if(\"undefined\"==typeof window)try{o=n(36)}catch(f){}var l=h;l||\"undefined\"!=typeof window||(l=o),t.exports=r,c(r,i),r.prototype.name=\"websocket\",r.prototype.supportsBinary=!0,r.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?e?new l(t,e):new l(t):new l(t,e,n)}catch(r){return this.emit(\"error\",r)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType=\"nodebuffer\"):this.ws.binaryType=\"arraybuffer\",this.addEventListeners()}},r.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError(\"websocket error\",e)}},r.prototype.write=function(t){function n(){r.emit(\"flush\"),setTimeout(function(){r.writable=!0,r.emit(\"drain\")},0)}var r=this;this.writable=!1;for(var o=t.length,i=0,a=o;i<a;i++)!function(t){s.encodePacket(t,r.supportsBinary,function(i){if(!r.usingBrowserWebSocket){var s={};if(t.options&&(s.compress=t.options.compress),r.perMessageDeflate){var a=\"string\"==typeof i?e.Buffer.byteLength(i):i.length;a<r.perMessageDeflate.threshold&&(s.compress=!1)}}try{r.usingBrowserWebSocket?r.ws.send(i):r.ws.send(i,s)}catch(c){u(\"websocket closed before onclose event\")}--o||n()})}(t[i])},r.prototype.onClose=function(){i.prototype.onClose.call(this)},r.prototype.doClose=function(){\"undefined\"!=typeof this.ws&&this.ws.close()},r.prototype.uri=function(){var t=this.query||{},e=this.secure?\"wss\":\"ws\",n=\"\";this.port&&(\"wss\"===e&&443!==Number(this.port)||\"ws\"===e&&80!==Number(this.port))&&(n=\":\"+this.port),this.timestampRequests&&(t[this.timestampParam]=p()),this.supportsBinary||(t.b64=1),t=a.encode(t),t.length&&(t=\"?\"+t);var r=this.hostname.indexOf(\":\")!==-1;return e+\"://\"+(r?\"[\"+this.hostname+\"]\":this.hostname)+n+this.path+t},r.prototype.check=function(){return!(!l||\"__initialize\"in l&&this.name===r.prototype.name)}}).call(e,function(){return this}())},function(t,e){},function(t,e){var n=[].indexOf;t.exports=function(t,e){if(n)return t.indexOf(e);for(var r=0;r<t.length;++r)if(t[r]===e)return r;return-1}},function(t,e){(function(e){var n=/^[\\],:{}\\s]*$/,r=/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,o=/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,i=/(?:^|:|,)(?:\\s*\\[)+/g,s=/^\\s+/,a=/\\s+$/;t.exports=function(t){return\"string\"==typeof t&&t?(t=t.replace(s,\"\").replace(a,\"\"),e.JSON&&JSON.parse?JSON.parse(t):n.test(t.replace(r,\"@\").replace(o,\"]\").replace(i,\"\"))?new Function(\"return \"+t)():void 0):null}}).call(e,function(){return this}())},function(t,e,n){\"use strict\";function r(t,e,n){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}var o=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},i=n(7),s=n(8),a=n(40),c=n(41),p=n(42),u=n(3)(\"socket.io-client:socket\"),h=n(31);t.exports=e=r;var f={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},l=s.prototype.emit;s(r.prototype),r.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[c(t,\"open\",p(this,\"onopen\")),c(t,\"packet\",p(this,\"onpacket\")),c(t,\"close\",p(this,\"onclose\"))]}},r.prototype.open=r.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),\"open\"===this.io.readyState&&this.onopen(),this.emit(\"connecting\"),this)},r.prototype.send=function(){var t=a(arguments);return t.unshift(\"message\"),this.emit.apply(this,t),this},r.prototype.emit=function(t){if(f.hasOwnProperty(t))return l.apply(this,arguments),this;var e=a(arguments),n={type:i.EVENT,data:e};return n.options={},n.options.compress=!this.flags||!1!==this.flags.compress,\"function\"==typeof e[e.length-1]&&(u(\"emitting packet with ack id %d\",this.ids),this.acks[this.ids]=e.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),delete this.flags,this},r.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},r.prototype.onopen=function(){if(u(\"transport is open - connecting\"),\"/\"!==this.nsp)if(this.query){var t=\"object\"===o(this.query)?h.encode(this.query):this.query;u(\"sending connect packet with query %s\",t),this.packet({type:i.CONNECT,query:t})}else this.packet({type:i.CONNECT})},r.prototype.onclose=function(t){u(\"close (%s)\",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit(\"disconnect\",t)},r.prototype.onpacket=function(t){if(t.nsp===this.nsp)switch(t.type){case i.CONNECT:this.onconnect();break;case i.EVENT:this.onevent(t);break;case i.BINARY_EVENT:this.onevent(t);break;case i.ACK:this.onack(t);break;case i.BINARY_ACK:this.onack(t);break;case i.DISCONNECT:this.ondisconnect();break;case i.ERROR:this.emit(\"error\",t.data)}},r.prototype.onevent=function(t){var e=t.data||[];u(\"emitting event %j\",e),null!=t.id&&(u(\"attaching ack callback to event\"),e.push(this.ack(t.id))),this.connected?l.apply(this,e):this.receiveBuffer.push(e)},r.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var r=a(arguments);u(\"sending ack %j\",r),e.packet({type:i.ACK,id:t,data:r})}}},r.prototype.onack=function(t){var e=this.acks[t.id];\"function\"==typeof e?(u(\"calling ack %s with %j\",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):u(\"bad ack %s\",t.id)},r.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit(\"connect\"),this.emitBuffered()},r.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)l.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},r.prototype.ondisconnect=function(){u(\"server disconnect (%s)\",this.nsp),this.destroy(),this.onclose(\"io server disconnect\")},r.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},r.prototype.close=r.prototype.disconnect=function(){return this.connected&&(u(\"performing disconnect (%s)\",this.nsp),this.packet({type:i.DISCONNECT})),this.destroy(),this.connected&&this.onclose(\"io client disconnect\"),this},r.prototype.compress=function(t){return this.flags=this.flags||{},this.flags.compress=t,this}},function(t,e){function n(t,e){var n=[];e=e||0;for(var r=e||0;r<t.length;r++)n[r-e]=t[r];return n}t.exports=n},function(t,e){\"use strict\";function n(t,e,n){return t.on(e,n),{destroy:function(){t.removeListener(e,n)}}}t.exports=n},function(t,e){var n=[].slice;t.exports=function(t,e){if(\"string\"==typeof e&&(e=t[e]),\"function\"!=typeof e)throw new Error(\"bind() requires a function\");var r=n.call(arguments,2);return function(){return e.apply(t,r.concat(n.call(arguments)))}}},function(t,e){function n(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=n,n.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(t){this.ms=t},n.prototype.setMax=function(t){this.max=t},n.prototype.setJitter=function(t){this.jitter=t}}])});\n//# sourceMappingURL=socket.io.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13\n");

/***/ })
],[10]);